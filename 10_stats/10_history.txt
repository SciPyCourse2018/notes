mspacek@Godel:~/SciPyCourse2018/notes/10_stats$ ipython
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.3.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import numpy as np

In [2]: c = np.random.random(1000)

In [3]: c
Out[3]:
array([1.59437162e-01, 8.38293081e-01, 1.41264892e-01, 6.10633938e-02,
       2.40673130e-01, 6.81996438e-01, 8.78806682e-01, 9.35102989e-01,
       7.22486123e-01, 1.10052550e-01, 5.95339011e-01, 4.65026991e-01,
       4.05778732e-01, 6.35843949e-01, 8.95819874e-01, 3.78756244e-01,
       4.08327492e-01, 4.17169558e-01, 1.01845552e-01, 5.70976041e-01,
       5.95060994e-01, 1.71362681e-01, 5.80476661e-01, 6.47368098e-02,
       8.09327138e-01, 9.09484949e-01, 9.88834397e-01, 7.40601974e-01,
       4.16743177e-01, 9.77264132e-02, 9.55573461e-01, 8.68650839e-01,
       8.20204679e-01, 7.87472027e-01, 3.67165469e-01, 4.76856551e-01,
       7.24264628e-01, 2.74440498e-01, 7.86017833e-01, 8.38214067e-01,
       1.92969158e-01, 4.46747688e-01, 9.09337235e-01, 2.57036961e-01,
       5.98560198e-01, 3.00608840e-01, 4.99359401e-02, 3.45383692e-01,
       2.10051460e-01, 4.24426648e-01, 9.30639737e-01, 7.55819184e-02,
       3.66348533e-01, 5.85443482e-01, 2.67746445e-01, 3.56599107e-01,
       6.13777275e-01, 1.04718613e-01, 4.01966461e-01, 8.94966053e-01,
       5.05899797e-01, 2.23546989e-01, 7.21309022e-01, 2.84236112e-01,
       8.99807667e-01, 2.74503216e-03, 4.63108053e-01, 7.42891227e-01,
       1.09378273e-01, 8.30829128e-01, 2.52409520e-01, 8.30316238e-01,
       7.12454814e-01, 1.57349476e-01, 6.63100344e-01, 6.62714474e-01,
       4.88812869e-01, 9.20605638e-01, 9.74955788e-02, 6.47373936e-01,
       4.78262575e-01, 4.78779304e-01, 9.92660052e-01, 3.42839617e-04,
       4.31345990e-01, 7.42755893e-02, 5.31478103e-01, 8.89304791e-02,
       7.84355069e-01, 4.37101142e-02, 4.56650860e-01, 9.07810318e-01,
       1.86871087e-01, 4.66073686e-01, 7.27245836e-01, 9.48450079e-01,
       3.93468162e-01, 4.48213005e-01, 6.68936515e-01, 9.62519772e-02,
       8.41488866e-01, 1.43820607e-01, 6.05306429e-01, 6.89001133e-01,
       5.41369586e-01, 6.64317846e-01, 8.23788928e-01, 9.13708641e-02,
       3.52197361e-01, 9.39408060e-01, 8.45305605e-01, 7.11532759e-01,
       8.36833507e-01, 6.54429160e-01, 6.09005841e-01, 4.18877728e-01,
       4.39400081e-01, 9.90650103e-01, 1.30138265e-01, 5.71309304e-01,
       4.42958993e-01, 7.90262858e-01, 5.66454349e-01, 1.74726098e-01,
       8.23382174e-01, 8.10326850e-01, 1.73073863e-01, 6.39602317e-01,
       2.23303498e-03, 5.67642197e-01, 3.52397312e-01, 1.12383359e-01,
       5.14518255e-01, 5.16721958e-01, 8.50513377e-01, 7.36328576e-01,
       7.77473000e-01, 8.63016337e-01, 4.77399945e-02, 6.45828872e-01,
       8.78001793e-01, 2.87438393e-01, 1.22903310e-01, 3.71363730e-01,
       1.17634349e-01, 7.14222336e-01, 7.91853854e-01, 2.24223587e-01,
       5.59061862e-01, 7.30058207e-01, 9.19271670e-01, 4.59189227e-01,
       5.02460324e-01, 1.32840229e-01, 2.89231957e-02, 3.06484977e-01,
       1.14469244e-01, 8.83369389e-01, 4.26110782e-01, 2.67926909e-01,
       4.45927016e-01, 6.13038165e-01, 7.75450481e-02, 9.87976024e-01,
       1.05673862e-02, 9.97177900e-01, 9.79205671e-02, 9.34005976e-01,
       6.33199541e-01, 7.86191125e-01, 2.09971280e-01, 2.51014957e-01,
       9.38554398e-01, 2.04900560e-01, 3.19757887e-01, 3.41216295e-02,
       3.68736825e-01, 6.31567038e-01, 4.24718623e-02, 2.99587506e-01,
       9.19968626e-02, 7.44649259e-01, 4.29235206e-01, 5.02623332e-01,
       3.63141962e-01, 7.20754402e-02, 7.61093565e-01, 3.22165688e-01,
       6.13620352e-01, 6.05553108e-02, 1.29505333e-01, 8.67321523e-02,
       4.66075527e-01, 4.91553538e-02, 5.19465656e-01, 6.74058187e-02,
       4.42128230e-01, 7.04729491e-01, 3.78747099e-01, 8.21667110e-01,
       6.04046865e-01, 6.98238165e-01, 2.92401256e-01, 6.80816350e-01,
       9.15911444e-01, 7.59053923e-01, 3.68689280e-02, 8.17325226e-01,
       9.66337103e-01, 4.57794322e-01, 9.29752949e-01, 2.20209945e-01,
       5.78388295e-01, 7.06708961e-01, 6.44855591e-02, 9.22338181e-01,
       1.01517709e-01, 4.29175973e-02, 8.51384827e-01, 4.03175682e-01,
       2.63939052e-01, 2.37257018e-01, 4.50664977e-02, 3.01708404e-01,
       6.14286543e-01, 6.54940178e-01, 8.78719366e-02, 3.66404733e-01,
       6.10793308e-01, 3.45853601e-01, 2.33479168e-01, 2.53930834e-01,
       6.62592025e-01, 9.38528145e-01, 8.42730334e-01, 1.65641221e-01,
       4.85766165e-01, 6.60408401e-01, 8.21594375e-01, 7.98372269e-01,
       3.21444664e-01, 3.04030616e-01, 3.54570408e-01, 7.56355215e-01,
       2.92446519e-01, 3.94374616e-01, 7.51873682e-01, 7.10062008e-01,
       9.40909539e-01, 8.86839416e-02, 6.06383738e-01, 3.85501801e-02,
       1.50621119e-02, 1.95512659e-01, 6.17980491e-01, 8.57937522e-01,
       6.64705756e-01, 4.44033824e-01, 2.45287079e-01, 9.91701528e-01,
       8.05845711e-01, 5.22050689e-02, 2.52353298e-01, 5.49907122e-02,
       1.68228663e-01, 6.68476754e-01, 9.16342791e-01, 9.85036886e-02,
       7.87068544e-01, 3.14593193e-02, 6.52481291e-01, 3.37917308e-01,
       8.65312406e-01, 5.57151662e-01, 3.12885317e-01, 3.91823664e-01,
       4.95838526e-02, 8.29225279e-02, 4.94290633e-02, 1.61688030e-01,
       5.48782285e-01, 2.35943196e-01, 5.87616327e-02, 5.06461859e-01,
       4.05219800e-01, 9.19922082e-01, 8.91647521e-01, 8.85088368e-01,
       8.45258047e-01, 6.13071406e-01, 5.62490659e-01, 2.91394069e-01,
       6.40056552e-01, 1.78648465e-01, 7.42251607e-01, 6.24296666e-01,
       8.50085886e-01, 3.86740439e-01, 1.60237133e-01, 8.05667038e-01,
       5.48484998e-01, 2.61993402e-02, 5.82335272e-01, 9.70249627e-01,
       5.36497235e-01, 6.35788654e-01, 7.73566112e-01, 5.47629332e-01,
       9.78875125e-01, 8.91449181e-01, 9.80391089e-02, 1.44282691e-01,
       6.80342584e-01, 1.76207071e-01, 3.11772120e-01, 7.97907750e-01,
       1.01454477e-01, 3.29080815e-01, 9.14809487e-02, 9.52347455e-01,
       7.98556508e-01, 8.08348547e-02, 9.13664104e-01, 1.86328271e-01,
       6.42498853e-01, 9.50455364e-01, 3.93959546e-01, 7.68829325e-02,
       3.95867216e-01, 9.69292215e-01, 1.25285391e-01, 2.65978961e-01,
       6.32043007e-01, 2.08600442e-01, 4.15591179e-02, 4.88467857e-01,
       4.43611696e-03, 4.73710380e-01, 1.98374737e-01, 4.62941517e-01,
       1.28590696e-01, 2.52413984e-02, 1.88642598e-01, 2.27987305e-01,
       8.14921998e-01, 2.64746066e-01, 2.43516768e-01, 2.48196805e-01,
       2.16396234e-01, 2.44072967e-01, 2.42555276e-01, 4.61816824e-01,
       8.31004713e-01, 4.58669250e-02, 6.47313832e-02, 9.11884767e-01,
       5.12784618e-01, 4.24797138e-01, 8.55380231e-01, 8.82810515e-01,
       7.53118885e-01, 3.32606732e-01, 7.15985786e-01, 8.97052772e-01,
       7.65597260e-01, 4.12553901e-01, 2.09252093e-01, 3.98646615e-01,
       7.74646724e-01, 9.59692953e-01, 6.11010824e-01, 6.06625162e-01,
       5.70422395e-01, 4.82134503e-01, 6.70732022e-01, 3.31049491e-01,
       3.81742584e-01, 4.46835907e-01, 2.25552012e-01, 8.18923189e-01,
       9.46368273e-01, 2.34503293e-02, 8.85158587e-01, 7.93429300e-01,
       6.23145788e-01, 3.68426459e-01, 5.48907179e-01, 2.23420287e-01,
       7.50093014e-01, 3.45320675e-01, 8.80962472e-01, 7.14952540e-01,
       3.32212473e-02, 9.46690534e-01, 9.68374158e-01, 7.98504014e-02,
       9.60644263e-01, 2.68667429e-01, 6.41977758e-01, 8.03400161e-01,
       9.90607868e-02, 5.36037237e-01, 5.59651717e-01, 3.34246820e-01,
       1.20872965e-02, 3.07482138e-01, 9.99570407e-02, 9.30764582e-01,
       4.80853005e-01, 1.06598187e-01, 1.16331267e-01, 8.68223518e-01,
       9.67694019e-01, 6.58623959e-01, 3.68790358e-01, 9.98112409e-01,
       6.03092160e-01, 4.37708949e-01, 4.39080732e-02, 8.87032838e-01,
       3.37777687e-01, 7.22114902e-01, 3.39068403e-01, 9.20719060e-01,
       5.95609610e-01, 8.58327870e-01, 5.29928576e-01, 5.09184067e-01,
       5.52197281e-01, 7.33563391e-01, 7.10209649e-01, 9.52253416e-01,
       8.78698101e-01, 3.74311750e-01, 6.47909355e-01, 8.51880007e-02,
       7.79329035e-02, 4.41709862e-01, 8.79123934e-01, 1.52061967e-01,
       7.94068641e-02, 1.40147456e-01, 5.54052899e-01, 8.05047081e-01,
       2.01502533e-01, 6.96091068e-01, 3.95335106e-01, 9.11765553e-01,
       1.49618820e-01, 7.64281726e-01, 6.37269192e-01, 8.00584477e-01,
       6.42840265e-01, 5.19958808e-01, 5.15036528e-01, 5.68347735e-01,
       1.01979425e-02, 5.68859792e-01, 5.93323350e-01, 2.36213183e-01,
       2.90583738e-01, 8.19747908e-01, 1.78297647e-01, 4.67592563e-01,
       9.78717413e-01, 7.78697624e-01, 6.17067270e-01, 2.14417105e-02,
       3.35659470e-03, 8.17185424e-01, 3.46329864e-01, 4.53436423e-02,
       8.79258412e-01, 7.63449731e-01, 1.23265157e-01, 2.27637121e-02,
       9.30410304e-01, 2.57032646e-01, 4.22467066e-01, 5.39166538e-01,
       6.32439921e-01, 3.00028035e-01, 3.44834279e-01, 2.10770694e-01,
       3.03124359e-01, 5.65411197e-01, 5.05371790e-01, 1.60779629e-01,
       3.80812599e-01, 8.31849182e-01, 2.35649298e-01, 3.26580985e-01,
       7.22903794e-01, 6.43795659e-01, 2.82380986e-01, 6.53449063e-01,
       8.71590660e-01, 6.42975120e-01, 9.00223650e-01, 1.30941446e-01,
       1.68442223e-01, 6.55506096e-01, 1.54126781e-01, 9.31195006e-01,
       1.94038419e-01, 3.50401471e-01, 5.20556898e-01, 7.81257705e-01,
       3.96613888e-01, 9.56718805e-01, 6.92547091e-01, 2.24589147e-01,
       6.07479213e-01, 4.81711544e-01, 5.55512321e-01, 3.69326527e-02,
       1.28221127e-01, 7.36273250e-01, 6.31017133e-01, 3.52558859e-01,
       9.74239416e-01, 7.56386817e-01, 7.75938607e-01, 8.01949043e-01,
       4.03339308e-01, 2.55100336e-01, 2.38526743e-01, 7.52332664e-01,
       8.76627062e-01, 9.13267234e-01, 6.51041865e-01, 7.59814024e-01,
       2.61142032e-02, 1.80562531e-01, 1.59442546e-01, 8.17938940e-01,
       9.02550359e-01, 9.26291492e-01, 3.56207358e-01, 5.14103355e-01,
       1.08120876e-01, 9.08011370e-01, 4.42934691e-01, 3.32158047e-01,
       7.15612105e-01, 1.56911109e-01, 7.32392551e-01, 1.66515228e-01,
       5.43376233e-01, 5.06289395e-01, 9.63014037e-02, 9.35265658e-02,
       9.29089825e-01, 8.14062441e-01, 4.55556610e-01, 8.78788781e-01,
       8.85125004e-01, 9.95463919e-01, 8.59169825e-01, 6.02464775e-01,
       1.69120980e-01, 8.73671206e-01, 2.92306085e-01, 2.53127391e-01,
       7.77646156e-01, 6.65798277e-02, 8.15255684e-01, 2.42802361e-01,
       6.02920622e-01, 5.87532161e-01, 4.85164056e-01, 8.77001473e-01,
       1.53187887e-01, 5.07511673e-02, 1.65499798e-02, 5.86628627e-01,
       2.39011988e-01, 7.88279107e-01, 4.59923682e-01, 1.85334296e-01,
       3.87293068e-01, 2.07301263e-01, 1.15381427e-01, 2.95794442e-01,
       4.49367975e-01, 6.35489400e-01, 4.74130418e-01, 2.55392336e-01,
       1.80912196e-01, 7.81739270e-01, 1.24947527e-01, 7.13652855e-01,
       1.57197718e-01, 8.73562222e-01, 1.30393516e-01, 4.38371507e-01,
       6.24983338e-01, 6.99329742e-01, 7.02197990e-01, 4.89104826e-01,
       1.77760540e-01, 8.76265332e-01, 6.09674683e-02, 9.83815607e-01,
       7.62244967e-01, 5.03856677e-01, 8.13174377e-01, 1.35041194e-01,
       8.43571275e-01, 4.29542169e-01, 3.46217594e-02, 6.80518018e-01,
       4.24633248e-01, 1.27495096e-01, 3.10482967e-01, 7.08501260e-01,
       9.29775175e-01, 8.02491760e-01, 2.88939386e-01, 1.56061687e-01,
       6.58526331e-01, 3.84504217e-01, 9.29034774e-01, 4.08692861e-01,
       5.18628207e-01, 1.82490107e-01, 2.09865444e-01, 3.29966354e-01,
       2.07928547e-01, 1.89555227e-01, 3.61172783e-01, 5.06052925e-01,
       4.48402337e-01, 5.13293153e-01, 5.84535309e-01, 9.67771016e-01,
       4.74901724e-01, 8.99510366e-01, 3.40009539e-01, 7.89860088e-01,
       3.15746759e-01, 5.83889743e-01, 9.08730496e-01, 5.68685166e-01,
       1.05108670e-01, 3.01037525e-01, 1.64643084e-01, 3.81718726e-01,
       3.13590940e-02, 2.62942896e-01, 3.00873657e-01, 6.93644999e-01,
       1.09238577e-02, 3.56469700e-01, 4.78083831e-01, 6.35267908e-01,
       7.02794782e-02, 1.14315259e-01, 1.96770061e-01, 3.66041822e-01,
       1.79474134e-01, 4.85451183e-01, 5.56981962e-01, 4.04360552e-01,
       6.44559450e-02, 1.60822029e-01, 8.45534176e-01, 7.82896648e-01,
       1.07777602e-01, 6.58558990e-01, 9.01589860e-01, 8.33025237e-01,
       7.09675689e-01, 6.34952852e-01, 7.90541715e-01, 5.11837689e-01,
       2.72208845e-01, 5.65908049e-02, 3.58218955e-01, 3.91391443e-01,
       8.31050105e-01, 8.94057529e-01, 8.41850267e-01, 8.43796651e-01,
       2.78125440e-02, 5.75986940e-01, 1.92395416e-01, 7.83652080e-01,
       9.20079330e-01, 4.94075523e-01, 4.11925634e-01, 6.21749465e-01,
       4.50626486e-01, 6.09347871e-01, 9.67532032e-01, 9.00600664e-01,
       9.11038114e-01, 9.90692317e-01, 8.63001861e-01, 3.10426127e-01,
       8.36025688e-01, 5.99231515e-01, 1.81003875e-01, 9.88605759e-01,
       8.89081377e-01, 7.59964055e-01, 4.31303142e-01, 9.24356470e-01,
       1.74992875e-01, 4.84472657e-01, 4.52995675e-01, 9.80433069e-02,
       4.23474544e-01, 7.92138091e-01, 5.29356895e-01, 3.09976270e-01,
       6.10152078e-01, 6.73179294e-02, 3.22950608e-01, 1.11008569e-01,
       8.43927076e-01, 1.61389221e-01, 2.66199870e-01, 3.31390788e-01,
       9.46927203e-01, 2.66917467e-01, 5.90630702e-01, 9.28466716e-02,
       8.13957779e-01, 9.15343605e-04, 4.62160746e-01, 9.33381545e-01,
       1.59251635e-01, 2.60432502e-01, 4.38167482e-01, 4.45423335e-01,
       8.34880240e-01, 7.57003210e-01, 5.95819771e-01, 9.90145088e-01,
       1.86630072e-01, 2.66968836e-01, 4.54733530e-01, 9.29100431e-01,
       4.65483699e-01, 2.88398145e-01, 6.99913196e-01, 4.16090747e-01,
       2.24434183e-01, 2.59134336e-01, 4.55282043e-01, 9.16829862e-01,
       8.51501751e-01, 5.77321547e-01, 4.62678959e-01, 3.83309127e-01,
       3.46815383e-01, 4.56101824e-01, 9.56953628e-01, 4.36029588e-01,
       3.46952625e-01, 7.97255828e-01, 2.78096988e-01, 2.04846471e-01,
       2.60058737e-01, 3.08004342e-01, 4.73209764e-01, 4.54399756e-01,
       8.51283420e-01, 6.50081575e-01, 8.97850140e-01, 4.86974704e-01,
       6.56676452e-01, 1.96218672e-01, 2.71003173e-01, 9.40561497e-01,
       3.73454700e-01, 9.37972334e-01, 1.85293232e-01, 2.12933344e-01,
       8.18243871e-01, 3.94228259e-01, 7.55645482e-01, 6.81122894e-01,
       4.08903792e-02, 7.40676068e-01, 1.77801412e-01, 5.72151653e-02,
       3.95714437e-01, 7.41618457e-01, 8.53177203e-01, 5.63512452e-01,
       4.82288516e-01, 3.99045213e-01, 5.77999529e-01, 7.87614010e-01,
       3.80966362e-02, 4.49357693e-01, 3.40273476e-02, 4.31056766e-03,
       1.34052967e-01, 8.42230284e-01, 3.40905109e-01, 2.52432033e-01,
       3.96523131e-01, 2.34277165e-01, 8.09537568e-01, 9.98519261e-01,
       3.22159908e-01, 9.32217672e-01, 7.00397815e-01, 8.43425023e-01,
       1.04766131e-01, 2.61719946e-01, 5.22066029e-01, 3.37301405e-01,
       6.94306578e-01, 9.70639464e-01, 9.22852477e-01, 4.74338576e-01,
       1.40353788e-01, 2.95541288e-01, 6.06609454e-01, 4.89081656e-01,
       2.74677766e-01, 3.40949131e-01, 6.42043584e-01, 9.18904703e-01,
       5.78597915e-01, 8.95590402e-01, 9.59061613e-01, 3.73605827e-01,
       6.84335024e-01, 6.73377986e-01, 1.83069506e-01, 4.16602293e-01,
       4.35749407e-01, 9.90044585e-01, 4.15691383e-02, 8.84280259e-01,
       2.98340107e-02, 8.35962838e-01, 5.05301598e-01, 5.72805318e-02,
       9.33193193e-01, 5.31987575e-01, 7.23815299e-01, 6.36911159e-01,
       6.91386992e-01, 4.59127510e-01, 7.82845971e-01, 5.10943629e-01,
       3.15523094e-01, 2.05779782e-01, 1.87112786e-01, 3.69440164e-01,
       5.40600152e-01, 4.54755021e-01, 1.55084174e-01, 6.71614568e-02,
       1.30224239e-01, 2.36800331e-01, 2.39845035e-01, 8.96142935e-01,
       6.23416019e-01, 6.29975711e-02, 2.23501544e-01, 4.84073098e-01,
       2.98160982e-01, 5.87771801e-01, 1.14215602e-02, 9.59698472e-01,
       9.39095883e-01, 4.96275831e-01, 7.07454575e-01, 7.44274910e-01,
       9.01963602e-01, 1.07027214e-01, 2.72895400e-01, 7.32136161e-01,
       8.63201000e-01, 5.41421089e-01, 7.25145965e-01, 8.51761948e-01,
       1.30591887e-02, 7.88115636e-01, 4.60156211e-03, 7.33416798e-01,
       2.82028616e-01, 2.78636722e-01, 9.30018352e-01, 3.71894107e-01,
       8.87557872e-01, 5.41063654e-01, 1.39418492e-01, 8.83002374e-01,
       2.51498251e-01, 2.35651775e-01, 1.37980217e-03, 1.69771175e-01,
       3.97601120e-01, 5.38675395e-01, 5.58197321e-01, 4.96529832e-01,
       6.69562562e-01, 3.39938206e-01, 9.25007762e-01, 1.37791286e-02,
       4.73797538e-02, 8.89438528e-01, 5.88520252e-01, 5.18340797e-01,
       1.66520235e-01, 7.30777181e-01, 1.04785564e-01, 6.87498677e-01,
       2.54364172e-01, 6.11997326e-01, 5.84379089e-01, 3.54607325e-01,
       4.68747980e-01, 9.40088656e-01, 1.51962158e-01, 5.02404684e-02,
       6.08703495e-01, 5.53348709e-01, 1.46767843e-01, 1.98972139e-01,
       1.17020400e-01, 8.97112687e-01, 4.33448226e-02, 7.62419829e-01,
       6.12846610e-01, 9.82587459e-01, 2.27843525e-01, 4.19911490e-02,
       4.30486063e-01, 5.11008562e-01, 6.85345449e-01, 1.35077931e-01,
       3.96946521e-01, 7.05713567e-01, 9.20951740e-01, 5.29917412e-01,
       3.70148710e-01, 3.71118451e-01, 7.43486826e-01, 2.71637486e-01,
       2.53796361e-01, 8.84208353e-01, 1.84519963e-03, 6.40467641e-01,
       4.71154824e-01, 5.21890335e-02, 9.60600329e-01, 8.32763516e-01,
       4.46828435e-01, 5.28144795e-01, 3.40223650e-01, 2.52221743e-01,
       7.52797488e-01, 6.45277069e-01, 8.57084465e-01, 8.84351918e-01,
       1.59501003e-01, 4.44373976e-01, 3.10174795e-01, 6.53135883e-01,
       9.74084290e-02, 1.56230417e-01, 8.08126546e-01, 7.48053879e-01,
       8.39610660e-01, 4.71362638e-01, 5.44738218e-01, 1.15053260e-01,
       5.06809084e-01, 8.51534726e-01, 7.22332189e-01, 2.88872154e-01,
       8.09786489e-01, 7.28707482e-01, 2.81368869e-02, 6.94264022e-01,
       1.95525700e-01, 4.04895577e-01, 7.82353968e-01, 1.57988367e-01,
       2.22814402e-01, 1.18984142e-01, 4.97886515e-01, 7.21073250e-02,
       2.91599796e-01, 6.80857574e-01, 8.22193162e-01, 5.34727532e-01,
       9.33329436e-01, 6.67442901e-01, 6.58211945e-01, 1.87788444e-01])

In [4]: d = np.random.randint(0, 10, 1000)

In [5]: d
Out[5]:
array([3, 6, 5, 8, 2, 4, 7, 5, 5, 3, 1, 7, 2, 7, 5, 3, 6, 9, 8, 3, 5, 1,
       2, 9, 8, 7, 6, 9, 5, 5, 0, 7, 7, 1, 3, 0, 2, 2, 7, 7, 4, 1, 1, 4,
       9, 9, 8, 9, 8, 7, 4, 1, 3, 1, 9, 5, 4, 5, 2, 6, 0, 2, 5, 6, 2, 6,
       0, 3, 3, 0, 2, 8, 4, 3, 4, 3, 5, 6, 4, 4, 6, 8, 7, 1, 4, 1, 4, 5,
       3, 9, 9, 9, 8, 0, 4, 4, 2, 4, 0, 1, 8, 8, 8, 3, 4, 1, 7, 1, 4, 3,
       6, 9, 1, 3, 0, 1, 0, 1, 8, 1, 2, 1, 3, 9, 1, 6, 3, 0, 5, 3, 3, 6,
       1, 7, 8, 8, 3, 4, 6, 2, 5, 2, 7, 4, 8, 5, 4, 6, 9, 4, 4, 0, 2, 0,
       3, 1, 1, 1, 3, 0, 4, 0, 0, 2, 1, 2, 6, 5, 7, 7, 8, 7, 6, 2, 4, 6,
       3, 8, 9, 6, 0, 2, 5, 3, 2, 0, 8, 1, 3, 5, 4, 5, 5, 3, 9, 8, 8, 5,
       2, 4, 5, 9, 5, 6, 1, 7, 6, 2, 4, 3, 1, 0, 1, 9, 2, 4, 6, 5, 3, 4,
       2, 0, 6, 4, 3, 6, 0, 4, 6, 2, 0, 0, 1, 6, 1, 1, 6, 3, 5, 7, 0, 7,
       6, 6, 5, 6, 0, 7, 6, 3, 0, 2, 1, 1, 1, 3, 6, 4, 6, 3, 4, 8, 3, 8,
       8, 5, 4, 2, 0, 6, 0, 7, 8, 0, 7, 4, 7, 0, 5, 8, 5, 4, 9, 7, 7, 4,
       8, 5, 2, 9, 1, 4, 2, 0, 4, 7, 9, 2, 6, 6, 9, 1, 6, 6, 2, 7, 0, 5,
       8, 1, 2, 9, 8, 3, 3, 7, 5, 9, 7, 1, 7, 5, 5, 3, 5, 6, 6, 3, 2, 2,
       1, 4, 0, 7, 0, 9, 9, 7, 2, 8, 9, 7, 6, 5, 0, 7, 2, 8, 8, 4, 9, 1,
       2, 2, 9, 5, 5, 0, 9, 4, 1, 9, 4, 5, 5, 3, 4, 8, 8, 9, 1, 7, 5, 2,
       2, 8, 9, 8, 9, 0, 9, 7, 2, 4, 0, 2, 3, 0, 4, 1, 5, 8, 9, 6, 4, 4,
       2, 3, 1, 3, 2, 9, 0, 9, 6, 4, 4, 5, 4, 1, 8, 8, 4, 1, 0, 0, 1, 0,
       8, 8, 6, 7, 9, 0, 6, 1, 4, 9, 4, 5, 2, 6, 3, 3, 4, 9, 8, 4, 1, 1,
       7, 5, 5, 6, 4, 2, 5, 6, 3, 1, 4, 8, 1, 7, 9, 7, 4, 2, 5, 4, 8, 7,
       6, 7, 4, 0, 6, 1, 8, 2, 5, 3, 0, 3, 8, 5, 0, 8, 2, 5, 1, 8, 5, 2,
       2, 8, 7, 1, 9, 1, 9, 5, 1, 0, 7, 1, 3, 5, 4, 6, 1, 1, 6, 3, 5, 4,
       1, 6, 5, 2, 5, 0, 1, 1, 6, 2, 0, 8, 2, 5, 0, 3, 1, 4, 6, 2, 3, 4,
       2, 4, 8, 3, 0, 2, 9, 2, 1, 5, 3, 5, 1, 4, 9, 8, 4, 3, 7, 6, 1, 4,
       8, 1, 9, 0, 4, 3, 9, 4, 5, 7, 2, 1, 4, 5, 6, 9, 7, 1, 8, 8, 0, 4,
       8, 7, 7, 1, 8, 4, 5, 8, 2, 5, 4, 3, 7, 9, 3, 4, 9, 8, 7, 6, 0, 0,
       6, 8, 6, 7, 8, 2, 3, 7, 0, 2, 4, 7, 6, 2, 1, 9, 4, 3, 2, 1, 1, 9,
       2, 3, 9, 6, 1, 0, 8, 7, 2, 7, 1, 5, 5, 0, 8, 6, 1, 6, 4, 6, 7, 3,
       0, 8, 9, 3, 9, 1, 0, 9, 9, 9, 8, 8, 5, 7, 1, 2, 7, 1, 9, 8, 2, 9,
       2, 1, 7, 0, 4, 3, 5, 4, 1, 2, 9, 2, 5, 2, 9, 4, 0, 5, 9, 7, 1, 1,
       7, 3, 5, 2, 0, 1, 4, 8, 7, 9, 6, 9, 6, 4, 6, 8, 9, 5, 1, 9, 0, 2,
       4, 3, 8, 5, 4, 2, 6, 7, 5, 0, 7, 4, 8, 2, 1, 0, 6, 0, 4, 2, 2, 3,
       8, 9, 8, 1, 3, 6, 2, 0, 3, 3, 1, 1, 4, 6, 6, 3, 5, 9, 4, 8, 2, 5,
       1, 5, 1, 0, 1, 1, 1, 2, 4, 5, 9, 4, 8, 2, 2, 2, 9, 6, 9, 5, 7, 4,
       4, 6, 7, 8, 7, 7, 4, 7, 1, 2, 1, 7, 1, 6, 0, 6, 2, 5, 9, 7, 3, 7,
       9, 7, 0, 4, 8, 7, 5, 9, 6, 5, 6, 4, 6, 9, 6, 0, 4, 8, 7, 1, 1, 8,
       1, 5, 9, 6, 3, 7, 9, 4, 8, 6, 0, 2, 2, 1, 4, 4, 6, 7, 2, 8, 4, 6,
       4, 0, 1, 4, 7, 7, 8, 3, 6, 1, 3, 2, 0, 2, 5, 9, 0, 5, 7, 9, 7, 8,
       4, 6, 0, 7, 8, 8, 9, 0, 2, 6, 7, 0, 0, 6, 8, 9, 0, 2, 7, 7, 7, 6,
       7, 7, 6, 5, 3, 4, 3, 3, 3, 1, 7, 8, 5, 9, 8, 2, 1, 5, 2, 3, 0, 3,
       8, 4, 9, 3, 5, 9, 2, 0, 1, 8, 7, 0, 9, 4, 8, 5, 8, 7, 4, 2, 5, 3,
       0, 6, 6, 0, 5, 7, 4, 0, 4, 7, 3, 2, 6, 7, 4, 5, 7, 0, 2, 1, 9, 7,
       8, 1, 3, 4, 4, 8, 3, 5, 9, 2, 0, 1, 1, 9, 0, 1, 4, 0, 5, 4, 9, 4,
       5, 3, 7, 0, 6, 8, 3, 1, 4, 3, 4, 2, 1, 4, 1, 3, 9, 6, 3, 1, 7, 8,
       3, 7, 9, 0, 0, 9, 4, 6, 7, 6])

In [6]: import matplotlib.pyplot as plt

In [7]: f, ax = plt.subplots()

In [8]: ax.hist(c, bins=30)
Out[8]:
(array([32., 43., 36., 36., 35., 37., 25., 41., 30., 30., 30., 38., 27.,
        43., 31., 32., 27., 31., 33., 40., 23., 32., 32., 30., 34., 37.,
        38., 42., 29., 26.]),
 array([3.42839617e-04, 3.36153870e-02, 6.68879344e-02, 1.00160482e-01,
        1.33433029e-01, 1.66705576e-01, 1.99978124e-01, 2.33250671e-01,
        2.66523219e-01, 2.99795766e-01, 3.33068313e-01, 3.66340861e-01,
        3.99613408e-01, 4.32885955e-01, 4.66158503e-01, 4.99431050e-01,
        5.32703598e-01, 5.65976145e-01, 5.99248692e-01, 6.32521240e-01,
        6.65793787e-01, 6.99066334e-01, 7.32338882e-01, 7.65611429e-01,
        7.98883977e-01, 8.32156524e-01, 8.65429071e-01, 8.98701619e-01,
        9.31974166e-01, 9.65246713e-01, 9.98519261e-01]),
 <a list of 30 Patch objects>)

In [9]: ax.hist(c, bins=100)
Out[9]:
(array([11.,  8., 10., 10., 19.,  8., 12., 10.,  7., 16., 13., 10.,  8.,
         9.,  7., 15., 13., 10., 14.,  9.,  9.,  5., 11., 11.,  7., 15.,
        13.,  8.,  7., 10., 10.,  9.,  6., 10., 12., 10., 10.,  9.,  7.,
        15.,  9.,  7.,  8.,  9., 15., 12., 12., 11., 14.,  4., 11., 11.,
         6.,  9., 10.,  8.,  9.,  8., 10.,  8., 11., 13.,  5., 12., 13.,
        13.,  9.,  3., 10.,  7.,  9., 10., 10.,  8.,  9.,  9.,  9.,  6.,
        14., 10.,  8., 13.,  8., 13., 12., 12.,  7.,  8., 16., 12.,  9.,
        11., 12., 19.,  9.,  6., 10.,  4.,  5., 12.]),
 array([3.42839617e-04, 1.03246038e-02, 2.03063680e-02, 3.02881323e-02,
        4.02698965e-02, 5.02516607e-02, 6.02334249e-02, 7.02151891e-02,
        8.01969533e-02, 9.01787175e-02, 1.00160482e-01, 1.10142246e-01,
        1.20124010e-01, 1.30105774e-01, 1.40087539e-01, 1.50069303e-01,
        1.60051067e-01, 1.70032831e-01, 1.80014595e-01, 1.89996360e-01,
        1.99978124e-01, 2.09959888e-01, 2.19941652e-01, 2.29923416e-01,
        2.39905181e-01, 2.49886945e-01, 2.59868709e-01, 2.69850473e-01,
        2.79832238e-01, 2.89814002e-01, 2.99795766e-01, 3.09777530e-01,
        3.19759294e-01, 3.29741059e-01, 3.39722823e-01, 3.49704587e-01,
        3.59686351e-01, 3.69668115e-01, 3.79649880e-01, 3.89631644e-01,
        3.99613408e-01, 4.09595172e-01, 4.19576937e-01, 4.29558701e-01,
        4.39540465e-01, 4.49522229e-01, 4.59503993e-01, 4.69485758e-01,
        4.79467522e-01, 4.89449286e-01, 4.99431050e-01, 5.09412814e-01,
        5.19394579e-01, 5.29376343e-01, 5.39358107e-01, 5.49339871e-01,
        5.59321635e-01, 5.69303400e-01, 5.79285164e-01, 5.89266928e-01,
        5.99248692e-01, 6.09230457e-01, 6.19212221e-01, 6.29193985e-01,
        6.39175749e-01, 6.49157513e-01, 6.59139278e-01, 6.69121042e-01,
        6.79102806e-01, 6.89084570e-01, 6.99066334e-01, 7.09048099e-01,
        7.19029863e-01, 7.29011627e-01, 7.38993391e-01, 7.48975156e-01,
        7.58956920e-01, 7.68938684e-01, 7.78920448e-01, 7.88902212e-01,
        7.98883977e-01, 8.08865741e-01, 8.18847505e-01, 8.28829269e-01,
        8.38811033e-01, 8.48792798e-01, 8.58774562e-01, 8.68756326e-01,
        8.78738090e-01, 8.88719854e-01, 8.98701619e-01, 9.08683383e-01,
        9.18665147e-01, 9.28646911e-01, 9.38628676e-01, 9.48610440e-01,
        9.58592204e-01, 9.68573968e-01, 9.78555732e-01, 9.88537497e-01,
        9.98519261e-01]),
 <a list of 100 Patch objects>)

In [10]: ax.hist(c, bins=10)
Out[10]:
(array([111., 108.,  96.,  98., 101.,  90.,  96.,  94., 109.,  97.]),
 array([3.42839617e-04, 1.00160482e-01, 1.99978124e-01, 2.99795766e-01,
        3.99613408e-01, 4.99431050e-01, 5.99248692e-01, 6.99066334e-01,
        7.98883977e-01, 8.98701619e-01, 9.98519261e-01]),
 <a list of 10 Patch objects>)

In [11]: ax.hist(c, bins='auto')
Out[11]:
(array([ 95., 104.,  94.,  81.,  89.,  94.,  84.,  86.,  84.,  99.,  90.]),
 array([3.42839617e-04, 9.10861506e-02, 1.81829462e-01, 2.72572773e-01,
        3.63316084e-01, 4.54059395e-01, 5.44802706e-01, 6.35546017e-01,
        7.26289328e-01, 8.17032639e-01, 9.07775950e-01, 9.98519261e-01]),
 <a list of 11 Patch objects>)

In [12]: ax.hist?

In [13]: np.histogram?

In [14]: f, ax = plt.subplots()

In [15]: d
Out[15]:
array([3, 6, 5, 8, 2, 4, 7, 5, 5, 3, 1, 7, 2, 7, 5, 3, 6, 9, 8, 3, 5, 1,
       2, 9, 8, 7, 6, 9, 5, 5, 0, 7, 7, 1, 3, 0, 2, 2, 7, 7, 4, 1, 1, 4,
       9, 9, 8, 9, 8, 7, 4, 1, 3, 1, 9, 5, 4, 5, 2, 6, 0, 2, 5, 6, 2, 6,
       0, 3, 3, 0, 2, 8, 4, 3, 4, 3, 5, 6, 4, 4, 6, 8, 7, 1, 4, 1, 4, 5,
       3, 9, 9, 9, 8, 0, 4, 4, 2, 4, 0, 1, 8, 8, 8, 3, 4, 1, 7, 1, 4, 3,
       6, 9, 1, 3, 0, 1, 0, 1, 8, 1, 2, 1, 3, 9, 1, 6, 3, 0, 5, 3, 3, 6,
       1, 7, 8, 8, 3, 4, 6, 2, 5, 2, 7, 4, 8, 5, 4, 6, 9, 4, 4, 0, 2, 0,
       3, 1, 1, 1, 3, 0, 4, 0, 0, 2, 1, 2, 6, 5, 7, 7, 8, 7, 6, 2, 4, 6,
       3, 8, 9, 6, 0, 2, 5, 3, 2, 0, 8, 1, 3, 5, 4, 5, 5, 3, 9, 8, 8, 5,
       2, 4, 5, 9, 5, 6, 1, 7, 6, 2, 4, 3, 1, 0, 1, 9, 2, 4, 6, 5, 3, 4,
       2, 0, 6, 4, 3, 6, 0, 4, 6, 2, 0, 0, 1, 6, 1, 1, 6, 3, 5, 7, 0, 7,
       6, 6, 5, 6, 0, 7, 6, 3, 0, 2, 1, 1, 1, 3, 6, 4, 6, 3, 4, 8, 3, 8,
       8, 5, 4, 2, 0, 6, 0, 7, 8, 0, 7, 4, 7, 0, 5, 8, 5, 4, 9, 7, 7, 4,
       8, 5, 2, 9, 1, 4, 2, 0, 4, 7, 9, 2, 6, 6, 9, 1, 6, 6, 2, 7, 0, 5,
       8, 1, 2, 9, 8, 3, 3, 7, 5, 9, 7, 1, 7, 5, 5, 3, 5, 6, 6, 3, 2, 2,
       1, 4, 0, 7, 0, 9, 9, 7, 2, 8, 9, 7, 6, 5, 0, 7, 2, 8, 8, 4, 9, 1,
       2, 2, 9, 5, 5, 0, 9, 4, 1, 9, 4, 5, 5, 3, 4, 8, 8, 9, 1, 7, 5, 2,
       2, 8, 9, 8, 9, 0, 9, 7, 2, 4, 0, 2, 3, 0, 4, 1, 5, 8, 9, 6, 4, 4,
       2, 3, 1, 3, 2, 9, 0, 9, 6, 4, 4, 5, 4, 1, 8, 8, 4, 1, 0, 0, 1, 0,
       8, 8, 6, 7, 9, 0, 6, 1, 4, 9, 4, 5, 2, 6, 3, 3, 4, 9, 8, 4, 1, 1,
       7, 5, 5, 6, 4, 2, 5, 6, 3, 1, 4, 8, 1, 7, 9, 7, 4, 2, 5, 4, 8, 7,
       6, 7, 4, 0, 6, 1, 8, 2, 5, 3, 0, 3, 8, 5, 0, 8, 2, 5, 1, 8, 5, 2,
       2, 8, 7, 1, 9, 1, 9, 5, 1, 0, 7, 1, 3, 5, 4, 6, 1, 1, 6, 3, 5, 4,
       1, 6, 5, 2, 5, 0, 1, 1, 6, 2, 0, 8, 2, 5, 0, 3, 1, 4, 6, 2, 3, 4,
       2, 4, 8, 3, 0, 2, 9, 2, 1, 5, 3, 5, 1, 4, 9, 8, 4, 3, 7, 6, 1, 4,
       8, 1, 9, 0, 4, 3, 9, 4, 5, 7, 2, 1, 4, 5, 6, 9, 7, 1, 8, 8, 0, 4,
       8, 7, 7, 1, 8, 4, 5, 8, 2, 5, 4, 3, 7, 9, 3, 4, 9, 8, 7, 6, 0, 0,
       6, 8, 6, 7, 8, 2, 3, 7, 0, 2, 4, 7, 6, 2, 1, 9, 4, 3, 2, 1, 1, 9,
       2, 3, 9, 6, 1, 0, 8, 7, 2, 7, 1, 5, 5, 0, 8, 6, 1, 6, 4, 6, 7, 3,
       0, 8, 9, 3, 9, 1, 0, 9, 9, 9, 8, 8, 5, 7, 1, 2, 7, 1, 9, 8, 2, 9,
       2, 1, 7, 0, 4, 3, 5, 4, 1, 2, 9, 2, 5, 2, 9, 4, 0, 5, 9, 7, 1, 1,
       7, 3, 5, 2, 0, 1, 4, 8, 7, 9, 6, 9, 6, 4, 6, 8, 9, 5, 1, 9, 0, 2,
       4, 3, 8, 5, 4, 2, 6, 7, 5, 0, 7, 4, 8, 2, 1, 0, 6, 0, 4, 2, 2, 3,
       8, 9, 8, 1, 3, 6, 2, 0, 3, 3, 1, 1, 4, 6, 6, 3, 5, 9, 4, 8, 2, 5,
       1, 5, 1, 0, 1, 1, 1, 2, 4, 5, 9, 4, 8, 2, 2, 2, 9, 6, 9, 5, 7, 4,
       4, 6, 7, 8, 7, 7, 4, 7, 1, 2, 1, 7, 1, 6, 0, 6, 2, 5, 9, 7, 3, 7,
       9, 7, 0, 4, 8, 7, 5, 9, 6, 5, 6, 4, 6, 9, 6, 0, 4, 8, 7, 1, 1, 8,
       1, 5, 9, 6, 3, 7, 9, 4, 8, 6, 0, 2, 2, 1, 4, 4, 6, 7, 2, 8, 4, 6,
       4, 0, 1, 4, 7, 7, 8, 3, 6, 1, 3, 2, 0, 2, 5, 9, 0, 5, 7, 9, 7, 8,
       4, 6, 0, 7, 8, 8, 9, 0, 2, 6, 7, 0, 0, 6, 8, 9, 0, 2, 7, 7, 7, 6,
       7, 7, 6, 5, 3, 4, 3, 3, 3, 1, 7, 8, 5, 9, 8, 2, 1, 5, 2, 3, 0, 3,
       8, 4, 9, 3, 5, 9, 2, 0, 1, 8, 7, 0, 9, 4, 8, 5, 8, 7, 4, 2, 5, 3,
       0, 6, 6, 0, 5, 7, 4, 0, 4, 7, 3, 2, 6, 7, 4, 5, 7, 0, 2, 1, 9, 7,
       8, 1, 3, 4, 4, 8, 3, 5, 9, 2, 0, 1, 1, 9, 0, 1, 4, 0, 5, 4, 9, 4,
       5, 3, 7, 0, 6, 8, 3, 1, 4, 3, 4, 2, 1, 4, 1, 3, 9, 6, 3, 1, 7, 8,
       3, 7, 9, 0, 0, 9, 4, 6, 7, 6])

In [16]: edges = np.arange(0, 10+1, 1)

In [17]: edges
Out[17]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])

In [18]: ax.hist(d, bins=edges)
Out[18]:
(array([ 94., 115., 100.,  90., 120.,  96.,  96., 101.,  95.,  93.]),
 array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),
 <a list of 10 Patch objects>)

In [19]: edges2 = np.arange(0, 10+0.5, 0.5)

In [20]: ax.hist(d, bins=edges2)
Out[20]:
(array([ 94.,   0., 115.,   0., 100.,   0.,  90.,   0., 120.,   0.,  96.,
          0.,  96.,   0., 101.,   0.,  95.,   0.,  93.,   0.]),
 array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5,  5. ,
         5.5,  6. ,  6.5,  7. ,  7.5,  8. ,  8.5,  9. ,  9.5, 10. ]),
 <a list of 20 Patch objects>)

In [21]: mu, sigma = 0, 1

In [22]: s = np.random.normal(loc=mu, scale=sigma, size=1000)

In [23]: s.shape
Out[23]: (1000,)

In [24]: s
Out[24]:
array([ 1.32063592e-01, -2.17557749e+00,  8.74541766e-01, -2.99258046e+00,
        5.75983602e-01, -2.34673926e+00,  3.22668469e-02, -7.63566174e-01,
        1.23149934e+00, -1.76391790e+00, -3.49285897e+00,  1.51978892e+00,
        1.36332285e+00,  1.33873249e+00,  1.38905853e+00, -2.06537552e-01,
        1.30410613e+00,  3.53518971e-03,  1.99400414e+00,  5.20568784e-01,
       -1.90223240e+00, -1.18317657e+00, -1.07920235e+00, -8.10093506e-01,
       -6.62787735e-01, -7.52866046e-01,  2.36897399e-01, -1.19727187e+00,
       -4.19734869e-01,  1.18400240e-01, -4.58301306e-01, -1.16124505e+00,
        6.65443023e-01, -1.82443907e+00,  9.44269515e-02,  2.05343195e+00,
        2.85555157e-01, -3.47041887e-01,  9.31134187e-01, -7.37829545e-02,
       -9.09941448e-01, -3.83881660e-01, -4.24773107e-02,  8.28496710e-01,
        6.83675827e-01,  4.71370055e-01, -4.68348486e-01,  6.66551903e-01,
       -1.70469567e-01,  2.20034294e+00,  2.04027157e+00, -1.13907424e+00,
       -1.75785655e+00, -1.36913244e+00,  5.15943241e-01, -5.51481490e-01,
        5.56282027e-01, -6.88446307e-01, -1.78633031e-01, -6.99046397e-01,
       -9.47403567e-01, -2.36510527e+00, -1.49973512e+00,  1.68911687e+00,
       -8.94454696e-01,  5.73776107e-01, -2.59667308e-01,  1.62712993e+00,
       -4.70551405e-01,  7.54822371e-02, -1.30101559e+00, -1.10238149e+00,
       -1.19191581e+00, -4.36823031e-01, -1.94494418e+00, -1.44775614e+00,
       -1.07724219e+00,  1.23923067e+00, -7.74532404e-01, -4.23509029e-01,
        5.86817371e-01,  1.15431694e+00, -4.32473073e-01, -1.84790285e+00,
       -1.01018776e+00,  4.68850821e-01,  3.82014078e-01,  6.98720982e-01,
        7.97574207e-01, -2.01066593e+00, -5.56368426e-01,  1.37520161e+00,
        7.37007358e-01, -1.38285457e+00, -8.04878730e-01, -2.82698084e-01,
        9.02391049e-01,  2.54572559e-01,  3.21652509e-01,  6.14242036e-01,
        9.87942969e-01, -6.45092691e-02,  1.24325705e+00, -1.16295567e-01,
       -7.23677602e-01, -7.19721870e-01,  1.03382949e+00, -1.61486714e+00,
       -3.30921673e-01, -5.03581426e-01, -3.33521910e-01, -9.10523807e-01,
       -4.94725453e-01, -1.29155478e-02, -1.68508972e-01, -2.43325068e-01,
       -9.00649421e-01, -3.00726557e-01, -3.70746200e-03,  3.15634726e-01,
        3.91376683e-01, -1.27667607e+00,  1.55700032e+00, -7.29221892e-01,
       -6.01493269e-01, -1.51496830e+00, -1.73022937e-01,  8.96355125e-01,
       -1.30236651e-01,  3.34324818e-01,  6.10034470e-01,  6.15692370e-01,
        1.09149072e+00,  4.49316238e-01, -7.87559327e-01, -9.32873175e-01,
       -8.59506650e-02,  1.11875702e+00,  3.93554688e-01,  3.47756854e-01,
        6.38392818e-02, -3.56399059e+00, -8.20406830e-01, -2.51052682e-01,
       -1.89111440e-01, -6.02758931e-01,  7.85132973e-01, -1.96102061e-01,
        1.65264225e+00,  1.24940997e+00,  9.04571552e-01,  6.79252100e-03,
        1.28514364e+00, -2.27583053e-01, -1.05319341e+00,  2.75362252e-01,
        2.49373835e-02, -1.21135864e+00,  9.75592258e-01, -8.69485712e-01,
       -6.25278418e-01, -1.05040668e+00, -1.20364594e-01, -1.27946597e-01,
        2.20457236e-01,  1.56615397e+00,  8.98689342e-01, -1.09073714e+00,
        1.08797911e+00, -1.95456709e-01, -3.62594919e-01, -2.38839006e-01,
       -1.15733279e+00,  7.46163459e-01,  2.04332018e+00, -2.56307208e+00,
       -8.20400416e-01,  1.83607056e+00,  1.47347698e-01, -7.00965371e-01,
       -1.16600626e+00,  2.47708927e+00,  3.45867294e-01,  1.06948496e+00,
       -8.58990959e-01, -1.88999028e-01, -8.33553741e-01, -2.48769382e-01,
       -3.54557353e-01,  7.88812234e-01,  1.61702453e+00, -6.82987947e-02,
       -7.07531697e-01,  5.36864358e-01,  6.96984396e-01, -1.37684504e+00,
       -5.65294878e-01, -6.61638751e-01,  4.48986186e-01,  4.07266469e-01,
        2.69174197e-01, -5.11513072e-03,  9.72691988e-01,  7.78889854e-01,
       -4.79345880e-01, -6.23060359e-01,  1.65887483e+00,  3.20974071e-01,
       -9.02615728e-02,  1.83825340e+00, -5.65565423e-01,  4.64844376e-01,
       -8.51378096e-01,  6.92165250e-01,  2.24624968e+00,  6.23744563e-01,
       -1.31720535e-01,  1.02571292e+00, -1.20370725e+00,  8.30601210e-01,
       -6.06964549e-01,  1.65552603e-01, -1.51935868e+00,  1.13659912e+00,
       -1.37671775e+00, -8.24338038e-01,  1.35099982e-01,  3.52331134e-01,
       -6.09797818e-01,  1.24059422e+00,  6.04960658e-01, -1.07600717e+00,
        1.00728231e+00, -7.85091794e-01,  3.66137899e-01,  7.71590231e-01,
       -1.12180624e+00, -3.92339856e-01,  1.06684770e+00,  1.15026942e+00,
       -1.88217591e-01,  3.82657424e-01,  5.34587191e-01, -8.33693152e-03,
       -1.25392658e+00, -8.88790599e-01,  9.55340116e-01,  9.14340614e-02,
        9.71811513e-01,  5.72997031e-01, -4.38256720e-01, -5.18006705e-01,
       -1.33341666e+00,  1.61225060e+00, -9.25395867e-02,  2.57385400e-01,
        1.27614033e+00, -1.62434384e+00, -3.99930998e-01, -1.54191372e+00,
        1.55883509e+00,  8.63073312e-02,  1.49452895e-01,  1.45442443e+00,
        7.95916756e-01,  2.05219689e-01,  2.96343686e-01,  3.15613574e-01,
        1.01950040e+00, -7.58188121e-01, -2.43667668e-01, -1.17946338e+00,
       -1.32223585e+00, -1.09656992e+00, -3.14241488e-01,  2.43225187e+00,
       -9.19451629e-01, -1.13647652e+00, -3.27983938e-01,  9.05383057e-01,
        1.80094722e+00, -1.44751646e+00,  2.71709134e-02, -4.85840860e-01,
        1.57307619e+00, -6.03067158e-01,  4.27776780e-01, -7.63035247e-01,
       -1.65518681e+00,  1.13958563e+00, -1.76487036e-01, -1.60411037e+00,
       -5.09061401e-01, -1.47888971e-01,  2.01560444e+00,  9.58131992e-01,
       -6.24137757e-01,  7.81420158e-01,  1.45580269e+00,  3.50611415e-01,
        2.12459968e-01, -8.85278435e-01,  1.48759364e+00,  9.20065287e-01,
       -9.02153709e-01,  5.82559070e-01,  6.21575827e-01,  2.09380741e+00,
       -1.22404504e+00,  9.72183209e-01, -1.03343210e+00,  1.36707331e-01,
        4.41101205e-02, -1.39920899e+00,  5.55145434e-01, -1.11050198e+00,
        6.36444374e-02, -9.49091408e-01,  4.35344369e-01,  1.16220092e+00,
       -6.02319963e-01, -9.38919713e-01, -2.95494456e-01, -9.68002165e-01,
        5.64576466e-01, -9.38667243e-01,  5.43834546e-01,  2.65447112e-01,
       -1.43397749e+00, -3.08274293e-01,  1.03628496e+00,  5.87150082e-01,
        1.34217667e+00,  8.99730267e-01, -1.57636578e+00,  4.66023593e-01,
        2.76570622e-01, -7.20820720e-02,  3.09395238e-01, -4.46476285e-01,
        9.93302950e-01,  4.18470645e-01,  8.10296581e-01, -5.73474598e-01,
        1.07534674e+00, -9.80541657e-01, -1.04550277e+00, -2.28097932e+00,
       -4.43737151e-01, -7.04068796e-01, -7.20717641e-01, -4.47335468e-01,
       -3.12607769e-01, -1.30564758e-01,  7.30731522e-01,  2.61625372e-01,
       -1.52778959e+00,  5.68205133e-02, -5.49451083e-01,  6.30015638e-01,
       -3.74490344e-01, -6.37599007e-01,  5.15765748e-01, -1.52260162e+00,
       -1.11103452e-01,  3.81994627e-01,  5.66266979e-01, -1.20969995e+00,
       -4.38945427e-01,  9.19468448e-01, -3.40844815e-01,  2.15470171e-01,
        5.11037012e-01,  1.20124109e+00,  5.66945824e-01,  7.96326745e-01,
       -9.68624207e-01,  2.52632134e-01, -1.04726343e+00,  7.87760849e-02,
       -6.87283644e-01, -1.21419677e+00, -4.79539765e-01, -1.20129361e+00,
        8.87316155e-01, -8.26001053e-01, -9.96249843e-01, -1.24981499e+00,
       -4.69223441e-01,  7.74000231e-01,  9.13396285e-01,  2.06344193e+00,
       -1.39809904e-01, -8.99979143e-01, -1.50022054e-01, -9.77589201e-01,
       -5.10036110e-01, -1.03958880e-01,  6.20004600e-01, -1.80438304e+00,
        1.31199172e+00,  2.43494283e-01, -1.51725979e+00, -1.33039088e+00,
        7.42730727e-02, -1.09229341e-01, -1.35048586e+00,  1.18379833e+00,
        1.00019870e+00,  1.16703069e+00,  1.57564489e+00, -4.83524961e-01,
        1.10063174e-01,  1.35938755e+00,  1.38121558e+00, -7.55761662e-02,
       -5.92232234e-01, -7.83680546e-01, -1.02619861e+00, -1.49555706e+00,
        4.33791245e-01,  8.02232600e-01,  5.46945801e-01, -3.35835378e-01,
        6.64226432e-01,  1.25727485e+00, -9.35699993e-01, -1.56152275e-01,
        1.16874640e+00, -2.98766776e-01, -1.24055282e+00, -1.60547353e+00,
       -6.28232858e-02, -1.86480353e+00, -6.65271597e-01,  2.56977137e-01,
        3.44410828e-01, -2.17413675e-01,  1.09358458e+00, -1.74837059e+00,
        3.74285610e-01,  4.95705022e-02,  1.18431936e+00, -1.31147584e-01,
       -2.05285029e+00, -1.24234103e-01,  1.01700602e-01,  5.07828562e-01,
        6.29157872e-01, -1.65925971e-01,  1.32110902e-01, -6.05093740e-01,
        1.92750173e-01,  4.14047413e-03,  1.05400796e+00,  1.05179248e+00,
        3.77444180e-01,  2.38429382e-01, -3.45176078e-01,  7.70182615e-01,
        1.40942562e+00, -2.41374847e+00,  7.39340399e-01,  1.71005444e+00,
        1.25681854e+00,  5.27901280e-01, -1.10452073e-01,  7.41353285e-01,
       -4.56162392e-02,  2.78993302e-01,  1.22765098e+00,  5.71881178e-01,
        3.13841902e-01, -1.42561681e+00, -8.40426284e-01, -1.00455066e+00,
        1.17760865e+00,  1.01950339e-01, -1.06539715e-01,  5.49971516e-01,
       -6.90426789e-02,  1.22346741e-01, -8.16218517e-01, -3.43615689e-01,
       -3.63706845e-01, -1.34168121e+00, -3.52097015e-01, -5.20172188e-01,
        5.35696859e-01, -3.66875842e-01, -3.10279974e-01,  1.49572190e+00,
        1.08999639e+00, -9.53219792e-01, -2.79517442e-01, -3.43475699e-01,
       -9.92022474e-02,  4.35062468e-01,  1.42469232e+00, -6.65848949e-02,
       -1.82176564e-01, -2.16302589e-01,  6.29943079e-01,  6.55519005e-01,
       -7.63164062e-01, -1.30553111e+00, -8.28163468e-01,  1.20680758e+00,
        5.72242568e-01,  1.23333562e+00,  3.93890147e-01,  2.56074966e+00,
        7.91505746e-01, -3.21680340e-02,  1.17979128e+00, -4.12061883e-01,
       -1.19152346e+00,  6.67766164e-01, -2.12048263e-01, -7.40843634e-01,
        1.08817516e+00, -1.28969651e+00,  2.61773877e-01, -6.48131645e-01,
        4.58723955e-01, -5.71052504e-01, -1.68512605e-01, -9.23713050e-01,
        9.83796085e-01, -1.01801071e+00,  5.49127886e-01, -5.50103130e-01,
        1.30983765e+00, -1.41895870e+00,  2.13557961e+00,  1.14590975e+00,
        8.80219720e-02, -1.21821866e+00,  1.72722503e+00, -1.05357424e+00,
       -1.02571253e+00, -1.17583418e+00,  1.40818862e+00, -1.57477441e+00,
        3.35538327e-01, -7.94217886e-01,  1.83286756e+00, -8.89911060e-02,
       -1.35317227e+00,  5.88285655e-02,  9.03879386e-01, -1.79331570e+00,
       -2.88092483e-01,  2.22068003e-01,  3.58076673e-01, -1.73432633e-01,
       -4.12621936e-01,  5.55805524e-01, -5.30709526e-01, -7.61110555e-02,
       -1.46404644e+00, -4.91217366e-01, -1.01749789e-01,  2.15366064e-01,
        6.07603169e-01, -1.27690887e+00,  1.04395466e+00, -4.97351665e-01,
       -2.21600817e+00, -8.85093229e-02,  1.77136583e+00,  1.02015922e-01,
       -5.46537509e-01, -9.10455500e-02,  2.19831642e-01, -6.10354009e-01,
       -9.37215923e-01,  8.28005367e-01, -1.24288639e+00,  5.94860865e-01,
        3.66313783e-02,  1.36161674e+00,  6.85385919e-01, -7.77294154e-01,
       -1.24235979e+00,  7.41762599e-01, -1.35231710e+00, -6.83913211e-01,
       -8.21183653e-01,  7.29934846e-01,  5.60489285e-01,  2.10840063e-01,
        5.60724966e-01,  1.47096747e+00, -1.58260305e+00,  1.23616839e+00,
       -9.30147088e-01,  6.44855798e-01, -1.08369035e+00,  7.76182638e-01,
       -4.36628610e-01, -3.82311914e-01,  1.93944892e-01,  9.40147265e-02,
        1.40441828e+00,  1.50288717e+00, -2.07252821e-01,  5.62077435e-01,
        1.21302589e+00, -8.98433160e-02,  9.66291338e-01, -9.61093443e-01,
       -8.71509356e-01,  4.61979559e-01, -1.58904650e-01, -2.62649335e+00,
       -8.99166208e-02,  1.52265593e-01, -1.10946504e+00,  1.68398125e+00,
        7.76537057e-01, -8.01703488e-01,  2.74333056e-01, -2.34501152e+00,
        1.69030148e-01,  1.60427986e-01, -1.13814162e+00,  2.69796513e-01,
        1.27740505e+00, -1.66900049e-02,  5.51626802e-01,  3.96823749e-01,
        2.82737264e-01,  1.59245146e+00, -1.22137245e+00,  1.42349536e+00,
       -2.49730277e-01, -8.48634316e-01,  7.87101171e-01,  1.41696309e-01,
        1.11808491e+00, -3.61234227e-01,  4.41533262e-01, -6.64894562e-01,
        9.50160860e-02, -6.70640611e-01,  3.91889504e-01,  1.77438216e-01,
        1.05081766e+00, -3.93671340e-01, -4.88252735e-01,  5.75896224e-01,
       -7.89038240e-01,  1.66677824e-01, -2.61759234e+00, -4.99601750e-02,
        1.06922556e+00,  1.83581527e-01,  6.55408874e-01,  1.57145859e+00,
        1.44108780e+00, -2.64702120e-01,  5.80023927e-01,  8.66653283e-01,
       -1.07531488e-01, -2.85614354e-01, -8.82804352e-01,  1.43695915e+00,
        3.31338063e-01,  2.14552311e+00,  1.03741768e-01,  2.69179901e-03,
       -1.94985423e+00, -8.16204183e-02,  9.88380522e-01,  8.33056221e-01,
       -3.18170189e-02,  1.08084517e+00,  1.34043087e+00, -7.11177309e-01,
       -4.97935494e-01,  2.41909484e-01, -7.67253383e-01, -1.83066733e+00,
       -6.22221150e-02, -8.55597536e-01, -5.56503037e-01, -7.50069061e-01,
        1.94037450e-01,  1.50857236e-01, -2.13887972e-01, -3.75984689e-01,
        1.91804181e+00, -8.45623748e-02, -9.19767098e-01,  6.55792275e-02,
        4.96304956e-01,  1.83833268e+00, -8.74133678e-02,  1.51691259e-01,
        8.10114584e-01,  1.21728722e+00, -1.00872585e+00, -6.48610395e-01,
        1.37995392e+00,  8.10573734e-01,  1.33518527e+00, -5.47573955e-01,
       -6.03040025e-01,  1.61753819e+00,  1.16013077e+00, -1.04882724e-01,
       -1.73989588e+00, -5.17989438e-01,  6.78178775e-01,  2.11264983e+00,
        2.20672378e-02, -1.46678583e+00, -1.88968587e+00, -1.86538477e-01,
       -2.35718794e-01, -5.25904059e-02, -1.82534199e-01, -3.54644330e-01,
        5.88377187e-01,  6.72484549e-01,  1.40746519e+00, -7.41320231e-01,
       -1.12614314e+00,  8.84431273e-01, -1.55158321e+00,  2.78789093e-01,
        3.86130640e-01,  2.44856666e-01, -4.62968184e-01,  1.29519728e+00,
        2.29280754e-01,  1.01862222e+00,  2.09883917e-01,  1.61101870e+00,
       -3.91716717e-01,  2.21393617e+00, -6.01190411e-01, -1.33090459e+00,
       -3.99277235e-01, -5.03941201e-01, -9.89902159e-01,  2.54223166e-01,
        4.07304612e-01, -9.99920597e-01,  8.59918090e-01,  7.83452470e-01,
       -5.04232686e-02,  1.22314317e+00,  2.90278346e-01, -5.45597101e-01,
        7.77333858e-01,  1.06028741e-01,  1.03583658e-01, -5.35787186e-01,
        2.83158064e-01,  1.49597610e+00,  8.36552555e-01, -2.94630989e-01,
       -1.59276770e+00,  2.05668920e-01,  6.00215164e-01,  9.75829075e-01,
        9.20675595e-01,  1.88507307e+00,  5.49854062e-01, -2.89425666e+00,
       -1.15540180e+00, -7.36695667e-01,  1.46525003e+00, -3.46789177e-01,
       -1.28185307e+00, -1.39687205e+00,  6.26274626e-02, -2.05627063e-01,
        5.96308882e-01, -5.45318886e-01, -1.02841026e+00,  1.25202886e+00,
        5.50049742e-01,  8.30885948e-01,  1.16027548e-02,  1.91186251e-01,
       -3.36629025e-01,  1.92350207e+00, -9.24063268e-01,  4.17624532e-01,
       -7.90805285e-01, -6.76721644e-01,  1.33479005e+00,  1.09032393e+00,
        8.36130336e-01,  1.00271788e+00, -2.89187552e-01,  1.18704795e+00,
        5.68137916e-01,  6.61980661e-01, -1.34394643e+00, -6.54562002e-01,
       -5.37140765e-01, -3.05804393e-01,  1.23930964e+00,  6.85544717e-02,
        5.75696019e-01, -1.37144579e+00,  5.24149447e-01,  7.90486659e-01,
       -1.11004428e+00,  6.98165461e-01, -1.01788917e+00,  1.37016462e+00,
       -1.67356591e+00, -3.79951054e-01, -5.71961360e-01, -8.74603141e-01,
        2.16831216e-01, -1.15344804e+00, -2.62073577e-01, -1.27729514e+00,
        9.06675364e-01,  2.67745826e-01,  9.66569951e-01,  3.18905985e-02,
       -3.33367151e-01,  7.75057236e-01, -5.67990208e-01,  1.71352796e-01,
        1.46255594e+00, -1.20063719e+00,  5.17604851e-01, -9.89667404e-01,
       -8.17060192e-02,  8.23264849e-02, -1.24267420e+00,  7.56653418e-01,
       -8.80481977e-01,  4.99613056e-01,  1.96541207e-02, -4.04275041e-01,
        2.99011658e-01, -1.39745927e+00, -5.66722372e-01,  3.13932293e-01,
       -1.76846305e-01,  9.66502259e-01, -5.94217180e-01,  1.44368979e-01,
        2.25178423e+00,  4.99328902e-01, -9.50338487e-01,  2.07496580e-01,
       -4.27555263e-02, -2.75951666e-01,  1.62820712e+00, -1.38822020e-03,
        1.06490156e-01,  3.76608440e-01, -3.42174819e-01, -1.23376911e-01,
       -4.40181600e-01, -5.41955491e-01, -8.10061719e-01, -2.19986119e-01,
       -5.80388889e-01,  2.00393150e-01, -8.22134954e-01, -2.99448467e+00,
       -1.78528244e+00,  3.94883854e-01,  8.98230760e-01, -9.93967414e-02,
        3.18596337e-01,  3.01333633e+00,  1.12072701e+00,  1.77530169e+00,
        1.81283590e-01, -1.67898368e+00,  1.31123730e+00,  4.32126063e-01,
        2.24340166e+00, -3.39285332e-01,  1.33112261e+00,  1.63487919e+00,
        2.38383371e+00, -1.21009312e+00,  7.03816137e-01, -1.24824792e+00,
        5.67329757e-01,  1.05595308e-01, -1.53070606e+00, -4.61931134e-01,
        1.45352512e+00,  7.18774619e-02,  4.75210021e-01, -1.01841242e+00,
       -3.85913762e-02, -2.49461264e-01,  1.47271340e+00, -3.72308077e-01,
       -2.55435823e-01, -7.30791613e-01, -8.07185963e-01, -5.38546859e-01,
       -6.49362532e-01,  7.71554029e-01, -3.01774977e-01, -2.29551132e-01,
       -1.96350377e-01,  3.16158719e+00, -1.59359101e+00,  1.45066130e-01,
        5.09589659e-01,  1.48470195e+00,  5.22620796e-01, -1.04149000e-01,
        1.76962434e-01, -1.26325277e+00, -5.22649136e-01,  1.11682325e+00,
        4.97087585e-01,  7.24655509e-01,  7.45094005e-01, -7.17057937e-01,
        1.63815338e+00, -1.31301547e+00,  3.63039828e-01, -5.53115373e-01,
        7.46697260e-01, -2.91326477e-02,  1.74838457e+00, -1.60298531e+00,
       -6.46798436e-01, -5.35772622e-01,  6.35284584e-01,  6.00737526e-01,
       -7.77053358e-01, -1.25691287e+00, -1.44213505e-01, -8.00044213e-01,
       -2.64218919e-01, -3.23592671e-02,  1.86889051e+00, -6.63609506e-01,
        7.27001819e-01, -1.18601536e-01,  4.86716014e-01, -5.94800673e-01,
       -1.06156583e+00,  3.49959532e-01, -6.39130682e-02,  1.10540046e+00,
       -1.86632916e+00,  6.21619546e-01,  1.15186326e+00, -8.45335053e-02,
        2.98443995e-01, -1.01157647e+00, -2.18712190e-01, -5.78702781e-01,
       -4.98501978e-02, -5.21090115e-01,  2.28611670e-01,  4.96126026e-01,
        4.23576446e-01,  3.67511638e-01,  1.49402368e-01,  3.90072700e-02,
        1.04750053e+00, -8.30516180e-01,  7.29926581e-01,  4.72300419e-01,
        2.96113783e-01,  1.63677447e-01,  3.12669092e-02,  7.96269441e-02,
        1.94945042e-01, -1.41007788e+00,  2.47318060e-01, -6.48385985e-01,
        6.19095340e-02, -9.63980253e-01,  1.22649688e+00, -3.84385296e-01,
       -1.97586855e-01, -3.77635127e-01, -4.53549390e-01, -3.99691084e-01,
       -5.68522386e-01,  1.05586753e+00, -1.16339196e+00, -9.03168150e-01,
       -3.88640174e-01, -1.32428017e-01, -1.14564726e+00, -1.67958534e+00])

In [25]: def cf():
    ...:     plt.close('all')
    ...:

In [26]: cf()

In [27]: f, ax = plt.subplots()

In [28]: ax.hist(s, bins=30)
Out[28]:
(array([ 2.,  0.,  3.,  0.,  3.,  5.,  4., 12., 19., 34., 49., 59., 64.,
        82., 81., 96., 88., 77., 82., 63., 49., 48., 32., 19., 11., 12.,
         3.,  1.,  0.,  2.]),
 array([-3.56399059, -3.33980466, -3.11561873, -2.89143281, -2.66724688,
        -2.44306096, -2.21887503, -1.99468911, -1.77050318, -1.54631725,
        -1.32213133, -1.0979454 , -0.87375948, -0.64957355, -0.42538763,
        -0.2012017 ,  0.02298423,  0.24717015,  0.47135608,  0.695542  ,
         0.91972793,  1.14391386,  1.36809978,  1.59228571,  1.81647163,
         2.04065756,  2.26484348,  2.48902941,  2.71321534,  2.93740126,
         3.16158719]),
 <a list of 30 Patch objects>)

In [29]: s1 = np.random.normal(loc=0, scale=1, size=1000)

In [30]: s2 = np.random.normal(loc=5, scale=0.5, size=1000)

In [31]: s1.mean()
Out[31]: 0.001537341112703352

In [32]: s1.std()
Out[32]: 0.9937635998626866

In [33]: s2.mean()
Out[33]: 5.005653011839096

In [34]: s2.std()
Out[34]: 0.48316548607513643

In [35]: bimodal = np.concatenate([s1, s2])

In [36]: bimodal.shape
Out[36]: (2000,)

In [37]: bimodal
Out[37]:
array([ 0.66936769, -0.36958945,  1.38237285, ...,  5.7581667 ,
        4.11126344,  4.84080807])

In [38]: f, ax = plt.subplots()

In [39]: ax.hist(bimodal, bins=35)
Out[39]:
(array([  1.,   2.,   7.,   9.,  17.,  29.,  45.,  55.,  77.,  89.,  98.,
        112., 116., 105.,  86.,  52.,  47.,  23.,  13.,  10.,   2.,   4.,
          1.,   0.,   6.,  23.,  63., 138., 202., 217., 186., 109.,  40.,
         13.,   3.]),
 array([-3.21696766, -2.93646946, -2.65597126, -2.37547306, -2.09497486,
        -1.81447667, -1.53397847, -1.25348027, -0.97298207, -0.69248387,
        -0.41198567, -0.13148748,  0.14901072,  0.42950892,  0.71000712,
         0.99050532,  1.27100352,  1.55150171,  1.83199991,  2.11249811,
         2.39299631,  2.67349451,  2.95399271,  3.2344909 ,  3.5149891 ,
         3.7954873 ,  4.0759855 ,  4.3564837 ,  4.6369819 ,  4.91748009,
         5.19797829,  5.47847649,  5.75897469,  6.03947289,  6.31997108,
         6.60046928]),
 <a list of 35 Patch objects>)

In [40]: bimodal.mean()
Out[40]: 2.5035951764758995

In [41]: bimodal.std()
Out[41]: 2.621221261392387

In [42]: np.histogram(bimodal, bins=35)
Out[42]:
(array([  1,   2,   7,   9,  17,  29,  45,  55,  77,  89,  98, 112, 116,
        105,  86,  52,  47,  23,  13,  10,   2,   4,   1,   0,   6,  23,
         63, 138, 202, 217, 186, 109,  40,  13,   3]),
 array([-3.21696766, -2.93646946, -2.65597126, -2.37547306, -2.09497486,
        -1.81447667, -1.53397847, -1.25348027, -0.97298207, -0.69248387,
        -0.41198567, -0.13148748,  0.14901072,  0.42950892,  0.71000712,
         0.99050532,  1.27100352,  1.55150171,  1.83199991,  2.11249811,
         2.39299631,  2.67349451,  2.95399271,  3.2344909 ,  3.5149891 ,
         3.7954873 ,  4.0759855 ,  4.3564837 ,  4.6369819 ,  4.91748009,
         5.19797829,  5.47847649,  5.75897469,  6.03947289,  6.31997108,
         6.60046928]))

In [43]: n, edges = np.histogram(bimodal, bins=35)

In [44]: n
Out[44]:
array([  1,   2,   7,   9,  17,  29,  45,  55,  77,  89,  98, 112, 116,
       105,  86,  52,  47,  23,  13,  10,   2,   4,   1,   0,   6,  23,
        63, 138, 202, 217, 186, 109,  40,  13,   3])

In [45]: n.shape
Out[45]: (35,)

In [46]: edges.shape
Out[46]: (36,)

In [47]: n.max()
Out[47]: 217

In [48]: n.argmax()
Out[48]: 29

In [49]: n[n.argmax()]
Out[49]: 217

In [50]: n.max()
Out[50]: 217

In [51]: edges[29]
Out[51]: 4.917480093352473

In [52]: import scipy

In [53]: from scipy import stats

In [54]: stats?

In [55]: stats.norm()
Out[55]: <scipy.stats._distn_infrastructure.rv_frozen at 0x7f8a1ea5fa58>

In [56]: rv = stats.norm()

In [57]: rv.mean()
Out[57]: 0.0

In [58]: rv.std()
Out[58]: 1.0

In [59]: rv = stats.norm(loc=5, scale=0.5)

In [60]: rv.mean()
Out[60]: 5.0

In [61]: rv.std()
Out[61]: 0.5

In [62]: s = rv.rvs(1000)

In [63]: s.mean()
Out[63]: 5.012394782370098

In [64]: s.std()
Out[64]: 0.4979879159257093

In [65]: f, ax = plt.subplots()

In [66]: ax.hist(s, bins=30)
Out[66]:
(array([  1.,   0.,   4.,   3.,  18.,  10.,  30.,  33.,  59.,  65.,  76.,
         79.,  89.,  74., 108.,  83.,  66.,  63.,  42.,  26.,  27.,  16.,
         13.,   8.,   1.,   2.,   3.,   0.,   0.,   1.]),
 array([3.46848438, 3.58346514, 3.6984459 , 3.81342666, 3.92840742,
        4.04338817, 4.15836893, 4.27334969, 4.38833045, 4.50331121,
        4.61829197, 4.73327273, 4.84825349, 4.96323425, 5.07821501,
        5.19319577, 5.30817653, 5.42315728, 5.53813804, 5.6531188 ,
        5.76809956, 5.88308032, 5.99806108, 6.11304184, 6.2280226 ,
        6.34300336, 6.45798412, 6.57296488, 6.68794564, 6.80292639,
        6.91790715]),
 <a list of 30 Patch objects>)

In [67]: rv
Out[67]: <scipy.stats._distn_infrastructure.rv_frozen at 0x7f8a1e6fc668>

In [68]: ax.hist(s, bins=30)
Out[68]:
(array([  1.,   0.,   4.,   3.,  18.,  10.,  30.,  33.,  59.,  65.,  76.,
         79.,  89.,  74., 108.,  83.,  66.,  63.,  42.,  26.,  27.,  16.,
         13.,   8.,   1.,   2.,   3.,   0.,   0.,   1.]),
 array([3.46848438, 3.58346514, 3.6984459 , 3.81342666, 3.92840742,
        4.04338817, 4.15836893, 4.27334969, 4.38833045, 4.50331121,
        4.61829197, 4.73327273, 4.84825349, 4.96323425, 5.07821501,
        5.19319577, 5.30817653, 5.42315728, 5.53813804, 5.6531188 ,
        5.76809956, 5.88308032, 5.99806108, 6.11304184, 6.2280226 ,
        6.34300336, 6.45798412, 6.57296488, 6.68794564, 6.80292639,
        6.91790715]),
 <a list of 30 Patch objects>)

In [69]: ax.hist(rv.rvs(1000), bins=30)
Out[69]:
(array([ 2.,  0.,  1.,  4.,  3.,  9.,  8., 15., 28., 24., 39., 44., 53.,
        59., 73., 83., 87., 97., 69., 68., 51., 57., 37., 25., 20., 13.,
        16.,  6.,  6.,  3.]),
 array([3.28626595, 3.39023712, 3.49420828, 3.59817944, 3.70215061,
        3.80612177, 3.91009294, 4.0140641 , 4.11803527, 4.22200643,
        4.32597759, 4.42994876, 4.53391992, 4.63789109, 4.74186225,
        4.84583342, 4.94980458, 5.05377574, 5.15774691, 5.26171807,
        5.36568924, 5.4696604 , 5.57363157, 5.67760273, 5.78157389,
        5.88554506, 5.98951622, 6.09348739, 6.19745855, 6.30142971,
        6.40540088]),
 <a list of 30 Patch objects>)

In [70]: ax.hist(rv.rvs(1000), bins=30)
Out[70]:
(array([  2.,   7.,  11.,  15.,  29.,  21.,  43.,  50.,  57.,  60.,  75.,
         80.,  91., 105.,  89.,  60.,  52.,  49.,  39.,  25.,  15.,   7.,
          6.,   5.,   2.,   1.,   2.,   0.,   0.,   2.]),
 array([3.6242345 , 3.73496031, 3.84568612, 3.95641193, 4.06713775,
        4.17786356, 4.28858937, 4.39931518, 4.51004099, 4.62076681,
        4.73149262, 4.84221843, 4.95294424, 5.06367006, 5.17439587,
        5.28512168, 5.39584749, 5.50657331, 5.61729912, 5.72802493,
        5.83875074, 5.94947656, 6.06020237, 6.17092818, 6.28165399,
        6.39237981, 6.50310562, 6.61383143, 6.72455724, 6.83528306,
        6.94600887]),
 <a list of 30 Patch objects>)

In [71]: ax.hist(rv.rvs(1000), bins=30)
Out[71]:
(array([ 4.,  1.,  0.,  2.,  5.,  3., 13., 24., 22., 38., 49., 62., 69.,
        78., 67., 78., 71., 81., 68., 70., 44., 45., 34., 27., 14., 14.,
         8.,  5.,  3.,  1.]),
 array([3.33910564, 3.44371755, 3.54832945, 3.65294135, 3.75755326,
        3.86216516, 3.96677706, 4.07138897, 4.17600087, 4.28061277,
        4.38522468, 4.48983658, 4.59444848, 4.69906039, 4.80367229,
        4.90828419, 5.0128961 , 5.117508  , 5.2221199 , 5.32673181,
        5.43134371, 5.53595561, 5.64056752, 5.74517942, 5.84979133,
        5.95440323, 6.05901513, 6.16362704, 6.26823894, 6.37285084,
        6.47746275]),
 <a list of 30 Patch objects>)

In [72]: ax.hist(rv.rvs(1000), bins=30)
Out[72]:
(array([  1.,   0.,   0.,   1.,   2.,   0.,   5.,   7.,   7.,  20.,  23.,
         31.,  49.,  77.,  83., 109.,  91., 104.,  97.,  79.,  61.,  52.,
         45.,  22.,  16.,   5.,   8.,   0.,   2.,   3.]),
 array([2.82647298, 2.95528599, 3.08409901, 3.21291202, 3.34172503,
        3.47053804, 3.59935105, 3.72816406, 3.85697708, 3.98579009,
        4.1146031 , 4.24341611, 4.37222912, 4.50104213, 4.62985515,
        4.75866816, 4.88748117, 5.01629418, 5.14510719, 5.2739202 ,
        5.40273321, 5.53154623, 5.66035924, 5.78917225, 5.91798526,
        6.04679827, 6.17561128, 6.3044243 , 6.43323731, 6.56205032,
        6.69086333]),
 <a list of 30 Patch objects>)

In [73]: rv.rvs?
Signature: rv.rvs(size=None, random_state=None)
Docstring: <no docstring>
File:      /usr/local/lib/python3.5/dist-packages/scipy/stats/_distn_infrastructure.py
Type:      method

In [74]: x = np.arange(3, 7, 0.01)

In [75]: y = rv.pdf(x)

In [76]: ax.plot(x, y)
Out[76]: [<matplotlib.lines.Line2D at 0x7f8a3211bd30>]

In [77]: f, ax = plt.subplots()

In [78]: ax.hist(s, bins=30, normed=True)
/usr/local/lib/python3.5/dist-packages/matplotlib/axes/_axes.py:6462: UserWarning: The 'normed' kwarg is deprecated, and has been replaced by the 'density' kwarg.
  warnings.warn("The 'normed' kwarg is deprecated, and has been "
Out[78]:
(array([0.00869711, 0.        , 0.03478843, 0.02609132, 0.15654793,
        0.08697107, 0.26091322, 0.28700454, 0.51312933, 0.56531197,
        0.66098015, 0.68707148, 0.77404255, 0.64358594, 0.93928759,
        0.72185991, 0.57400908, 0.54791776, 0.36527851, 0.22612479,
        0.2348219 , 0.13915372, 0.11306239, 0.06957686, 0.00869711,
        0.01739421, 0.02609132, 0.        , 0.        , 0.00869711]),
 array([3.46848438, 3.58346514, 3.6984459 , 3.81342666, 3.92840742,
        4.04338817, 4.15836893, 4.27334969, 4.38833045, 4.50331121,
        4.61829197, 4.73327273, 4.84825349, 4.96323425, 5.07821501,
        5.19319577, 5.30817653, 5.42315728, 5.53813804, 5.6531188 ,
        5.76809956, 5.88308032, 5.99806108, 6.11304184, 6.2280226 ,
        6.34300336, 6.45798412, 6.57296488, 6.68794564, 6.80292639,
        6.91790715]),
 <a list of 30 Patch objects>)

In [79]: ax.hist?

In [80]: ax.hist(s, bins=30, density=True)
Out[80]:
(array([0.00869711, 0.        , 0.03478843, 0.02609132, 0.15654793,
        0.08697107, 0.26091322, 0.28700454, 0.51312933, 0.56531197,
        0.66098015, 0.68707148, 0.77404255, 0.64358594, 0.93928759,
        0.72185991, 0.57400908, 0.54791776, 0.36527851, 0.22612479,
        0.2348219 , 0.13915372, 0.11306239, 0.06957686, 0.00869711,
        0.01739421, 0.02609132, 0.        , 0.        , 0.00869711]),
 array([3.46848438, 3.58346514, 3.6984459 , 3.81342666, 3.92840742,
        4.04338817, 4.15836893, 4.27334969, 4.38833045, 4.50331121,
        4.61829197, 4.73327273, 4.84825349, 4.96323425, 5.07821501,
        5.19319577, 5.30817653, 5.42315728, 5.53813804, 5.6531188 ,
        5.76809956, 5.88308032, 5.99806108, 6.11304184, 6.2280226 ,
        6.34300336, 6.45798412, 6.57296488, 6.68794564, 6.80292639,
        6.91790715]),
 <a list of 30 Patch objects>)

In [81]: ax.plot(x, y)
Out[81]: [<matplotlib.lines.Line2D at 0x7f8a32077240>]

In [82]: rv = stats.norm(loc=2, scale=10)

In [83]: s = rv.rvs(50)

In [84]: cf()

In [85]: f, ax = plt.subplots()

In [86]: ax.hist(s, bins='auto')
Out[86]:
(array([ 4., 12.,  9., 14.,  4.,  6.,  1.]),
 array([-18.09433796, -11.8751839 ,  -5.65602984,   0.56312422,
          6.78227828,  13.00143234,  19.22058641,  25.43974047]),
 <a list of 7 Patch objects>)

In [87]: stats.ttest_1samp?

In [88]: t, p = stats.ttest_1samp(s, 0)

In [89]: p
Out[89]: 0.7680401601023968

In [90]: s = rv.rvs(500)

In [91]: f, ax = plt.subplots()

In [92]: ax.hist(s, bins='auto')
Out[92]:
(array([ 1.,  3.,  4., 11., 25., 38., 53., 65., 71., 50., 61., 45., 29.,
        22.,  6.,  9.,  4.,  1.,  1.,  1.]),
 array([-27.78839376, -24.43194129, -21.07548881, -17.71903633,
        -14.36258386, -11.00613138,  -7.6496789 ,  -4.29322643,
         -0.93677395,   2.41967853,   5.776131  ,   9.13258348,
         12.48903596,  15.84548843,  19.20194091,  22.55839339,
         25.91484586,  29.27129834,  32.62775082,  35.98420329,
         39.34065577]),
 <a list of 20 Patch objects>)

In [93]: t, p = stats.ttest_1samp(s, 0)

In [94]: p
Out[94]: 2.755905462643424e-06

In [95]: s = rv.rvs(500)

In [96]: t, p = stats.ttest_1samp(s, 0)

In [97]: p
Out[97]: 2.1810015899908042e-08

In [98]: s = rv.rvs(50)

In [99]: t, p = stats.ttest_1samp(s, 0)

In [100]: p
Out[100]: 0.8458623139420959

In [101]: s = rv.rvs(50)

In [102]: type(p)
Out[102]: numpy.float64

In [103]: p +0.00001
Out[103]: 0.8458723139420958

In [104]: p
Out[104]: 0.8458623139420959

In [105]: s = rv.rvs(50)

In [106]: t, p = stats.ttest_1samp(s, 0)

In [107]: p
Out[107]: 0.10674453175639363

In [108]: rv = stats.norm(loc=4, scale=5)

In [109]: s = rv.rvs(50)

In [110]: f, ax = plt.subplots()

In [111]: ax.hist(s, bins='auto')
Out[111]:
(array([ 1.,  2.,  3.,  6.,  6., 12., 12.,  6.,  2.]),
 array([-11.91084972,  -8.90608452,  -5.90131932,  -2.89655412,
          0.10821108,   3.11297628,   6.11774148,   9.12250668,
         12.12727187,  15.13203707]),
 <a list of 9 Patch objects>)

In [112]: t, p = stats.ttest_1samp(s, 0)

In [113]: p
Out[113]: 8.547551933469602e-06

In [114]: s1 = np.random.normal(loc=0, scale=1, size=1000)

In [115]: s2 = np.random.normal(loc=0.5, scale=1, size=1000)

In [116]: cf()

In [117]: f, ax = plt.subplots()

In [118]: ax.hist(s1, bins='auto')
Out[118]:
(array([  3.,   2.,   8.,   8.,  22.,  47.,  57.,  82.,  98.,  86., 124.,
        114.,  79.,  84.,  71.,  46.,  28.,  24.,  10.,   4.,   1.,   2.]),
 array([-3.05780432, -2.77213624, -2.48646816, -2.20080007, -1.91513199,
        -1.62946391, -1.34379583, -1.05812774, -0.77245966, -0.48679158,
        -0.2011235 ,  0.08454459,  0.37021267,  0.65588075,  0.94154884,
         1.22721692,  1.512885  ,  1.79855308,  2.08422117,  2.36988925,
         2.65555733,  2.94122542,  3.2268935 ]),
 <a list of 22 Patch objects>)

In [119]: ax.hist(s2, bins='auto')
Out[119]:
(array([  6.,   4.,   7.,  11.,  23.,  27.,  47.,  41.,  53.,  76., 103.,
        127.,  97.,  81.,  85.,  65.,  50.,  35.,  30.,  13.,  10.,   3.,
          6.]),
 array([-2.5061764 , -2.2508291 , -1.9954818 , -1.7401345 , -1.4847872 ,
        -1.22943991, -0.97409261, -0.71874531, -0.46339801, -0.20805071,
         0.04729658,  0.30264388,  0.55799118,  0.81333848,  1.06868578,
         1.32403308,  1.57938037,  1.83472767,  2.09007497,  2.34542227,
         2.60076957,  2.85611687,  3.11146416,  3.36681146]),
 <a list of 23 Patch objects>)

In [120]: stats.ttest_ind?

In [121]: t, p = stats.ttest_ind(s1, s2, equal_var=False)

In [122]: p
Out[122]: 3.088963118603075e-28

In [123]: stats.ks_2samp?

In [124]: d, kp = stats.ks_2samp(s1, s2)

In [125]: kp
Out[125]: 2.880365559315007e-24

In [126]: u, up = stats.mannwhitneyu(s1, s2)

In [127]: up
Out[127]: 3.000175171338561e-28

In [128]: bimodal
Out[128]:
array([ 0.66936769, -0.36958945,  1.38237285, ...,  5.7581667 ,
        4.11126344,  4.84080807])

In [129]: cf()

In [130]: f, ax = plt.subplots()

In [131]: ax.hist(bimodal, bins=30)
Out[131]:
(array([  2.,   3.,  11.,  15.,  32.,  47.,  69.,  94., 103., 130., 130.,
        126.,  97.,  54.,  46.,  18.,  13.,   5.,   4.,   1.,   0.,  16.,
         60., 154., 234., 248., 197.,  65.,  21.,   5.]),
 array([-3.21696766, -2.88971976, -2.56247186, -2.23522396, -1.90797606,
        -1.58072817, -1.25348027, -0.92623237, -0.59898447, -0.27173657,
         0.05551132,  0.38275922,  0.71000712,  1.03725502,  1.36450292,
         1.69175081,  2.01899871,  2.34624661,  2.67349451,  3.00074241,
         3.3279903 ,  3.6552382 ,  3.9824861 ,  4.309734  ,  4.6369819 ,
         4.96422979,  5.29147769,  5.61872559,  5.94597349,  6.27322139,
         6.60046928]),
 <a list of 30 Patch objects>)

In [132]: stats.kstest?

In [133]: my, sigma = bimodal.mean(), bimodal.std()

In [134]: mu, sigma = bimodal.mean(), bimodal.std()

In [135]: stats.kstest?

In [136]: d, p = stats.kstest(bimodal, 'norm', args=(mu, sigma))

In [137]: p
Out[137]: 0.0

In [138]: import statsmodels

In [139]: np.loadtxt?

In [140]: ls
10_stats.md  10_stats.pdf  stats.csv  stats.csv.py  stats.png

In [141]: csv = np.loadtxt('stats.csv', delimiter=',', skiprows=1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-141-5cb5df8065f9> in <module>()
----> 1 csv = np.loadtxt('stats.csv', delimiter=',', skiprows=1)

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding)
   1090         # converting the data
   1091         X = None
-> 1092         for x in read_data(_loadtxt_chunksize):
   1093             if X is None:
   1094                 X = np.array(x, dtype)

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in read_data(chunk_size)
   1017
   1018             # Convert each value according to its column and store
-> 1019             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1020
   1021             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in <listcomp>(.0)
   1017
   1018             # Convert each value according to its column and store
-> 1019             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1020
   1021             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in floatconv(x)
    736         if '0x' in x:
    737             return float.fromhex(x)
--> 738         return float(x)
    739
    740     typ = dtype.type

ValueError: could not convert string to float:
> /usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py(738)floatconv()
    736         if '0x' in x:
    737             return float.fromhex(x)
--> 738         return float(x)
    739
    740     typ = dtype.type

ipdb> c

In [142]: csv = np.loadtxt('stats.csv', delimiter=',', skiprows=1)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-142-5cb5df8065f9> in <module>()
----> 1 csv = np.loadtxt('stats.csv', delimiter=',', skiprows=1)

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding)
   1090         # converting the data
   1091         X = None
-> 1092         for x in read_data(_loadtxt_chunksize):
   1093             if X is None:
   1094                 X = np.array(x, dtype)

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in read_data(chunk_size)
   1017
   1018             # Convert each value according to its column and store
-> 1019             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1020
   1021             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in <listcomp>(.0)
   1017
   1018             # Convert each value according to its column and store
-> 1019             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1020
   1021             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in floatconv(x)
    736         if '0x' in x:
    737             return float.fromhex(x)
--> 738         return float(x)
    739
    740     typ = dtype.type

ValueError: could not convert string to float:
> /usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py(738)floatconv()
    736         if '0x' in x:
    737             return float.fromhex(x)
--> 738         return float(x)
    739
    740     typ = dtype.type

ipdb> print(x)

ipdb> u
> /usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py(1019)<listcomp>()
   1017
   1018             # Convert each value according to its column and store
-> 1019             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1020
   1021             # Then pack it according to the dtype's nesting

ipdb> d
> /usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py(738)floatconv()
    736         if '0x' in x:
    737             return float.fromhex(x)
--> 738         return float(x)
    739
    740     typ = dtype.type

ipdb> type(x)
<class 'str'>
ipdb> len(x)
0
ipdb> q

In [143]: np.loadtxt?

In [144]: csv = np.loadtxt('stats.csv', delimiter=',', skiprows=1, dtype=float)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-144-8aed9521f529> in <module>()
----> 1 csv = np.loadtxt('stats.csv', delimiter=',', skiprows=1, dtype=float)

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding)
   1090         # converting the data
   1091         X = None
-> 1092         for x in read_data(_loadtxt_chunksize):
   1093             if X is None:
   1094                 X = np.array(x, dtype)

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in read_data(chunk_size)
   1017
   1018             # Convert each value according to its column and store
-> 1019             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1020
   1021             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in <listcomp>(.0)
   1017
   1018             # Convert each value according to its column and store
-> 1019             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1020
   1021             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in floatconv(x)
    736         if '0x' in x:
    737             return float.fromhex(x)
--> 738         return float(x)
    739
    740     typ = dtype.type

ValueError: could not convert string to float:
> /usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py(738)floatconv()
    736         if '0x' in x:
    737             return float.fromhex(x)
--> 738         return float(x)
    739
    740     typ = dtype.type

ipdb> c

In [145]: np.loadtxt?

In [146]: import pandas as pd

In [147]: pd.read_csv?

In [148]: data = read_csv('stats.csv')
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-148-c9021b15b9bc> in <module>()
----> 1 data = read_csv('stats.csv')

NameError: name 'read_csv' is not defined
> <ipython-input-148-c9021b15b9bc>(1)<module>()
----> 1 data = read_csv('stats.csv')

ipdb> c

In [149]: data = pd.read_csv('stats.csv')

In [150]: data
Out[150]:
      control  treatment
0    0.675131  -0.680471
1   -0.158436  -1.185001
2    0.604462  -0.258454
3   -0.120994  -1.133002
4    0.355281   1.664425
5    0.194463   2.606368
6    0.282314   0.672892
7    0.547550  -3.469806
8   -0.704686   2.890944
9    0.238139   1.526147
10  -0.095386  -4.138260
11  -0.209826  -3.075794
12   0.033797  -2.133857
13  -0.693067  -2.879965
14   0.431876   3.433639
15  -0.229841   1.396981
16   0.468202  -1.743603
17   0.398265   1.531077
18   0.603290   0.578797
19  -0.739247  -2.830136
20  -0.046773  -1.544687
21  -0.848418  -1.044272
22   0.122518  -2.629960
23   0.165342  -2.497478
24  -0.336212  -2.024508
25  -0.051565  -0.644201
26  -0.979861  -0.984379
27   0.179871  -1.025612
28   0.318007   1.228630
29  -0.307221  -0.961425
..        ...        ...
570       NaN   1.591573
571       NaN  -1.559895
572       NaN  -2.499739
573       NaN  -2.000094
574       NaN   2.437011
575       NaN  -3.596421
576       NaN   3.412020
577       NaN  -1.320790
578       NaN  -2.353415
579       NaN   0.171141
580       NaN   2.183780
581       NaN   0.164020
582       NaN   3.167997
583       NaN  -0.039431
584       NaN  -2.604550
585       NaN  -0.848187
586       NaN   1.979806
587       NaN   1.732365
588       NaN   0.351566
589       NaN   3.032934
590       NaN  -2.478755
591       NaN  -2.523117
592       NaN  -1.768210
593       NaN   2.256657
594       NaN  -0.899272
595       NaN  -1.470002
596       NaN  -3.203882
597       NaN  -2.743236
598       NaN   3.742266
599       NaN  -1.796751

[600 rows x 2 columns]

In [151]: type(data)
Out[151]: pandas.core.frame.DataFrame

In [152]: data.shape
Out[152]: (600, 2)

In [153]: np.nan == np.nan
Out[153]: False

In [154]: data.control
Out[154]:
0      0.675131
1     -0.158436
2      0.604462
3     -0.120994
4      0.355281
5      0.194463
6      0.282314
7      0.547550
8     -0.704686
9      0.238139
10    -0.095386
11    -0.209826
12     0.033797
13    -0.693067
14     0.431876
15    -0.229841
16     0.468202
17     0.398265
18     0.603290
19    -0.739247
20    -0.046773
21    -0.848418
22     0.122518
23     0.165342
24    -0.336212
25    -0.051565
26    -0.979861
27     0.179871
28     0.318007
29    -0.307221
         ...
570         NaN
571         NaN
572         NaN
573         NaN
574         NaN
575         NaN
576         NaN
577         NaN
578         NaN
579         NaN
580         NaN
581         NaN
582         NaN
583         NaN
584         NaN
585         NaN
586         NaN
587         NaN
588         NaN
589         NaN
590         NaN
591         NaN
592         NaN
593         NaN
594         NaN
595         NaN
596         NaN
597         NaN
598         NaN
599         NaN
Name: control, Length: 600, dtype: float64

In [155]: data['control']
Out[155]:
0      0.675131
1     -0.158436
2      0.604462
3     -0.120994
4      0.355281
5      0.194463
6      0.282314
7      0.547550
8     -0.704686
9      0.238139
10    -0.095386
11    -0.209826
12     0.033797
13    -0.693067
14     0.431876
15    -0.229841
16     0.468202
17     0.398265
18     0.603290
19    -0.739247
20    -0.046773
21    -0.848418
22     0.122518
23     0.165342
24    -0.336212
25    -0.051565
26    -0.979861
27     0.179871
28     0.318007
29    -0.307221
         ...
570         NaN
571         NaN
572         NaN
573         NaN
574         NaN
575         NaN
576         NaN
577         NaN
578         NaN
579         NaN
580         NaN
581         NaN
582         NaN
583         NaN
584         NaN
585         NaN
586         NaN
587         NaN
588         NaN
589         NaN
590         NaN
591         NaN
592         NaN
593         NaN
594         NaN
595         NaN
596         NaN
597         NaN
598         NaN
599         NaN
Name: control, Length: 600, dtype: float64

In [156]: type(data['control'])
Out[156]: pandas.core.series.Series

In [157]: type(data['control']).values
Out[157]: <property at 0x7f8a18f76c28>

In [158]: data['control'].values
Out[158]:
array([ 6.75130984e-01, -1.58435780e-01,  6.04461529e-01, -1.20993687e-01,
        3.55281281e-01,  1.94462573e-01,  2.82313992e-01,  5.47550363e-01,
       -7.04686313e-01,  2.38139075e-01, -9.53855799e-02, -2.09826336e-01,
        3.37974923e-02, -6.93066537e-01,  4.31875684e-01, -2.29840528e-01,
        4.68202401e-01,  3.98265305e-01,  6.03289969e-01, -7.39247478e-01,
       -4.67725154e-02, -8.48417695e-01,  1.22518454e-01,  1.65342357e-01,
       -3.36212473e-01, -5.15651979e-02, -9.79860621e-01,  1.79870971e-01,
        3.18006585e-01, -3.07220701e-01,  3.61583027e-01, -6.91123259e-01,
        1.70160081e-02,  4.06283614e-03,  4.36911245e-01,  4.04220977e-01,
        4.51984520e-01,  5.10144467e-01,  3.40727958e-01, -1.96687634e-01,
        8.14729689e-01, -5.87873950e-01, -5.84859353e-02, -2.21903153e-01,
        1.55662182e-02,  2.88662705e-02, -2.35390988e-02,  1.28035846e-01,
       -1.93001439e-01,  9.42036073e-01,  4.13695302e-01,  2.11621988e-01,
       -5.26340623e-01, -1.82161069e-02, -3.38980050e-01,  6.50612620e-02,
        3.21809105e-01, -8.24384989e-01, -5.03679068e-02, -5.06932399e-01,
        7.26611599e-01, -3.78767392e-01,  5.66074391e-01,  6.26190511e-01,
       -2.12629771e-01, -1.31410191e-01, -3.00185847e-01,  6.47495006e-01,
        2.67139689e-01,  1.49568179e-01, -2.04654984e-01,  2.89764010e-01,
       -1.94556302e-01,  1.42994009e-01,  3.72985169e-01, -1.64539471e-01,
        3.27707171e-02, -3.64876361e-01, -3.78092956e-01,  3.77675926e-01,
        1.94393337e-01,  4.55300329e-01, -1.77946543e-02, -6.37745651e-01,
       -6.24488716e-01,  7.03810016e-01, -4.19630715e-01,  1.60299908e+00,
       -7.12956650e-01, -1.34617640e+00, -1.97059666e-01, -3.45040517e-01,
       -4.88967676e-01,  9.16493946e-01,  3.07328850e-01,  5.04474189e-01,
        4.49326620e-01,  1.17099183e-01,  6.48028760e-02,  5.50585699e-02,
       -5.28374577e-01, -3.49943377e-02,  4.42731322e-01, -3.76792103e-01,
        7.15929470e-01, -2.76873801e-01, -3.75949488e-01, -7.46310554e-02,
        1.91184481e-01, -7.00322644e-03,  9.29943303e-04, -5.25463833e-01,
        1.77506268e-01, -4.05824938e-01,  1.05471103e-01,  5.89765037e-01,
        1.02961538e+00,  3.35818741e-01, -1.20969487e+00, -1.37413998e+00,
        1.20016362e-01,  7.68262085e-01,  2.58416264e-01, -7.63174982e-02,
        3.62232413e-01, -1.01608099e-02,  6.35132518e-01,  3.56440441e-01,
       -3.59590042e-01, -5.59717834e-01,  1.36722781e-01,  7.51942763e-02,
        5.75691669e-01, -4.98675172e-01,  5.54154261e-01, -7.81628461e-01,
        7.92405606e-03,  7.38007964e-01,  5.35878429e-01, -2.83474156e-01,
       -7.28655555e-01,  8.76536057e-01,  5.62473955e-01, -4.34830623e-01,
        4.55983118e-01, -4.70402587e-01, -2.09853661e-01, -2.14518840e-01,
       -2.93732415e-01, -8.08125627e-01,  6.54178888e-02, -4.83416202e-01,
       -4.76516226e-01, -2.18719194e-01,  1.81893768e-01, -1.41054907e-01,
       -5.10425286e-01, -4.85853359e-02, -1.60791100e-01, -9.26346812e-03,
       -7.90260587e-01,  2.62410634e-01, -3.01182726e-01,  4.10195657e-02,
       -7.51145948e-01,  1.44427727e+00, -2.73902262e-01,  1.97922539e-01,
        7.36383320e-01,  1.01380686e+00, -1.30437905e-01, -6.12776702e-02,
        3.19838911e-01,  2.37610498e-01,  8.70277307e-01, -5.64844937e-01,
       -1.94838144e-01, -8.43392332e-02, -3.98929970e-01,  6.74624474e-01,
        3.16294212e-01, -3.47287725e-02, -1.28708522e-01, -9.53707242e-02,
       -1.49636182e-01, -8.99217807e-01,  6.45913345e-01, -8.23083439e-01,
       -1.91290259e-01, -3.18199742e-02, -9.69833821e-01,  6.90976720e-01,
       -7.37745154e-02, -6.53478335e-01,  4.82732514e-01,  1.68494267e-01,
       -7.01766019e-02,  7.79863042e-01,  6.07824016e-01,  5.38141167e-01,
       -1.26198296e-01,  4.49703605e-01, -9.80822111e-01,  1.22427290e-02,
        2.57584364e-01,  4.12416024e-01,  1.16733468e+00,  1.32324358e+00,
       -1.43340207e-01, -3.93877324e-01,  9.72301712e-02,  9.48660127e-01,
        1.47081547e-01, -3.24360403e-01,  8.78677773e-01, -3.55244928e-01,
       -7.81452646e-01,  1.36822398e-01, -6.98203025e-01,  1.09621136e+00,
       -2.63656631e-01,  1.73992261e-01, -3.96705627e-01,  6.66413287e-02,
       -6.58857695e-01, -7.70707956e-01,  1.05807784e+00, -3.58357519e-01,
       -3.58020187e-01,  2.23613667e-01, -4.15649848e-01,  6.91095055e-01,
       -6.60754304e-01, -5.78541247e-01, -8.24345756e-03, -4.61221875e-01,
       -4.48163383e-02, -1.73873384e-01, -9.03641992e-01, -4.58784159e-01,
        5.31341256e-01,  3.11584378e-01, -5.73685408e-01,  1.59478723e-01,
       -8.00100983e-02, -5.43109627e-01, -6.09203854e-01, -1.10317387e+00,
        1.04024192e+00, -4.16470441e-01,  2.54301459e-01, -1.04648669e-02,
        4.30238113e-01,  4.55116668e-01, -3.19450236e-01,  1.04945475e+00,
       -9.89411362e-01, -7.24209651e-01,  7.87409443e-03,  2.23126425e-01,
       -7.11740242e-01,  1.05743718e+00, -6.50620747e-01, -1.92327606e-01,
       -1.56992729e-02, -5.76540529e-01, -5.11327390e-02, -5.77057935e-01,
        2.84445085e-01, -6.70314189e-02,  7.73344606e-02,  2.53827968e-01,
       -1.92560415e-01, -9.47623347e-02, -2.62765497e-01,  7.62490961e-01,
        1.23236404e-01,  6.21846231e-01, -1.07037108e-01,  1.03198357e-01,
       -6.88173310e-01,  3.92999033e-01, -2.05308310e-01,  2.64865032e-01,
        3.34488862e-01, -1.08313360e+00, -1.67685024e-01,  1.14817248e-01,
        2.14304000e-01, -7.69891670e-02, -9.89951072e-03, -1.23082724e-01,
        3.41552807e-01,  3.10373246e-01, -8.57793984e-02, -6.61458665e-01,
       -2.22494710e-01, -1.89426055e-01,  4.29191624e-01,  3.22661024e-02,
        8.10466614e-01, -1.29317595e+00, -2.90907482e-01, -4.72674465e-01,
        1.12306272e-01,  4.33392963e-01,  2.37848274e-01,  3.07782635e-01,
       -3.11089550e-01, -7.67989758e-01,  1.17786279e-01,  3.39527604e-01,
       -1.57732827e-01, -1.56299010e-01, -8.03449968e-01,  4.00185892e-01,
        4.97207860e-01, -1.31621114e-01,  4.57162263e-01,  5.68140613e-01,
        8.42145214e-01, -3.70353568e-01,  1.14918599e-01, -1.15259565e-01,
       -5.94878509e-01,  5.15884495e-01,  1.58839199e-01, -2.91593874e-02,
       -6.06615148e-01, -5.04504078e-01,  8.69601157e-01, -2.70939593e-01,
        8.61806501e-01, -4.07379829e-01, -1.93336413e-01,  1.23064886e-01,
       -3.69770835e-01, -8.79493262e-03,  1.06610025e+00,  1.50697277e-01,
       -1.26513843e+00, -5.23421232e-01,  8.75219337e-02,  5.21330036e-01,
       -4.80678333e-01, -3.60553974e-01,  1.19628354e-01, -9.90819279e-01,
        3.56367509e-01, -7.65279331e-01, -2.06988398e-01,  1.08298210e+00,
        4.87515430e-01,  1.71939379e-02, -4.03986129e-01, -2.63298740e-01,
        1.83983317e-01, -7.57340055e-01, -5.04240253e-01,  7.24000145e-01,
        8.48106294e-01, -3.92274166e-02, -3.14642956e-02,  4.54502498e-01,
       -5.32520775e-02,  4.19062505e-01,  1.54054778e-01,  2.57260518e-01,
        5.19666115e-01,  5.89879114e-01, -3.62042065e-01, -4.14599625e-01,
        2.95255371e-01,  3.75554824e-01, -3.19296427e-01, -2.37391680e-01,
        1.06167911e-01, -1.67790948e-01,  1.18610169e-01,  2.40760470e-01,
        2.87603250e-01, -5.61951231e-02,  9.92804602e-01, -1.73789033e-01,
       -6.35260304e-01,  6.34786596e-01, -6.25487270e-02, -3.92941525e-02,
       -4.80768402e-01,  2.75631915e-01, -1.73466873e-01, -1.19641496e+00,
        7.99781769e-01,  4.81581873e-01,  2.15332694e-01, -6.15848146e-01,
       -2.30511124e-01, -6.79717846e-01, -4.47422229e-01, -1.13590545e-01,
        7.51727944e-01, -1.86276049e-02, -5.20374399e-02, -6.43525481e-01,
        4.58543079e-02, -4.11629523e-01,  5.18815343e-01, -1.18638116e+00,
        5.22952363e-01,  2.37192905e-01,  5.08942152e-01,  2.24717011e-01,
        4.89468592e-01, -1.83645700e-01, -8.50077497e-03,  4.24614761e-01,
       -9.46961127e-01,  2.02679735e-01,  4.51633966e-01,  6.63177199e-01,
       -1.10984511e-01, -9.32998919e-02, -4.82941281e-01, -7.05781445e-01,
        7.79029392e-01,  1.80707526e-01,  6.64729558e-03,  6.10396673e-02,
        2.15587567e-01,  4.27733578e-02, -2.90264312e-01, -7.34797912e-02,
       -1.24698843e-01,  4.99181961e-02,  8.11412066e-01,  6.74537226e-01,
       -5.78561661e-01, -8.44454033e-01, -9.32244528e-02,  6.77273988e-01,
        2.20972151e-02, -5.80681067e-01,  6.41388651e-01,  7.82851489e-01,
       -5.38222734e-02, -2.16610484e-01, -2.90929542e-01,  2.95635979e-01,
       -5.18503455e-02, -4.86301986e-01,  8.04381214e-01,  3.61259784e-01,
       -3.56044307e-01,  2.19542354e-01,  1.73187510e-01, -9.60288112e-02,
       -1.90989101e-01, -5.63509031e-01,  1.10276025e+00,  6.70185507e-03,
       -1.36611007e-01,  2.23854011e-01, -6.28945739e-02,  1.34367838e-02,
        3.51257601e-01, -1.37713607e-01,  6.92686435e-01,  2.48516023e-01,
       -1.85328278e-01, -6.20191834e-01, -5.87462130e-01, -2.85950101e-01,
        1.45952092e-01, -3.01988040e-01,  3.56650442e-01, -4.77447240e-01,
       -2.32521972e-01, -4.90301385e-01,  1.66338688e-01, -7.33560015e-01,
        1.37015334e-01,  6.97682215e-01,  1.73194815e-01, -4.14559662e-01,
        1.02598365e-01,  8.15780546e-01, -1.91374938e-03, -6.42785256e-01,
        3.23792586e-01,  1.64089156e-01, -2.06873958e-01,  7.13647309e-01,
        6.81114221e-01,  8.64658089e-01, -5.72103467e-01,  6.50257139e-01,
       -5.14231879e-01,  6.81778665e-01, -4.65942930e-01, -5.66753809e-01,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan])

In [159]: data['control'].notnull?
Object `notnull` not found.

In [160]: data['control'].notnull()
Out[160]:
0       True
1       True
2       True
3       True
4       True
5       True
6       True
7       True
8       True
9       True
10      True
11      True
12      True
13      True
14      True
15      True
16      True
17      True
18      True
19      True
20      True
21      True
22      True
23      True
24      True
25      True
26      True
27      True
28      True
29      True
       ...
570    False
571    False
572    False
573    False
574    False
575    False
576    False
577    False
578    False
579    False
580    False
581    False
582    False
583    False
584    False
585    False
586    False
587    False
588    False
589    False
590    False
591    False
592    False
593    False
594    False
595    False
596    False
597    False
598    False
599    False
Name: control, Length: 600, dtype: bool

In [161]: data['control'][data['control'].notnull()]
Out[161]:
0      0.675131
1     -0.158436
2      0.604462
3     -0.120994
4      0.355281
5      0.194463
6      0.282314
7      0.547550
8     -0.704686
9      0.238139
10    -0.095386
11    -0.209826
12     0.033797
13    -0.693067
14     0.431876
15    -0.229841
16     0.468202
17     0.398265
18     0.603290
19    -0.739247
20    -0.046773
21    -0.848418
22     0.122518
23     0.165342
24    -0.336212
25    -0.051565
26    -0.979861
27     0.179871
28     0.318007
29    -0.307221
         ...
470   -0.587462
471   -0.285950
472    0.145952
473   -0.301988
474    0.356650
475   -0.477447
476   -0.232522
477   -0.490301
478    0.166339
479   -0.733560
480    0.137015
481    0.697682
482    0.173195
483   -0.414560
484    0.102598
485    0.815781
486   -0.001914
487   -0.642785
488    0.323793
489    0.164089
490   -0.206874
491    0.713647
492    0.681114
493    0.864658
494   -0.572103
495    0.650257
496   -0.514232
497    0.681779
498   -0.465943
499   -0.566754
Name: control, Length: 500, dtype: float64

In [162]: data['control'].dropna()
Out[162]:
0      0.675131
1     -0.158436
2      0.604462
3     -0.120994
4      0.355281
5      0.194463
6      0.282314
7      0.547550
8     -0.704686
9      0.238139
10    -0.095386
11    -0.209826
12     0.033797
13    -0.693067
14     0.431876
15    -0.229841
16     0.468202
17     0.398265
18     0.603290
19    -0.739247
20    -0.046773
21    -0.848418
22     0.122518
23     0.165342
24    -0.336212
25    -0.051565
26    -0.979861
27     0.179871
28     0.318007
29    -0.307221
         ...
470   -0.587462
471   -0.285950
472    0.145952
473   -0.301988
474    0.356650
475   -0.477447
476   -0.232522
477   -0.490301
478    0.166339
479   -0.733560
480    0.137015
481    0.697682
482    0.173195
483   -0.414560
484    0.102598
485    0.815781
486   -0.001914
487   -0.642785
488    0.323793
489    0.164089
490   -0.206874
491    0.713647
492    0.681114
493    0.864658
494   -0.572103
495    0.650257
496   -0.514232
497    0.681779
498   -0.465943
499   -0.566754
Name: control, Length: 500, dtype: float64

In [163]: data['control'].dropna().values
Out[163]:
array([ 6.75130984e-01, -1.58435780e-01,  6.04461529e-01, -1.20993687e-01,
        3.55281281e-01,  1.94462573e-01,  2.82313992e-01,  5.47550363e-01,
       -7.04686313e-01,  2.38139075e-01, -9.53855799e-02, -2.09826336e-01,
        3.37974923e-02, -6.93066537e-01,  4.31875684e-01, -2.29840528e-01,
        4.68202401e-01,  3.98265305e-01,  6.03289969e-01, -7.39247478e-01,
       -4.67725154e-02, -8.48417695e-01,  1.22518454e-01,  1.65342357e-01,
       -3.36212473e-01, -5.15651979e-02, -9.79860621e-01,  1.79870971e-01,
        3.18006585e-01, -3.07220701e-01,  3.61583027e-01, -6.91123259e-01,
        1.70160081e-02,  4.06283614e-03,  4.36911245e-01,  4.04220977e-01,
        4.51984520e-01,  5.10144467e-01,  3.40727958e-01, -1.96687634e-01,
        8.14729689e-01, -5.87873950e-01, -5.84859353e-02, -2.21903153e-01,
        1.55662182e-02,  2.88662705e-02, -2.35390988e-02,  1.28035846e-01,
       -1.93001439e-01,  9.42036073e-01,  4.13695302e-01,  2.11621988e-01,
       -5.26340623e-01, -1.82161069e-02, -3.38980050e-01,  6.50612620e-02,
        3.21809105e-01, -8.24384989e-01, -5.03679068e-02, -5.06932399e-01,
        7.26611599e-01, -3.78767392e-01,  5.66074391e-01,  6.26190511e-01,
       -2.12629771e-01, -1.31410191e-01, -3.00185847e-01,  6.47495006e-01,
        2.67139689e-01,  1.49568179e-01, -2.04654984e-01,  2.89764010e-01,
       -1.94556302e-01,  1.42994009e-01,  3.72985169e-01, -1.64539471e-01,
        3.27707171e-02, -3.64876361e-01, -3.78092956e-01,  3.77675926e-01,
        1.94393337e-01,  4.55300329e-01, -1.77946543e-02, -6.37745651e-01,
       -6.24488716e-01,  7.03810016e-01, -4.19630715e-01,  1.60299908e+00,
       -7.12956650e-01, -1.34617640e+00, -1.97059666e-01, -3.45040517e-01,
       -4.88967676e-01,  9.16493946e-01,  3.07328850e-01,  5.04474189e-01,
        4.49326620e-01,  1.17099183e-01,  6.48028760e-02,  5.50585699e-02,
       -5.28374577e-01, -3.49943377e-02,  4.42731322e-01, -3.76792103e-01,
        7.15929470e-01, -2.76873801e-01, -3.75949488e-01, -7.46310554e-02,
        1.91184481e-01, -7.00322644e-03,  9.29943303e-04, -5.25463833e-01,
        1.77506268e-01, -4.05824938e-01,  1.05471103e-01,  5.89765037e-01,
        1.02961538e+00,  3.35818741e-01, -1.20969487e+00, -1.37413998e+00,
        1.20016362e-01,  7.68262085e-01,  2.58416264e-01, -7.63174982e-02,
        3.62232413e-01, -1.01608099e-02,  6.35132518e-01,  3.56440441e-01,
       -3.59590042e-01, -5.59717834e-01,  1.36722781e-01,  7.51942763e-02,
        5.75691669e-01, -4.98675172e-01,  5.54154261e-01, -7.81628461e-01,
        7.92405606e-03,  7.38007964e-01,  5.35878429e-01, -2.83474156e-01,
       -7.28655555e-01,  8.76536057e-01,  5.62473955e-01, -4.34830623e-01,
        4.55983118e-01, -4.70402587e-01, -2.09853661e-01, -2.14518840e-01,
       -2.93732415e-01, -8.08125627e-01,  6.54178888e-02, -4.83416202e-01,
       -4.76516226e-01, -2.18719194e-01,  1.81893768e-01, -1.41054907e-01,
       -5.10425286e-01, -4.85853359e-02, -1.60791100e-01, -9.26346812e-03,
       -7.90260587e-01,  2.62410634e-01, -3.01182726e-01,  4.10195657e-02,
       -7.51145948e-01,  1.44427727e+00, -2.73902262e-01,  1.97922539e-01,
        7.36383320e-01,  1.01380686e+00, -1.30437905e-01, -6.12776702e-02,
        3.19838911e-01,  2.37610498e-01,  8.70277307e-01, -5.64844937e-01,
       -1.94838144e-01, -8.43392332e-02, -3.98929970e-01,  6.74624474e-01,
        3.16294212e-01, -3.47287725e-02, -1.28708522e-01, -9.53707242e-02,
       -1.49636182e-01, -8.99217807e-01,  6.45913345e-01, -8.23083439e-01,
       -1.91290259e-01, -3.18199742e-02, -9.69833821e-01,  6.90976720e-01,
       -7.37745154e-02, -6.53478335e-01,  4.82732514e-01,  1.68494267e-01,
       -7.01766019e-02,  7.79863042e-01,  6.07824016e-01,  5.38141167e-01,
       -1.26198296e-01,  4.49703605e-01, -9.80822111e-01,  1.22427290e-02,
        2.57584364e-01,  4.12416024e-01,  1.16733468e+00,  1.32324358e+00,
       -1.43340207e-01, -3.93877324e-01,  9.72301712e-02,  9.48660127e-01,
        1.47081547e-01, -3.24360403e-01,  8.78677773e-01, -3.55244928e-01,
       -7.81452646e-01,  1.36822398e-01, -6.98203025e-01,  1.09621136e+00,
       -2.63656631e-01,  1.73992261e-01, -3.96705627e-01,  6.66413287e-02,
       -6.58857695e-01, -7.70707956e-01,  1.05807784e+00, -3.58357519e-01,
       -3.58020187e-01,  2.23613667e-01, -4.15649848e-01,  6.91095055e-01,
       -6.60754304e-01, -5.78541247e-01, -8.24345756e-03, -4.61221875e-01,
       -4.48163383e-02, -1.73873384e-01, -9.03641992e-01, -4.58784159e-01,
        5.31341256e-01,  3.11584378e-01, -5.73685408e-01,  1.59478723e-01,
       -8.00100983e-02, -5.43109627e-01, -6.09203854e-01, -1.10317387e+00,
        1.04024192e+00, -4.16470441e-01,  2.54301459e-01, -1.04648669e-02,
        4.30238113e-01,  4.55116668e-01, -3.19450236e-01,  1.04945475e+00,
       -9.89411362e-01, -7.24209651e-01,  7.87409443e-03,  2.23126425e-01,
       -7.11740242e-01,  1.05743718e+00, -6.50620747e-01, -1.92327606e-01,
       -1.56992729e-02, -5.76540529e-01, -5.11327390e-02, -5.77057935e-01,
        2.84445085e-01, -6.70314189e-02,  7.73344606e-02,  2.53827968e-01,
       -1.92560415e-01, -9.47623347e-02, -2.62765497e-01,  7.62490961e-01,
        1.23236404e-01,  6.21846231e-01, -1.07037108e-01,  1.03198357e-01,
       -6.88173310e-01,  3.92999033e-01, -2.05308310e-01,  2.64865032e-01,
        3.34488862e-01, -1.08313360e+00, -1.67685024e-01,  1.14817248e-01,
        2.14304000e-01, -7.69891670e-02, -9.89951072e-03, -1.23082724e-01,
        3.41552807e-01,  3.10373246e-01, -8.57793984e-02, -6.61458665e-01,
       -2.22494710e-01, -1.89426055e-01,  4.29191624e-01,  3.22661024e-02,
        8.10466614e-01, -1.29317595e+00, -2.90907482e-01, -4.72674465e-01,
        1.12306272e-01,  4.33392963e-01,  2.37848274e-01,  3.07782635e-01,
       -3.11089550e-01, -7.67989758e-01,  1.17786279e-01,  3.39527604e-01,
       -1.57732827e-01, -1.56299010e-01, -8.03449968e-01,  4.00185892e-01,
        4.97207860e-01, -1.31621114e-01,  4.57162263e-01,  5.68140613e-01,
        8.42145214e-01, -3.70353568e-01,  1.14918599e-01, -1.15259565e-01,
       -5.94878509e-01,  5.15884495e-01,  1.58839199e-01, -2.91593874e-02,
       -6.06615148e-01, -5.04504078e-01,  8.69601157e-01, -2.70939593e-01,
        8.61806501e-01, -4.07379829e-01, -1.93336413e-01,  1.23064886e-01,
       -3.69770835e-01, -8.79493262e-03,  1.06610025e+00,  1.50697277e-01,
       -1.26513843e+00, -5.23421232e-01,  8.75219337e-02,  5.21330036e-01,
       -4.80678333e-01, -3.60553974e-01,  1.19628354e-01, -9.90819279e-01,
        3.56367509e-01, -7.65279331e-01, -2.06988398e-01,  1.08298210e+00,
        4.87515430e-01,  1.71939379e-02, -4.03986129e-01, -2.63298740e-01,
        1.83983317e-01, -7.57340055e-01, -5.04240253e-01,  7.24000145e-01,
        8.48106294e-01, -3.92274166e-02, -3.14642956e-02,  4.54502498e-01,
       -5.32520775e-02,  4.19062505e-01,  1.54054778e-01,  2.57260518e-01,
        5.19666115e-01,  5.89879114e-01, -3.62042065e-01, -4.14599625e-01,
        2.95255371e-01,  3.75554824e-01, -3.19296427e-01, -2.37391680e-01,
        1.06167911e-01, -1.67790948e-01,  1.18610169e-01,  2.40760470e-01,
        2.87603250e-01, -5.61951231e-02,  9.92804602e-01, -1.73789033e-01,
       -6.35260304e-01,  6.34786596e-01, -6.25487270e-02, -3.92941525e-02,
       -4.80768402e-01,  2.75631915e-01, -1.73466873e-01, -1.19641496e+00,
        7.99781769e-01,  4.81581873e-01,  2.15332694e-01, -6.15848146e-01,
       -2.30511124e-01, -6.79717846e-01, -4.47422229e-01, -1.13590545e-01,
        7.51727944e-01, -1.86276049e-02, -5.20374399e-02, -6.43525481e-01,
        4.58543079e-02, -4.11629523e-01,  5.18815343e-01, -1.18638116e+00,
        5.22952363e-01,  2.37192905e-01,  5.08942152e-01,  2.24717011e-01,
        4.89468592e-01, -1.83645700e-01, -8.50077497e-03,  4.24614761e-01,
       -9.46961127e-01,  2.02679735e-01,  4.51633966e-01,  6.63177199e-01,
       -1.10984511e-01, -9.32998919e-02, -4.82941281e-01, -7.05781445e-01,
        7.79029392e-01,  1.80707526e-01,  6.64729558e-03,  6.10396673e-02,
        2.15587567e-01,  4.27733578e-02, -2.90264312e-01, -7.34797912e-02,
       -1.24698843e-01,  4.99181961e-02,  8.11412066e-01,  6.74537226e-01,
       -5.78561661e-01, -8.44454033e-01, -9.32244528e-02,  6.77273988e-01,
        2.20972151e-02, -5.80681067e-01,  6.41388651e-01,  7.82851489e-01,
       -5.38222734e-02, -2.16610484e-01, -2.90929542e-01,  2.95635979e-01,
       -5.18503455e-02, -4.86301986e-01,  8.04381214e-01,  3.61259784e-01,
       -3.56044307e-01,  2.19542354e-01,  1.73187510e-01, -9.60288112e-02,
       -1.90989101e-01, -5.63509031e-01,  1.10276025e+00,  6.70185507e-03,
       -1.36611007e-01,  2.23854011e-01, -6.28945739e-02,  1.34367838e-02,
        3.51257601e-01, -1.37713607e-01,  6.92686435e-01,  2.48516023e-01,
       -1.85328278e-01, -6.20191834e-01, -5.87462130e-01, -2.85950101e-01,
        1.45952092e-01, -3.01988040e-01,  3.56650442e-01, -4.77447240e-01,
       -2.32521972e-01, -4.90301385e-01,  1.66338688e-01, -7.33560015e-01,
        1.37015334e-01,  6.97682215e-01,  1.73194815e-01, -4.14559662e-01,
        1.02598365e-01,  8.15780546e-01, -1.91374938e-03, -6.42785256e-01,
        3.23792586e-01,  1.64089156e-01, -2.06873958e-01,  7.13647309e-01,
        6.81114221e-01,  8.64658089e-01, -5.72103467e-01,  6.50257139e-01,
       -5.14231879e-01,  6.81778665e-01, -4.65942930e-01, -5.66753809e-01])

In [164]: data['control'].dropna().values.shape
Out[164]: (500,)

In [165]: data['treatment'].dropna().values.shape
Out[165]: (600,)

In [166]: data['treatment'].dropna().values
Out[166]:
array([-0.68047104, -1.18500127, -0.25845383, -1.13300202,  1.66442472,
        2.60636758,  0.6728919 , -3.46980609,  2.89094449,  1.52614715,
       -4.13826016, -3.07579428, -2.13385681, -2.87996509,  3.43363864,
        1.39698069, -1.74360328,  1.53107734,  0.57879733, -2.83013555,
       -1.54468715, -1.04427225, -2.62996029, -2.49747795, -2.02450788,
       -0.64420135, -0.98437926, -1.02561173,  1.22863033, -0.96142499,
        2.27923846,  3.37777929,  0.35712154,  0.62942448, -3.51402234,
       -0.98540379, -1.9818345 , -0.22880507, -1.79076542,  3.11125075,
        3.89079845,  1.1046816 ,  1.83724717,  0.52682517,  0.48806553,
        1.88737738, -2.86208176,  0.47623985, -2.21924836, -1.63378262,
       -2.6760231 ,  1.83042955, -1.7153803 ,  2.84606323, -4.06702064,
        2.55369678,  1.05743881,  3.70215047, -1.1575662 ,  2.99445059,
       -1.58485972, -1.8930218 ,  0.52464811, -0.283945  ,  1.63957376,
       -1.29335774, -0.87881168,  4.33689799, -2.83781607, -1.93373267,
       -3.34847496,  2.30769959, -2.35193554,  1.66632976, -1.05507457,
        1.93222307, -2.32029386,  0.62173826,  3.80694161, -1.0512275 ,
        3.08054969,  2.92809719,  0.84902751, -0.9760959 ,  1.66425416,
       -2.11825828, -2.55829387,  0.06235813, -1.41865424, -2.46489062,
        3.54449258,  2.42386219,  2.74061479,  3.11400845,  2.75724715,
        2.73209303, -1.60460365, -2.83170982,  2.60617481, -3.92248691,
        1.48939338,  3.73389033, -0.45157971,  2.83570004, -0.49498581,
       -0.85893869, -1.60702056, -1.81861625, -4.06675841, -3.12502138,
       -0.35156492, -1.34726544,  0.48692126,  1.84715056,  0.43711662,
        0.97830888, -1.78614182, -4.01906414,  0.80423748,  1.93019395,
       -2.07719174,  2.15471292,  0.08900674, -3.20397677, -2.10026568,
       -1.70780962,  2.2178684 ,  0.27683949,  3.11654479,  0.9375219 ,
        0.7936457 ,  2.50225099, -2.62326865,  3.70207953, -2.15124513,
       -1.1229965 ,  1.98721703, -2.74844657,  2.37524772, -3.26637353,
       -1.14138714, -1.62467595, -2.60802797, -1.21820334, -2.62828637,
        1.55997062, -2.19339882,  2.73753623, -3.11443924, -2.41069344,
       -2.46168325,  1.92909419,  1.75397256, -1.98832202, -1.38637137,
       -2.10271731,  3.19162649, -2.50853988, -1.02888015,  0.48975581,
        0.9720374 , -0.26087177,  0.64490431,  0.18791457, -1.34275574,
       -2.672225  ,  2.33236677,  1.6105011 ,  0.80300828,  2.19401671,
       -2.48482063, -0.29678156, -1.96846915,  0.88339753, -2.46850454,
        3.95968971,  2.29051537,  1.82415863,  3.51829087,  0.15303742,
       -2.61969831,  2.02363634,  2.38377041, -0.50666435, -0.92825735,
        0.28066192,  1.8742354 , -2.67112581, -2.49695977, -2.99214967,
       -1.93054319, -1.76212762,  0.74076945,  1.69629772,  1.74964506,
        1.15341626, -0.26446705, -3.63637166,  2.31812255, -3.25007182,
        0.9073501 , -2.83535332,  2.11405571,  2.23727667, -1.64419142,
        2.48291439,  2.79695096,  2.68567918,  1.30490199,  1.83172501,
       -1.90302439, -0.74813999, -1.16370903, -2.30157863, -1.93552106,
        0.17445961,  1.26435675, -2.70436098, -1.14710342, -2.41633707,
        3.22045935, -1.89447801, -2.09145649,  0.78754015,  3.04695396,
       -1.82769054,  2.19442042,  1.75763024, -2.48140073, -2.20751178,
        0.17238741, -3.27379462, -0.11239669, -0.73375239,  1.82206736,
        3.99158514,  0.80148542,  2.23674028, -3.38540083, -3.77628766,
       -0.10525869,  2.25291707, -3.30444478, -3.42724757, -2.13132597,
       -2.12736275,  0.8307258 ,  3.69024124,  1.18724871,  2.5190169 ,
       -0.82868561, -1.07815537, -0.95462123,  0.57029433, -2.97807429,
        0.7500662 , -2.5044225 ,  2.42840314, -0.83720092, -2.66100329,
       -2.48059279, -3.85028128, -1.88614995,  3.73855749,  1.99689001,
       -2.81182426, -3.73543159, -1.66047466,  1.45474323,  0.80813554,
        1.63602916,  2.86571743,  1.33517727, -2.88065774,  5.58572019,
       -4.74502333,  1.29667478,  1.36929873, -2.49460739,  0.29080801,
       -2.47562069,  1.61534623, -2.52402411,  2.45582995, -1.56154319,
        2.03129652, -3.01585995, -1.5297215 , -1.0195156 , -1.7131003 ,
       -2.59615637,  2.60532854, -2.20157498,  1.85629927,  2.59150385,
       -0.46356373,  0.07341942, -1.00596416,  1.74761468,  1.01465659,
        0.21826522,  0.35019272,  1.67955547, -1.89622723,  2.29292298,
       -2.90296705, -3.02734249,  2.48234542,  3.84277853, -1.68387751,
        1.7267113 ,  3.11590265,  2.30140878,  2.37913475, -2.08201717,
       -3.37087881,  1.25078745, -1.00087788, -1.34618202,  3.39772577,
       -0.14625693,  1.28916084,  3.26532416, -0.63819898, -1.12512998,
        2.39007046,  0.69950504,  4.09010078, -1.68351338, -1.02591595,
       -2.06569826, -0.85483203, -2.685811  , -0.48656254,  2.81734589,
       -1.76429037, -1.51297432,  1.6040372 ,  1.32337302, -2.09225276,
       -2.53655935, -3.13503797,  1.78008385, -0.64195038, -1.71396267,
        1.0855314 ,  1.46894342,  2.42423467,  3.06242606,  2.32511702,
       -0.88243976, -2.85318158, -1.04397234,  1.06693766,  4.22843172,
       -1.69190038,  2.15074003, -1.57391407,  2.63718835,  1.51778535,
        0.87769697, -4.40347323, -2.04430413, -2.45451245,  0.36202915,
        0.18089515, -2.55604149, -1.23949484,  1.00472809,  0.28232974,
       -1.88020642, -1.35048691,  2.76678397,  2.89562244,  0.25096141,
        2.47962908, -1.81600841,  2.24341657,  1.82088709,  4.11391205,
        1.17630087,  0.93460314,  1.77103306, -1.02941869,  1.97670905,
       -2.06410027,  1.67510127, -1.84531528,  4.26419125, -2.61923931,
        1.89249999,  1.254344  ,  2.7951597 ,  1.26491872,  2.29901675,
       -0.34385308, -2.50938631, -3.16923483,  2.58161826,  1.8045885 ,
        1.25875579, -2.00410287,  2.00936307,  2.43065445, -1.90294072,
       -0.3751544 ,  2.53098956,  1.88516827, -1.67406813,  1.30634494,
       -1.00617507,  1.86293443, -0.39868085,  0.51380432, -1.67534515,
       -1.27806808, -2.82166933,  2.28000854,  1.97108052, -2.12452803,
        2.70619351,  3.29632342,  3.02660417, -3.31359164,  1.57554327,
       -2.36076054, -2.19650802, -2.68379914, -1.57217388,  4.20222489,
       -1.05987345, -1.78654048,  2.20415063, -1.8109556 ,  0.64934408,
       -1.0986951 ,  2.16979668, -0.13115321,  3.20201513,  2.08761144,
        1.38082593,  2.41688577,  2.73067434,  1.27663815,  1.8196139 ,
        1.75333154, -2.1860724 , -2.61702307, -1.59969962,  1.78746527,
        2.32695441,  3.51749419,  1.02743835,  2.66378611,  2.12184015,
       -1.49894929,  1.18600137, -2.05893079, -2.95619666, -1.26062279,
        3.18246345,  0.60714042,  2.37633508,  1.24301244, -0.98236871,
        3.26249966,  2.9522302 , -2.25745135,  2.82343048,  2.76614017,
        2.237404  ,  1.58616101, -2.57840765,  2.19350167, -2.7147293 ,
       -0.24181903,  1.90984104, -0.96428664,  2.03753758, -3.11675387,
       -1.69961262,  4.30550846,  2.65260461,  3.49627004,  2.96808006,
       -2.07819807, -3.51724526,  1.97867134,  0.82953986, -2.85109731,
       -3.38509071, -2.35429514,  2.01809804,  2.24177916,  2.98577672,
        2.00857687, -2.20147518,  1.90084492, -1.89875807, -3.80435545,
        2.99183627,  1.02866717,  2.08215917,  0.43805629,  2.39183974,
        1.15658068,  1.5653827 , -2.27430526, -3.63979403, -1.17894937,
       -0.16150883,  0.03693039, -1.24652805, -2.38398181, -3.13560079,
       -1.53063019, -2.90727482, -2.9631607 ,  1.31088958, -3.0009716 ,
        0.96760173,  2.31126668, -3.25200267, -2.60335271,  1.49859328,
       -0.69964001,  1.59988602, -3.58447934, -1.4077824 , -3.27646244,
        0.014388  ,  1.27953233,  2.3853138 , -1.72853021, -0.49545538,
        2.18432821,  2.89930424,  0.4006655 ,  2.59033997, -3.32754023,
        2.7963438 , -1.153231  , -2.01288189, -0.94700149, -1.79194456,
        2.31985437,  2.2981544 ,  1.05709517, -0.55535359,  3.08553564,
        2.41575712, -1.33649421, -1.52582499, -1.44913525, -0.14460336,
       -2.3046071 ,  0.67398087, -4.20662611, -0.9870569 , -1.26186358,
       -1.29857929, -0.16516992,  4.42245117, -3.01048339, -2.23640039,
       -2.51964912,  0.30207504, -3.37506119,  3.13342801, -1.91564107,
        1.59157322, -1.55989493, -2.49973944, -2.00009411,  2.43701065,
       -3.59642057,  3.41202035, -1.32079007, -2.35341486,  0.17114109,
        2.18378029,  0.16401995,  3.16799724, -0.03943126, -2.60455036,
       -0.84818716,  1.97980574,  1.73236494,  0.35156553,  3.03293384,
       -2.47875456, -2.52311687, -1.76821001,  2.25665729, -0.89927174,
       -1.47000162, -3.20388242, -2.74323598,  3.7422658 , -1.79675128])

In [167]: treatment = data['treatment'].dropna().values

In [168]: control = data['control'].dropna().values

In [169]: data['control'].values
Out[169]:
array([ 6.75130984e-01, -1.58435780e-01,  6.04461529e-01, -1.20993687e-01,
        3.55281281e-01,  1.94462573e-01,  2.82313992e-01,  5.47550363e-01,
       -7.04686313e-01,  2.38139075e-01, -9.53855799e-02, -2.09826336e-01,
        3.37974923e-02, -6.93066537e-01,  4.31875684e-01, -2.29840528e-01,
        4.68202401e-01,  3.98265305e-01,  6.03289969e-01, -7.39247478e-01,
       -4.67725154e-02, -8.48417695e-01,  1.22518454e-01,  1.65342357e-01,
       -3.36212473e-01, -5.15651979e-02, -9.79860621e-01,  1.79870971e-01,
        3.18006585e-01, -3.07220701e-01,  3.61583027e-01, -6.91123259e-01,
        1.70160081e-02,  4.06283614e-03,  4.36911245e-01,  4.04220977e-01,
        4.51984520e-01,  5.10144467e-01,  3.40727958e-01, -1.96687634e-01,
        8.14729689e-01, -5.87873950e-01, -5.84859353e-02, -2.21903153e-01,
        1.55662182e-02,  2.88662705e-02, -2.35390988e-02,  1.28035846e-01,
       -1.93001439e-01,  9.42036073e-01,  4.13695302e-01,  2.11621988e-01,
       -5.26340623e-01, -1.82161069e-02, -3.38980050e-01,  6.50612620e-02,
        3.21809105e-01, -8.24384989e-01, -5.03679068e-02, -5.06932399e-01,
        7.26611599e-01, -3.78767392e-01,  5.66074391e-01,  6.26190511e-01,
       -2.12629771e-01, -1.31410191e-01, -3.00185847e-01,  6.47495006e-01,
        2.67139689e-01,  1.49568179e-01, -2.04654984e-01,  2.89764010e-01,
       -1.94556302e-01,  1.42994009e-01,  3.72985169e-01, -1.64539471e-01,
        3.27707171e-02, -3.64876361e-01, -3.78092956e-01,  3.77675926e-01,
        1.94393337e-01,  4.55300329e-01, -1.77946543e-02, -6.37745651e-01,
       -6.24488716e-01,  7.03810016e-01, -4.19630715e-01,  1.60299908e+00,
       -7.12956650e-01, -1.34617640e+00, -1.97059666e-01, -3.45040517e-01,
       -4.88967676e-01,  9.16493946e-01,  3.07328850e-01,  5.04474189e-01,
        4.49326620e-01,  1.17099183e-01,  6.48028760e-02,  5.50585699e-02,
       -5.28374577e-01, -3.49943377e-02,  4.42731322e-01, -3.76792103e-01,
        7.15929470e-01, -2.76873801e-01, -3.75949488e-01, -7.46310554e-02,
        1.91184481e-01, -7.00322644e-03,  9.29943303e-04, -5.25463833e-01,
        1.77506268e-01, -4.05824938e-01,  1.05471103e-01,  5.89765037e-01,
        1.02961538e+00,  3.35818741e-01, -1.20969487e+00, -1.37413998e+00,
        1.20016362e-01,  7.68262085e-01,  2.58416264e-01, -7.63174982e-02,
        3.62232413e-01, -1.01608099e-02,  6.35132518e-01,  3.56440441e-01,
       -3.59590042e-01, -5.59717834e-01,  1.36722781e-01,  7.51942763e-02,
        5.75691669e-01, -4.98675172e-01,  5.54154261e-01, -7.81628461e-01,
        7.92405606e-03,  7.38007964e-01,  5.35878429e-01, -2.83474156e-01,
       -7.28655555e-01,  8.76536057e-01,  5.62473955e-01, -4.34830623e-01,
        4.55983118e-01, -4.70402587e-01, -2.09853661e-01, -2.14518840e-01,
       -2.93732415e-01, -8.08125627e-01,  6.54178888e-02, -4.83416202e-01,
       -4.76516226e-01, -2.18719194e-01,  1.81893768e-01, -1.41054907e-01,
       -5.10425286e-01, -4.85853359e-02, -1.60791100e-01, -9.26346812e-03,
       -7.90260587e-01,  2.62410634e-01, -3.01182726e-01,  4.10195657e-02,
       -7.51145948e-01,  1.44427727e+00, -2.73902262e-01,  1.97922539e-01,
        7.36383320e-01,  1.01380686e+00, -1.30437905e-01, -6.12776702e-02,
        3.19838911e-01,  2.37610498e-01,  8.70277307e-01, -5.64844937e-01,
       -1.94838144e-01, -8.43392332e-02, -3.98929970e-01,  6.74624474e-01,
        3.16294212e-01, -3.47287725e-02, -1.28708522e-01, -9.53707242e-02,
       -1.49636182e-01, -8.99217807e-01,  6.45913345e-01, -8.23083439e-01,
       -1.91290259e-01, -3.18199742e-02, -9.69833821e-01,  6.90976720e-01,
       -7.37745154e-02, -6.53478335e-01,  4.82732514e-01,  1.68494267e-01,
       -7.01766019e-02,  7.79863042e-01,  6.07824016e-01,  5.38141167e-01,
       -1.26198296e-01,  4.49703605e-01, -9.80822111e-01,  1.22427290e-02,
        2.57584364e-01,  4.12416024e-01,  1.16733468e+00,  1.32324358e+00,
       -1.43340207e-01, -3.93877324e-01,  9.72301712e-02,  9.48660127e-01,
        1.47081547e-01, -3.24360403e-01,  8.78677773e-01, -3.55244928e-01,
       -7.81452646e-01,  1.36822398e-01, -6.98203025e-01,  1.09621136e+00,
       -2.63656631e-01,  1.73992261e-01, -3.96705627e-01,  6.66413287e-02,
       -6.58857695e-01, -7.70707956e-01,  1.05807784e+00, -3.58357519e-01,
       -3.58020187e-01,  2.23613667e-01, -4.15649848e-01,  6.91095055e-01,
       -6.60754304e-01, -5.78541247e-01, -8.24345756e-03, -4.61221875e-01,
       -4.48163383e-02, -1.73873384e-01, -9.03641992e-01, -4.58784159e-01,
        5.31341256e-01,  3.11584378e-01, -5.73685408e-01,  1.59478723e-01,
       -8.00100983e-02, -5.43109627e-01, -6.09203854e-01, -1.10317387e+00,
        1.04024192e+00, -4.16470441e-01,  2.54301459e-01, -1.04648669e-02,
        4.30238113e-01,  4.55116668e-01, -3.19450236e-01,  1.04945475e+00,
       -9.89411362e-01, -7.24209651e-01,  7.87409443e-03,  2.23126425e-01,
       -7.11740242e-01,  1.05743718e+00, -6.50620747e-01, -1.92327606e-01,
       -1.56992729e-02, -5.76540529e-01, -5.11327390e-02, -5.77057935e-01,
        2.84445085e-01, -6.70314189e-02,  7.73344606e-02,  2.53827968e-01,
       -1.92560415e-01, -9.47623347e-02, -2.62765497e-01,  7.62490961e-01,
        1.23236404e-01,  6.21846231e-01, -1.07037108e-01,  1.03198357e-01,
       -6.88173310e-01,  3.92999033e-01, -2.05308310e-01,  2.64865032e-01,
        3.34488862e-01, -1.08313360e+00, -1.67685024e-01,  1.14817248e-01,
        2.14304000e-01, -7.69891670e-02, -9.89951072e-03, -1.23082724e-01,
        3.41552807e-01,  3.10373246e-01, -8.57793984e-02, -6.61458665e-01,
       -2.22494710e-01, -1.89426055e-01,  4.29191624e-01,  3.22661024e-02,
        8.10466614e-01, -1.29317595e+00, -2.90907482e-01, -4.72674465e-01,
        1.12306272e-01,  4.33392963e-01,  2.37848274e-01,  3.07782635e-01,
       -3.11089550e-01, -7.67989758e-01,  1.17786279e-01,  3.39527604e-01,
       -1.57732827e-01, -1.56299010e-01, -8.03449968e-01,  4.00185892e-01,
        4.97207860e-01, -1.31621114e-01,  4.57162263e-01,  5.68140613e-01,
        8.42145214e-01, -3.70353568e-01,  1.14918599e-01, -1.15259565e-01,
       -5.94878509e-01,  5.15884495e-01,  1.58839199e-01, -2.91593874e-02,
       -6.06615148e-01, -5.04504078e-01,  8.69601157e-01, -2.70939593e-01,
        8.61806501e-01, -4.07379829e-01, -1.93336413e-01,  1.23064886e-01,
       -3.69770835e-01, -8.79493262e-03,  1.06610025e+00,  1.50697277e-01,
       -1.26513843e+00, -5.23421232e-01,  8.75219337e-02,  5.21330036e-01,
       -4.80678333e-01, -3.60553974e-01,  1.19628354e-01, -9.90819279e-01,
        3.56367509e-01, -7.65279331e-01, -2.06988398e-01,  1.08298210e+00,
        4.87515430e-01,  1.71939379e-02, -4.03986129e-01, -2.63298740e-01,
        1.83983317e-01, -7.57340055e-01, -5.04240253e-01,  7.24000145e-01,
        8.48106294e-01, -3.92274166e-02, -3.14642956e-02,  4.54502498e-01,
       -5.32520775e-02,  4.19062505e-01,  1.54054778e-01,  2.57260518e-01,
        5.19666115e-01,  5.89879114e-01, -3.62042065e-01, -4.14599625e-01,
        2.95255371e-01,  3.75554824e-01, -3.19296427e-01, -2.37391680e-01,
        1.06167911e-01, -1.67790948e-01,  1.18610169e-01,  2.40760470e-01,
        2.87603250e-01, -5.61951231e-02,  9.92804602e-01, -1.73789033e-01,
       -6.35260304e-01,  6.34786596e-01, -6.25487270e-02, -3.92941525e-02,
       -4.80768402e-01,  2.75631915e-01, -1.73466873e-01, -1.19641496e+00,
        7.99781769e-01,  4.81581873e-01,  2.15332694e-01, -6.15848146e-01,
       -2.30511124e-01, -6.79717846e-01, -4.47422229e-01, -1.13590545e-01,
        7.51727944e-01, -1.86276049e-02, -5.20374399e-02, -6.43525481e-01,
        4.58543079e-02, -4.11629523e-01,  5.18815343e-01, -1.18638116e+00,
        5.22952363e-01,  2.37192905e-01,  5.08942152e-01,  2.24717011e-01,
        4.89468592e-01, -1.83645700e-01, -8.50077497e-03,  4.24614761e-01,
       -9.46961127e-01,  2.02679735e-01,  4.51633966e-01,  6.63177199e-01,
       -1.10984511e-01, -9.32998919e-02, -4.82941281e-01, -7.05781445e-01,
        7.79029392e-01,  1.80707526e-01,  6.64729558e-03,  6.10396673e-02,
        2.15587567e-01,  4.27733578e-02, -2.90264312e-01, -7.34797912e-02,
       -1.24698843e-01,  4.99181961e-02,  8.11412066e-01,  6.74537226e-01,
       -5.78561661e-01, -8.44454033e-01, -9.32244528e-02,  6.77273988e-01,
        2.20972151e-02, -5.80681067e-01,  6.41388651e-01,  7.82851489e-01,
       -5.38222734e-02, -2.16610484e-01, -2.90929542e-01,  2.95635979e-01,
       -5.18503455e-02, -4.86301986e-01,  8.04381214e-01,  3.61259784e-01,
       -3.56044307e-01,  2.19542354e-01,  1.73187510e-01, -9.60288112e-02,
       -1.90989101e-01, -5.63509031e-01,  1.10276025e+00,  6.70185507e-03,
       -1.36611007e-01,  2.23854011e-01, -6.28945739e-02,  1.34367838e-02,
        3.51257601e-01, -1.37713607e-01,  6.92686435e-01,  2.48516023e-01,
       -1.85328278e-01, -6.20191834e-01, -5.87462130e-01, -2.85950101e-01,
        1.45952092e-01, -3.01988040e-01,  3.56650442e-01, -4.77447240e-01,
       -2.32521972e-01, -4.90301385e-01,  1.66338688e-01, -7.33560015e-01,
        1.37015334e-01,  6.97682215e-01,  1.73194815e-01, -4.14559662e-01,
        1.02598365e-01,  8.15780546e-01, -1.91374938e-03, -6.42785256e-01,
        3.23792586e-01,  1.64089156e-01, -2.06873958e-01,  7.13647309e-01,
        6.81114221e-01,  8.64658089e-01, -5.72103467e-01,  6.50257139e-01,
       -5.14231879e-01,  6.81778665e-01, -4.65942930e-01, -5.66753809e-01,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan,
                   nan,             nan,             nan,             nan])

In [170]: data[1]
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/usr/local/lib/python3.5/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   3062             try:
-> 3063                 return self._engine.get_loc(key)
   3064             except KeyError:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 1

During handling of the above exception, another exception occurred:

KeyError                                  Traceback (most recent call last)
<ipython-input-170-c402bf503b75> in <module>()
----> 1 data[1]

/usr/local/lib/python3.5/dist-packages/pandas/core/frame.py in __getitem__(self, key)
   2683             return self._getitem_multilevel(key)
   2684         else:
-> 2685             return self._getitem_column(key)
   2686
   2687     def _getitem_column(self, key):

/usr/local/lib/python3.5/dist-packages/pandas/core/frame.py in _getitem_column(self, key)
   2690         # get column
   2691         if self.columns.is_unique:
-> 2692             return self._get_item_cache(key)
   2693
   2694         # duplicate columns & possible reduce dimensionality

/usr/local/lib/python3.5/dist-packages/pandas/core/generic.py in _get_item_cache(self, item)
   2484         res = cache.get(item)
   2485         if res is None:
-> 2486             values = self._data.get(item)
   2487             res = self._box_item_values(item, values)
   2488             cache[item] = res

/usr/local/lib/python3.5/dist-packages/pandas/core/internals.py in get(self, item, fastpath)
   4113
   4114             if not isna(item):
-> 4115                 loc = self.items.get_loc(item)
   4116             else:
   4117                 indexer = np.arange(len(self.items))[isna(self.items)]

/usr/local/lib/python3.5/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   3063                 return self._engine.get_loc(key)
   3064             except KeyError:
-> 3065                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   3066
   3067         indexer = self.get_indexer([key], method=method, tolerance=tolerance)

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 1
> /home/mspacek/SciPyCourse2018/notes/10_stats/pandas/_libs/hashtable_class_helper.pxi(1500)pandas._libs.hashtable.PyObjectHashTable.get_item()

ipdb> c

In [171]: data[1]
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/usr/local/lib/python3.5/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   3062             try:
-> 3063                 return self._engine.get_loc(key)
   3064             except KeyError:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 1

During handling of the above exception, another exception occurred:

KeyError                                  Traceback (most recent call last)
<ipython-input-171-c402bf503b75> in <module>()
----> 1 data[1]

/usr/local/lib/python3.5/dist-packages/pandas/core/frame.py in __getitem__(self, key)
   2683             return self._getitem_multilevel(key)
   2684         else:
-> 2685             return self._getitem_column(key)
   2686
   2687     def _getitem_column(self, key):

/usr/local/lib/python3.5/dist-packages/pandas/core/frame.py in _getitem_column(self, key)
   2690         # get column
   2691         if self.columns.is_unique:
-> 2692             return self._get_item_cache(key)
   2693
   2694         # duplicate columns & possible reduce dimensionality

/usr/local/lib/python3.5/dist-packages/pandas/core/generic.py in _get_item_cache(self, item)
   2484         res = cache.get(item)
   2485         if res is None:
-> 2486             values = self._data.get(item)
   2487             res = self._box_item_values(item, values)
   2488             cache[item] = res

/usr/local/lib/python3.5/dist-packages/pandas/core/internals.py in get(self, item, fastpath)
   4113
   4114             if not isna(item):
-> 4115                 loc = self.items.get_loc(item)
   4116             else:
   4117                 indexer = np.arange(len(self.items))[isna(self.items)]

/usr/local/lib/python3.5/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   3063                 return self._engine.get_loc(key)
   3064             except KeyError:
-> 3065                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   3066
   3067         indexer = self.get_indexer([key], method=method, tolerance=tolerance)

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 1
> /home/mspacek/SciPyCourse2018/notes/10_stats/pandas/_libs/hashtable_class_helper.pxi(1500)pandas._libs.hashtable.PyObjectHashTable.get_item()

ipdb> c

In [172]: data.values
Out[172]:
array([[ 0.67513098, -0.68047104],
       [-0.15843578, -1.18500127],
       [ 0.60446153, -0.25845383],
       ...,
       [        nan, -2.74323598],
       [        nan,  3.7422658 ],
       [        nan, -1.79675128]])

In [173]: data.values[:, 1]
Out[173]:
array([-0.68047104, -1.18500127, -0.25845383, -1.13300202,  1.66442472,
        2.60636758,  0.6728919 , -3.46980609,  2.89094449,  1.52614715,
       -4.13826016, -3.07579428, -2.13385681, -2.87996509,  3.43363864,
        1.39698069, -1.74360328,  1.53107734,  0.57879733, -2.83013555,
       -1.54468715, -1.04427225, -2.62996029, -2.49747795, -2.02450788,
       -0.64420135, -0.98437926, -1.02561173,  1.22863033, -0.96142499,
        2.27923846,  3.37777929,  0.35712154,  0.62942448, -3.51402234,
       -0.98540379, -1.9818345 , -0.22880507, -1.79076542,  3.11125075,
        3.89079845,  1.1046816 ,  1.83724717,  0.52682517,  0.48806553,
        1.88737738, -2.86208176,  0.47623985, -2.21924836, -1.63378262,
       -2.6760231 ,  1.83042955, -1.7153803 ,  2.84606323, -4.06702064,
        2.55369678,  1.05743881,  3.70215047, -1.1575662 ,  2.99445059,
       -1.58485972, -1.8930218 ,  0.52464811, -0.283945  ,  1.63957376,
       -1.29335774, -0.87881168,  4.33689799, -2.83781607, -1.93373267,
       -3.34847496,  2.30769959, -2.35193554,  1.66632976, -1.05507457,
        1.93222307, -2.32029386,  0.62173826,  3.80694161, -1.0512275 ,
        3.08054969,  2.92809719,  0.84902751, -0.9760959 ,  1.66425416,
       -2.11825828, -2.55829387,  0.06235813, -1.41865424, -2.46489062,
        3.54449258,  2.42386219,  2.74061479,  3.11400845,  2.75724715,
        2.73209303, -1.60460365, -2.83170982,  2.60617481, -3.92248691,
        1.48939338,  3.73389033, -0.45157971,  2.83570004, -0.49498581,
       -0.85893869, -1.60702056, -1.81861625, -4.06675841, -3.12502138,
       -0.35156492, -1.34726544,  0.48692126,  1.84715056,  0.43711662,
        0.97830888, -1.78614182, -4.01906414,  0.80423748,  1.93019395,
       -2.07719174,  2.15471292,  0.08900674, -3.20397677, -2.10026568,
       -1.70780962,  2.2178684 ,  0.27683949,  3.11654479,  0.9375219 ,
        0.7936457 ,  2.50225099, -2.62326865,  3.70207953, -2.15124513,
       -1.1229965 ,  1.98721703, -2.74844657,  2.37524772, -3.26637353,
       -1.14138714, -1.62467595, -2.60802797, -1.21820334, -2.62828637,
        1.55997062, -2.19339882,  2.73753623, -3.11443924, -2.41069344,
       -2.46168325,  1.92909419,  1.75397256, -1.98832202, -1.38637137,
       -2.10271731,  3.19162649, -2.50853988, -1.02888015,  0.48975581,
        0.9720374 , -0.26087177,  0.64490431,  0.18791457, -1.34275574,
       -2.672225  ,  2.33236677,  1.6105011 ,  0.80300828,  2.19401671,
       -2.48482063, -0.29678156, -1.96846915,  0.88339753, -2.46850454,
        3.95968971,  2.29051537,  1.82415863,  3.51829087,  0.15303742,
       -2.61969831,  2.02363634,  2.38377041, -0.50666435, -0.92825735,
        0.28066192,  1.8742354 , -2.67112581, -2.49695977, -2.99214967,
       -1.93054319, -1.76212762,  0.74076945,  1.69629772,  1.74964506,
        1.15341626, -0.26446705, -3.63637166,  2.31812255, -3.25007182,
        0.9073501 , -2.83535332,  2.11405571,  2.23727667, -1.64419142,
        2.48291439,  2.79695096,  2.68567918,  1.30490199,  1.83172501,
       -1.90302439, -0.74813999, -1.16370903, -2.30157863, -1.93552106,
        0.17445961,  1.26435675, -2.70436098, -1.14710342, -2.41633707,
        3.22045935, -1.89447801, -2.09145649,  0.78754015,  3.04695396,
       -1.82769054,  2.19442042,  1.75763024, -2.48140073, -2.20751178,
        0.17238741, -3.27379462, -0.11239669, -0.73375239,  1.82206736,
        3.99158514,  0.80148542,  2.23674028, -3.38540083, -3.77628766,
       -0.10525869,  2.25291707, -3.30444478, -3.42724757, -2.13132597,
       -2.12736275,  0.8307258 ,  3.69024124,  1.18724871,  2.5190169 ,
       -0.82868561, -1.07815537, -0.95462123,  0.57029433, -2.97807429,
        0.7500662 , -2.5044225 ,  2.42840314, -0.83720092, -2.66100329,
       -2.48059279, -3.85028128, -1.88614995,  3.73855749,  1.99689001,
       -2.81182426, -3.73543159, -1.66047466,  1.45474323,  0.80813554,
        1.63602916,  2.86571743,  1.33517727, -2.88065774,  5.58572019,
       -4.74502333,  1.29667478,  1.36929873, -2.49460739,  0.29080801,
       -2.47562069,  1.61534623, -2.52402411,  2.45582995, -1.56154319,
        2.03129652, -3.01585995, -1.5297215 , -1.0195156 , -1.7131003 ,
       -2.59615637,  2.60532854, -2.20157498,  1.85629927,  2.59150385,
       -0.46356373,  0.07341942, -1.00596416,  1.74761468,  1.01465659,
        0.21826522,  0.35019272,  1.67955547, -1.89622723,  2.29292298,
       -2.90296705, -3.02734249,  2.48234542,  3.84277853, -1.68387751,
        1.7267113 ,  3.11590265,  2.30140878,  2.37913475, -2.08201717,
       -3.37087881,  1.25078745, -1.00087788, -1.34618202,  3.39772577,
       -0.14625693,  1.28916084,  3.26532416, -0.63819898, -1.12512998,
        2.39007046,  0.69950504,  4.09010078, -1.68351338, -1.02591595,
       -2.06569826, -0.85483203, -2.685811  , -0.48656254,  2.81734589,
       -1.76429037, -1.51297432,  1.6040372 ,  1.32337302, -2.09225276,
       -2.53655935, -3.13503797,  1.78008385, -0.64195038, -1.71396267,
        1.0855314 ,  1.46894342,  2.42423467,  3.06242606,  2.32511702,
       -0.88243976, -2.85318158, -1.04397234,  1.06693766,  4.22843172,
       -1.69190038,  2.15074003, -1.57391407,  2.63718835,  1.51778535,
        0.87769697, -4.40347323, -2.04430413, -2.45451245,  0.36202915,
        0.18089515, -2.55604149, -1.23949484,  1.00472809,  0.28232974,
       -1.88020642, -1.35048691,  2.76678397,  2.89562244,  0.25096141,
        2.47962908, -1.81600841,  2.24341657,  1.82088709,  4.11391205,
        1.17630087,  0.93460314,  1.77103306, -1.02941869,  1.97670905,
       -2.06410027,  1.67510127, -1.84531528,  4.26419125, -2.61923931,
        1.89249999,  1.254344  ,  2.7951597 ,  1.26491872,  2.29901675,
       -0.34385308, -2.50938631, -3.16923483,  2.58161826,  1.8045885 ,
        1.25875579, -2.00410287,  2.00936307,  2.43065445, -1.90294072,
       -0.3751544 ,  2.53098956,  1.88516827, -1.67406813,  1.30634494,
       -1.00617507,  1.86293443, -0.39868085,  0.51380432, -1.67534515,
       -1.27806808, -2.82166933,  2.28000854,  1.97108052, -2.12452803,
        2.70619351,  3.29632342,  3.02660417, -3.31359164,  1.57554327,
       -2.36076054, -2.19650802, -2.68379914, -1.57217388,  4.20222489,
       -1.05987345, -1.78654048,  2.20415063, -1.8109556 ,  0.64934408,
       -1.0986951 ,  2.16979668, -0.13115321,  3.20201513,  2.08761144,
        1.38082593,  2.41688577,  2.73067434,  1.27663815,  1.8196139 ,
        1.75333154, -2.1860724 , -2.61702307, -1.59969962,  1.78746527,
        2.32695441,  3.51749419,  1.02743835,  2.66378611,  2.12184015,
       -1.49894929,  1.18600137, -2.05893079, -2.95619666, -1.26062279,
        3.18246345,  0.60714042,  2.37633508,  1.24301244, -0.98236871,
        3.26249966,  2.9522302 , -2.25745135,  2.82343048,  2.76614017,
        2.237404  ,  1.58616101, -2.57840765,  2.19350167, -2.7147293 ,
       -0.24181903,  1.90984104, -0.96428664,  2.03753758, -3.11675387,
       -1.69961262,  4.30550846,  2.65260461,  3.49627004,  2.96808006,
       -2.07819807, -3.51724526,  1.97867134,  0.82953986, -2.85109731,
       -3.38509071, -2.35429514,  2.01809804,  2.24177916,  2.98577672,
        2.00857687, -2.20147518,  1.90084492, -1.89875807, -3.80435545,
        2.99183627,  1.02866717,  2.08215917,  0.43805629,  2.39183974,
        1.15658068,  1.5653827 , -2.27430526, -3.63979403, -1.17894937,
       -0.16150883,  0.03693039, -1.24652805, -2.38398181, -3.13560079,
       -1.53063019, -2.90727482, -2.9631607 ,  1.31088958, -3.0009716 ,
        0.96760173,  2.31126668, -3.25200267, -2.60335271,  1.49859328,
       -0.69964001,  1.59988602, -3.58447934, -1.4077824 , -3.27646244,
        0.014388  ,  1.27953233,  2.3853138 , -1.72853021, -0.49545538,
        2.18432821,  2.89930424,  0.4006655 ,  2.59033997, -3.32754023,
        2.7963438 , -1.153231  , -2.01288189, -0.94700149, -1.79194456,
        2.31985437,  2.2981544 ,  1.05709517, -0.55535359,  3.08553564,
        2.41575712, -1.33649421, -1.52582499, -1.44913525, -0.14460336,
       -2.3046071 ,  0.67398087, -4.20662611, -0.9870569 , -1.26186358,
       -1.29857929, -0.16516992,  4.42245117, -3.01048339, -2.23640039,
       -2.51964912,  0.30207504, -3.37506119,  3.13342801, -1.91564107,
        1.59157322, -1.55989493, -2.49973944, -2.00009411,  2.43701065,
       -3.59642057,  3.41202035, -1.32079007, -2.35341486,  0.17114109,
        2.18378029,  0.16401995,  3.16799724, -0.03943126, -2.60455036,
       -0.84818716,  1.97980574,  1.73236494,  0.35156553,  3.03293384,
       -2.47875456, -2.52311687, -1.76821001,  2.25665729, -0.89927174,
       -1.47000162, -3.20388242, -2.74323598,  3.7422658 , -1.79675128])

In [174]: data.dropna()
Out[174]:
      control  treatment
0    0.675131  -0.680471
1   -0.158436  -1.185001
2    0.604462  -0.258454
3   -0.120994  -1.133002
4    0.355281   1.664425
5    0.194463   2.606368
6    0.282314   0.672892
7    0.547550  -3.469806
8   -0.704686   2.890944
9    0.238139   1.526147
10  -0.095386  -4.138260
11  -0.209826  -3.075794
12   0.033797  -2.133857
13  -0.693067  -2.879965
14   0.431876   3.433639
15  -0.229841   1.396981
16   0.468202  -1.743603
17   0.398265   1.531077
18   0.603290   0.578797
19  -0.739247  -2.830136
20  -0.046773  -1.544687
21  -0.848418  -1.044272
22   0.122518  -2.629960
23   0.165342  -2.497478
24  -0.336212  -2.024508
25  -0.051565  -0.644201
26  -0.979861  -0.984379
27   0.179871  -1.025612
28   0.318007   1.228630
29  -0.307221  -0.961425
..        ...        ...
470 -0.587462   2.237404
471 -0.285950   1.586161
472  0.145952  -2.578408
473 -0.301988   2.193502
474  0.356650  -2.714729
475 -0.477447  -0.241819
476 -0.232522   1.909841
477 -0.490301  -0.964287
478  0.166339   2.037538
479 -0.733560  -3.116754
480  0.137015  -1.699613
481  0.697682   4.305508
482  0.173195   2.652605
483 -0.414560   3.496270
484  0.102598   2.968080
485  0.815781  -2.078198
486 -0.001914  -3.517245
487 -0.642785   1.978671
488  0.323793   0.829540
489  0.164089  -2.851097
490 -0.206874  -3.385091
491  0.713647  -2.354295
492  0.681114   2.018098
493  0.864658   2.241779
494 -0.572103   2.985777
495  0.650257   2.008577
496 -0.514232  -2.201475
497  0.681779   1.900845
498 -0.465943  -1.898758
499 -0.566754  -3.804355

[500 rows x 2 columns]

In [175]: data.values
Out[175]:
array([[ 0.67513098, -0.68047104],
       [-0.15843578, -1.18500127],
       [ 0.60446153, -0.25845383],
       ...,
       [        nan, -2.74323598],
       [        nan,  3.7422658 ],
       [        nan, -1.79675128]])

In [176]: np.isnan
Out[176]: <ufunc 'isnan'>

In [177]: data[1]
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/usr/local/lib/python3.5/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   3062             try:
-> 3063                 return self._engine.get_loc(key)
   3064             except KeyError:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 1

During handling of the above exception, another exception occurred:

KeyError                                  Traceback (most recent call last)
<ipython-input-177-c402bf503b75> in <module>()
----> 1 data[1]

/usr/local/lib/python3.5/dist-packages/pandas/core/frame.py in __getitem__(self, key)
   2683             return self._getitem_multilevel(key)
   2684         else:
-> 2685             return self._getitem_column(key)
   2686
   2687     def _getitem_column(self, key):

/usr/local/lib/python3.5/dist-packages/pandas/core/frame.py in _getitem_column(self, key)
   2690         # get column
   2691         if self.columns.is_unique:
-> 2692             return self._get_item_cache(key)
   2693
   2694         # duplicate columns & possible reduce dimensionality

/usr/local/lib/python3.5/dist-packages/pandas/core/generic.py in _get_item_cache(self, item)
   2484         res = cache.get(item)
   2485         if res is None:
-> 2486             values = self._data.get(item)
   2487             res = self._box_item_values(item, values)
   2488             cache[item] = res

/usr/local/lib/python3.5/dist-packages/pandas/core/internals.py in get(self, item, fastpath)
   4113
   4114             if not isna(item):
-> 4115                 loc = self.items.get_loc(item)
   4116             else:
   4117                 indexer = np.arange(len(self.items))[isna(self.items)]

/usr/local/lib/python3.5/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   3063                 return self._engine.get_loc(key)
   3064             except KeyError:
-> 3065                 return self._engine.get_loc(self._maybe_cast_indexer(key))
   3066
   3067         indexer = self.get_indexer([key], method=method, tolerance=tolerance)

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 1
> /home/mspacek/SciPyCourse2018/notes/10_stats/pandas/_libs/hashtable_class_helper.pxi(1500)pandas._libs.hashtable.PyObjectHashTable.get_item()

ipdb> c

In [178]: data
Out[178]:
      control  treatment
0    0.675131  -0.680471
1   -0.158436  -1.185001
2    0.604462  -0.258454
3   -0.120994  -1.133002
4    0.355281   1.664425
5    0.194463   2.606368
6    0.282314   0.672892
7    0.547550  -3.469806
8   -0.704686   2.890944
9    0.238139   1.526147
10  -0.095386  -4.138260
11  -0.209826  -3.075794
12   0.033797  -2.133857
13  -0.693067  -2.879965
14   0.431876   3.433639
15  -0.229841   1.396981
16   0.468202  -1.743603
17   0.398265   1.531077
18   0.603290   0.578797
19  -0.739247  -2.830136
20  -0.046773  -1.544687
21  -0.848418  -1.044272
22   0.122518  -2.629960
23   0.165342  -2.497478
24  -0.336212  -2.024508
25  -0.051565  -0.644201
26  -0.979861  -0.984379
27   0.179871  -1.025612
28   0.318007   1.228630
29  -0.307221  -0.961425
..        ...        ...
570       NaN   1.591573
571       NaN  -1.559895
572       NaN  -2.499739
573       NaN  -2.000094
574       NaN   2.437011
575       NaN  -3.596421
576       NaN   3.412020
577       NaN  -1.320790
578       NaN  -2.353415
579       NaN   0.171141
580       NaN   2.183780
581       NaN   0.164020
582       NaN   3.167997
583       NaN  -0.039431
584       NaN  -2.604550
585       NaN  -0.848187
586       NaN   1.979806
587       NaN   1.732365
588       NaN   0.351566
589       NaN   3.032934
590       NaN  -2.478755
591       NaN  -2.523117
592       NaN  -1.768210
593       NaN   2.256657
594       NaN  -0.899272
595       NaN  -1.470002
596       NaN  -3.203882
597       NaN  -2.743236
598       NaN   3.742266
599       NaN  -1.796751

[600 rows x 2 columns]

In [179]: control = data['control'].dropna().values

In [180]: treatment = data['treatment'].dropna().values

In [181]: f, ax = plt.subplots()

In [182]: ax.hist(control, bins=20, lable='control')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-182-f30596f60b4e> in <module>()
----> 1 ax.hist(control, bins=20, lable='control')

/usr/local/lib/python3.5/dist-packages/matplotlib/__init__.py in inner(ax, *args, **kwargs)
   1853                         "the Matplotlib list!)" % (label_namer, func.__name__),
   1854                         RuntimeWarning, stacklevel=2)
-> 1855             return func(ax, *args, **kwargs)
   1856
   1857         inner.__doc__ = _add_data_doc(inner.__doc__,

/usr/local/lib/python3.5/dist-packages/matplotlib/axes/_axes.py in hist(***failed resolving arguments***)
   6716             if patch:
   6717                 p = patch[0]
-> 6718                 p.update(kwargs)
   6719                 if lbl is not None:
   6720                     p.set_label(lbl)

/usr/local/lib/python3.5/dist-packages/matplotlib/artist.py in update(self, props)
    886         try:
    887             ret = [_update_property(self, k, v)
--> 888                    for k, v in props.items()]
    889         finally:
    890             self.eventson = store

/usr/local/lib/python3.5/dist-packages/matplotlib/artist.py in <listcomp>(.0)
    886         try:
    887             ret = [_update_property(self, k, v)
--> 888                    for k, v in props.items()]
    889         finally:
    890             self.eventson = store

/usr/local/lib/python3.5/dist-packages/matplotlib/artist.py in _update_property(self, k, v)
    879                 func = getattr(self, 'set_' + k, None)
    880                 if not callable(func):
--> 881                     raise AttributeError('Unknown property %s' % k)
    882                 return func(v)
    883

AttributeError: Unknown property lable
> /usr/local/lib/python3.5/dist-packages/matplotlib/artist.py(881)_update_property()
    879                 func = getattr(self, 'set_' + k, None)
    880                 if not callable(func):
--> 881                     raise AttributeError('Unknown property %s' % k)
    882                 return func(v)
    883

ipdb> c

In [183]: ax.hist(control, bins=20, label='control')
Out[183]:
(array([ 4.,  5.,  6., 11., 27., 35., 40., 49., 62., 52., 60., 38., 38.,
        29., 20., 10., 10.,  1.,  2.,  1.]),
 array([-1.37413998, -1.22528303, -1.07642608, -0.92756912, -0.77871217,
        -0.62985522, -0.48099826, -0.33214131, -0.18328436, -0.0344274 ,
         0.11442955,  0.2632865 ,  0.41214346,  0.56100041,  0.70985736,
         0.85871431,  1.00757127,  1.15642822,  1.30528517,  1.45414213,
         1.60299908]),
 <a list of 20 Patch objects>)

In [184]: f, ax = plt.subplots()

In [185]: ax.hist(control, bins=20, label='control')
Out[185]:
(array([ 4.,  5.,  6., 11., 27., 35., 40., 49., 62., 52., 60., 38., 38.,
        29., 20., 10., 10.,  1.,  2.,  1.]),
 array([-1.37413998, -1.22528303, -1.07642608, -0.92756912, -0.77871217,
        -0.62985522, -0.48099826, -0.33214131, -0.18328436, -0.0344274 ,
         0.11442955,  0.2632865 ,  0.41214346,  0.56100041,  0.70985736,
         0.85871431,  1.00757127,  1.15642822,  1.30528517,  1.45414213,
         1.60299908]),
 <a list of 20 Patch objects>)

In [186]: ax.hist(treatment, bins=20, label='treatment')
Out[186]:
(array([ 2., 10., 23., 34., 57., 62., 44., 42., 25., 25., 34., 37., 54.,
        65., 39., 26., 12.,  8.,  0.,  1.]),
 array([-4.74502333, -4.22848615, -3.71194898, -3.1954118 , -2.67887462,
        -2.16233745, -1.64580027, -1.1292631 , -0.61272592, -0.09618875,
         0.42034843,  0.93688561,  1.45342278,  1.96995996,  2.48649713,
         3.00303431,  3.51957149,  4.03610866,  4.55264584,  5.06918301,
         5.58572019]),
 <a list of 20 Patch objects>)

In [187]: ax.legend()
Out[187]: <matplotlib.legend.Legend at 0x7f8a167c24a8>

In [188]: treatment.mean()
Out[188]: -0.008446414205792034

In [189]: control.mean()
Out[189]: 0.008304453009214516

In [190]: control.std()
Out[190]: 0.5049476620857668

In [191]: treatment.std()
Out[191]: 2.208267926505711

In [192]: stats.ks_2samp?

In [193]: stats.ks_2samp(control, treatment)
Out[193]: Ks_2sampResult(statistic=0.40700000000000003, pvalue=2.861256320558687e-40)

In [194]: stats.mannwhitenyu(control, treatment)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-194-763ace35ff94> in <module>()
----> 1 stats.mannwhitenyu(control, treatment)

AttributeError: module 'scipy.stats' has no attribute 'mannwhitenyu'
> <ipython-input-194-763ace35ff94>(1)<module>()
----> 1 stats.mannwhitenyu(control, treatment)

ipdb> c

In [195]: stats.mannwhitneyu(control, treatment)
Out[195]: MannwhitneyuResult(statistic=148388.0, pvalue=0.3793602602168199)

In [196]: stats.ttest_ind?

In [197]: stats.ttest_ind(control, treatment)
Out[197]: Ttest_indResult(statistic=0.16588768337976612, pvalue=0.8682758794861365)

In [198]: stats.ttest_ind(control, treatment, equal_var=False)
Out[198]: Ttest_indResult(statistic=0.18008617816002173, pvalue=0.8571390941091492)

In [199]: stats.kstest?

In [200]: stats.kstest(control, 'norm')
Out[200]: KstestResult(statistic=0.16921647770174514, pvalue=5.511147094239277e-13)

In [201]: control.std()
Out[201]: 0.5049476620857668

In [202]: stats.kstest(control, 'norm', args=(control.mean(), control.std()))
Out[202]: KstestResult(statistic=0.026977077674807393, pvalue=0.8599828043741626)

In [203]: stats.kstest(treatment, 'norm', args=(treatment.mean(), treatment.std()))
Out[203]: KstestResult(statistic=0.09458846481437089, pvalue=4.010923227548702e-05)

In [204]:
