mspacek@Godel:~/SciPyCourse2018/notes/07_mpl_matrices$ cd ../homework3
mspacek@Godel:~/SciPyCourse2018/notes/homework3$ ls
distributions.png  homework3.md  homework3.npz  homework3.pdf  homework3_samples.py  homework3_solutions.py  student_solutions  t_absd.npz  time_series.png
mspacek@Godel:~/SciPyCourse2018/notes/homework3$ ipython
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.3.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: def absdiff(a, b):
   ...:     """Return the absolute difference between a and b"""
   ...:     a = np.asarray(a)
   ...:     b = np.asarray(b)
   ...:     return np.abs(a - b)
   ...:
   ...: # load data:
   ...: d = np.load('homework3.npz')
   ...: print(d.keys()) # check keys
   ...: t, x, y = d['t'], d['x'], d['y'] # extract arrays
   ...:
   ...:
['x', 'y', 't']

In [2]: d
Out[2]: <numpy.lib.npyio.NpzFile at 0x7efda919a630>

In [3]: d.keys()
Out[3]: ['x', 'y', 't']

In [4]: d
Out[4]: <numpy.lib.npyio.NpzFile at 0x7efda919a630>

In [5]: d['t']
Out[5]:
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,
        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,
        4.4,  4.5,  4.6,  4.7,  4.8,  4.9,  5. ,  5.1,  5.2,  5.3,  5.4,
        5.5,  5.6,  5.7,  5.8,  5.9,  6. ,  6.1,  6.2,  6.3,  6.4,  6.5,
        6.6,  6.7,  6.8,  6.9,  7. ,  7.1,  7.2,  7.3,  7.4,  7.5,  7.6,
        7.7,  7.8,  7.9,  8. ,  8.1,  8.2,  8.3,  8.4,  8.5,  8.6,  8.7,
        8.8,  8.9,  9. ,  9.1,  9.2,  9.3,  9.4,  9.5,  9.6,  9.7,  9.8,
        9.9, 10. , 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9,
       11. , 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12. ,
       12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13. , 13.1,
       13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14. , 14.1, 14.2,
       14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15. , 15.1, 15.2, 15.3,
       15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16. , 16.1, 16.2, 16.3, 16.4,
       16.5, 16.6, 16.7, 16.8, 16.9, 17. , 17.1, 17.2, 17.3, 17.4, 17.5,
       17.6, 17.7, 17.8, 17.9, 18. , 18.1, 18.2, 18.3, 18.4, 18.5, 18.6,
       18.7, 18.8, 18.9, 19. , 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7,
       19.8, 19.9, 20. , 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8,
       20.9, 21. , 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9,
       22. , 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23. ,
       23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24. , 24.1,
       24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25. , 25.1, 25.2,
       25.3, 25.4, 25.5, 25.6, 25.7, 25.8, 25.9, 26. , 26.1, 26.2, 26.3,
       26.4, 26.5, 26.6, 26.7, 26.8, 26.9, 27. , 27.1, 27.2, 27.3, 27.4,
       27.5, 27.6, 27.7, 27.8, 27.9, 28. , 28.1, 28.2, 28.3, 28.4, 28.5,
       28.6, 28.7, 28.8, 28.9, 29. , 29.1, 29.2, 29.3, 29.4, 29.5, 29.6,
       29.7, 29.8, 29.9, 30. , 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.7,
       30.8, 30.9, 31. , 31.1, 31.2, 31.3, 31.4, 31.5, 31.6, 31.7, 31.8,
       31.9, 32. , 32.1, 32.2, 32.3, 32.4, 32.5, 32.6, 32.7, 32.8, 32.9,
       33. , 33.1, 33.2, 33.3, 33.4, 33.5, 33.6, 33.7, 33.8, 33.9, 34. ,
       34.1, 34.2, 34.3, 34.4, 34.5, 34.6, 34.7, 34.8, 34.9, 35. , 35.1,
       35.2, 35.3, 35.4, 35.5, 35.6, 35.7, 35.8, 35.9, 36. , 36.1, 36.2,
       36.3, 36.4, 36.5, 36.6, 36.7, 36.8, 36.9, 37. , 37.1, 37.2, 37.3,
       37.4, 37.5, 37.6, 37.7, 37.8, 37.9, 38. , 38.1, 38.2, 38.3, 38.4,
       38.5, 38.6, 38.7, 38.8, 38.9, 39. , 39.1, 39.2, 39.3, 39.4, 39.5,
       39.6, 39.7, 39.8, 39.9, 40. , 40.1, 40.2, 40.3, 40.4, 40.5, 40.6,
       40.7, 40.8, 40.9, 41. , 41.1, 41.2, 41.3, 41.4, 41.5, 41.6, 41.7,
       41.8, 41.9, 42. , 42.1, 42.2, 42.3, 42.4, 42.5, 42.6, 42.7, 42.8,
       42.9, 43. , 43.1, 43.2, 43.3, 43.4, 43.5, 43.6, 43.7, 43.8, 43.9,
       44. , 44.1, 44.2, 44.3, 44.4, 44.5, 44.6, 44.7, 44.8, 44.9, 45. ,
       45.1, 45.2, 45.3, 45.4, 45.5, 45.6, 45.7, 45.8, 45.9, 46. , 46.1,
       46.2, 46.3, 46.4, 46.5, 46.6, 46.7, 46.8, 46.9, 47. , 47.1, 47.2,
       47.3, 47.4, 47.5, 47.6, 47.7, 47.8, 47.9, 48. , 48.1, 48.2, 48.3,
       48.4, 48.5, 48.6, 48.7, 48.8, 48.9, 49. , 49.1, 49.2, 49.3, 49.4,
       49.5, 49.6, 49.7, 49.8, 49.9, 50. , 50.1, 50.2, 50.3, 50.4, 50.5,
       50.6, 50.7, 50.8, 50.9, 51. , 51.1, 51.2, 51.3, 51.4, 51.5, 51.6,
       51.7, 51.8, 51.9, 52. , 52.1, 52.2, 52.3, 52.4, 52.5, 52.6, 52.7,
       52.8, 52.9, 53. , 53.1, 53.2, 53.3, 53.4, 53.5, 53.6, 53.7, 53.8,
       53.9, 54. , 54.1, 54.2, 54.3, 54.4, 54.5, 54.6, 54.7, 54.8, 54.9,
       55. , 55.1, 55.2, 55.3, 55.4, 55.5, 55.6, 55.7, 55.8, 55.9, 56. ,
       56.1, 56.2, 56.3, 56.4, 56.5, 56.6, 56.7, 56.8, 56.9, 57. , 57.1,
       57.2, 57.3, 57.4, 57.5, 57.6, 57.7, 57.8, 57.9, 58. , 58.1, 58.2,
       58.3, 58.4, 58.5, 58.6, 58.7, 58.8, 58.9, 59. , 59.1, 59.2, 59.3,
       59.4, 59.5, 59.6, 59.7, 59.8, 59.9, 60. , 60.1, 60.2, 60.3, 60.4,
       60.5, 60.6, 60.7, 60.8, 60.9, 61. , 61.1, 61.2, 61.3, 61.4, 61.5,
       61.6, 61.7, 61.8, 61.9, 62. , 62.1, 62.2, 62.3, 62.4, 62.5, 62.6,
       62.7, 62.8, 62.9, 63. , 63.1, 63.2, 63.3, 63.4, 63.5, 63.6, 63.7,
       63.8, 63.9, 64. , 64.1, 64.2, 64.3, 64.4, 64.5, 64.6, 64.7, 64.8,
       64.9, 65. , 65.1, 65.2, 65.3, 65.4, 65.5, 65.6, 65.7, 65.8, 65.9,
       66. , 66.1, 66.2, 66.3, 66.4, 66.5, 66.6, 66.7, 66.8, 66.9, 67. ,
       67.1, 67.2, 67.3, 67.4, 67.5, 67.6, 67.7, 67.8, 67.9, 68. , 68.1,
       68.2, 68.3, 68.4, 68.5, 68.6, 68.7, 68.8, 68.9, 69. , 69.1, 69.2,
       69.3, 69.4, 69.5, 69.6, 69.7, 69.8, 69.9, 70. , 70.1, 70.2, 70.3,
       70.4, 70.5, 70.6, 70.7, 70.8, 70.9, 71. , 71.1, 71.2, 71.3, 71.4,
       71.5, 71.6, 71.7, 71.8, 71.9, 72. , 72.1, 72.2, 72.3, 72.4, 72.5,
       72.6, 72.7, 72.8, 72.9, 73. , 73.1, 73.2, 73.3, 73.4, 73.5, 73.6,
       73.7, 73.8, 73.9, 74. , 74.1, 74.2, 74.3, 74.4, 74.5, 74.6, 74.7,
       74.8, 74.9, 75. , 75.1, 75.2, 75.3, 75.4, 75.5, 75.6, 75.7, 75.8,
       75.9, 76. , 76.1, 76.2, 76.3, 76.4, 76.5, 76.6, 76.7, 76.8, 76.9,
       77. , 77.1, 77.2, 77.3, 77.4, 77.5, 77.6, 77.7, 77.8, 77.9, 78. ,
       78.1, 78.2, 78.3, 78.4, 78.5, 78.6, 78.7, 78.8, 78.9, 79. , 79.1,
       79.2, 79.3, 79.4, 79.5, 79.6, 79.7, 79.8, 79.9, 80. , 80.1, 80.2,
       80.3, 80.4, 80.5, 80.6, 80.7, 80.8, 80.9, 81. , 81.1, 81.2, 81.3,
       81.4, 81.5, 81.6, 81.7, 81.8, 81.9, 82. , 82.1, 82.2, 82.3, 82.4,
       82.5, 82.6, 82.7, 82.8, 82.9, 83. , 83.1, 83.2, 83.3, 83.4, 83.5,
       83.6, 83.7, 83.8, 83.9, 84. , 84.1, 84.2, 84.3, 84.4, 84.5, 84.6,
       84.7, 84.8, 84.9, 85. , 85.1, 85.2, 85.3, 85.4, 85.5, 85.6, 85.7,
       85.8, 85.9, 86. , 86.1, 86.2, 86.3, 86.4, 86.5, 86.6, 86.7, 86.8,
       86.9, 87. , 87.1, 87.2, 87.3, 87.4, 87.5, 87.6, 87.7, 87.8, 87.9,
       88. , 88.1, 88.2, 88.3, 88.4, 88.5, 88.6, 88.7, 88.8, 88.9, 89. ,
       89.1, 89.2, 89.3, 89.4, 89.5, 89.6, 89.7, 89.8, 89.9, 90. , 90.1,
       90.2, 90.3, 90.4, 90.5, 90.6, 90.7, 90.8, 90.9, 91. , 91.1, 91.2,
       91.3, 91.4, 91.5, 91.6, 91.7, 91.8, 91.9, 92. , 92.1, 92.2, 92.3,
       92.4, 92.5, 92.6, 92.7, 92.8, 92.9, 93. , 93.1, 93.2, 93.3, 93.4,
       93.5, 93.6, 93.7, 93.8, 93.9, 94. , 94.1, 94.2, 94.3, 94.4, 94.5,
       94.6, 94.7, 94.8, 94.9, 95. , 95.1, 95.2, 95.3, 95.4, 95.5, 95.6,
       95.7, 95.8, 95.9, 96. , 96.1, 96.2, 96.3, 96.4, 96.5, 96.6, 96.7,
       96.8, 96.9, 97. , 97.1, 97.2, 97.3, 97.4, 97.5, 97.6, 97.7, 97.8,
       97.9, 98. , 98.1, 98.2, 98.3, 98.4, 98.5, 98.6, 98.7, 98.8, 98.9,
       99. , 99.1, 99.2, 99.3, 99.4, 99.5, 99.6, 99.7, 99.8, 99.9])

In [6]: d['x']
Out[6]:
array([5.97720809, 4.93225511, 4.53653831, 4.72877279, 4.79555111,
       4.95770052, 5.07023003, 4.97147351, 5.81370369, 5.39769879,
       5.3225134 , 4.96127478, 4.63088343, 4.91556619, 5.20872358,
       4.62401247, 5.3349522 , 5.23001391, 4.64662315, 4.71762189,
       5.08745158, 5.09539204, 5.62481455, 4.54969938, 4.63300426,
       4.15118567, 4.9548806 , 4.53212378, 5.60732448, 5.39446036,
       5.40070867, 5.77731821, 4.38602299, 4.86062256, 4.77067037,
       5.08133841, 4.80302451, 5.01964856, 4.85993925, 4.20360162,
       4.78779065, 5.34521021, 4.6788244 , 5.46582567, 5.44110856,
       5.32481008, 4.95827852, 5.40668747, 4.31449216, 4.30395804,
       4.6344217 , 6.18740319, 5.60272387, 5.53963972, 4.77420583,
       4.81944844, 5.03226404, 5.60043086, 4.71509835, 4.76796675,
       4.3387638 , 5.69219853, 4.85453436, 5.59658402, 5.37820123,
       5.65782339, 5.37742072, 5.57460115, 6.42617629, 5.19397859,
       5.16973561, 5.20376779, 4.86864064, 4.88671502, 3.82363192,
       4.67146577, 4.88539451, 5.43642799, 4.7570628 , 5.95803911,
       5.2901451 , 4.88531649, 5.13319302, 4.09783419, 4.61454542,
       5.04699472, 5.35222057, 4.884971  , 4.78555452, 5.39374673,
       4.55785953, 4.83694783, 4.17003524, 5.61187803, 5.12853262,
       4.97955568, 5.40132947, 3.82803132, 4.16530624, 5.44963616,
       4.55062747, 5.17230654, 5.76061473, 4.29542606, 4.31821391,
       5.88677861, 5.27338774, 6.22386945, 4.69095183, 5.34722299,
       5.87054601, 4.66411235, 4.75079763, 4.71902162, 5.54518939,
       4.94611842, 5.10751087, 5.73803673, 5.21454934, 6.04185188,
       4.63080781, 4.99324245, 5.13042331, 5.63977363, 4.49227395,
       4.73187683, 4.80625465, 4.94444207, 4.3497088 , 4.82902516,
       4.48505345, 5.56158942, 5.99354987, 4.8587643 , 4.87481539,
       4.34269085, 5.33976912, 5.00928102, 5.42944604, 4.90591422,
       6.179846  , 5.65591912, 5.25123826, 4.7274054 , 4.28364184,
       4.83472097, 4.54660761, 4.72041889, 5.17107722, 5.83903243,
       5.0942667 , 4.69583982, 5.23680268, 5.31585453, 4.30676661,
       4.66100715, 4.15394587, 4.54806078, 4.94543873, 4.89792125,
       4.96035986, 5.00464325, 4.47131726, 4.14345987, 5.3569933 ,
       3.69693127, 4.09113966, 5.12811493, 4.80608583, 4.43209254,
       4.75453079, 5.7506036 , 5.55576444, 4.46282389, 5.51080667,
       4.87982569, 5.02132371, 5.47021132, 4.29614864, 5.01077753,
       5.01677146, 5.71300145, 4.73185011, 5.11558516, 4.19164352,
       5.54309952, 5.65864863, 4.89780298, 4.26831273, 4.69482922,
       5.48515858, 5.08286061, 5.20265243, 5.34949277, 4.12610621,
       4.58885325, 4.93345002, 4.85933845, 5.3160155 , 3.96197479,
       4.42678031, 5.12199732, 4.69527736, 5.0026865 , 5.05321523,
       4.82208697, 4.47317779, 4.67687931, 5.49666723, 4.82436136,
       4.42392634, 3.96632846, 4.69779174, 5.33214714, 3.82103885,
       4.79618141, 4.03679116, 5.07106388, 4.74301543, 4.83862803,
       4.52557047, 4.18529743, 4.85357581, 6.0533872 , 4.90926759,
       5.26669804, 5.03776659, 5.26228037, 4.66049253, 5.90216875,
       5.39830657, 4.77140543, 4.15387504, 5.69774195, 4.06571765,
       4.71206134, 5.37796812, 4.69674455, 4.87445034, 5.27137842,
       4.27622835, 4.45461959, 5.2347349 , 4.31217774, 4.46573093,
       5.16200383, 4.31700271, 4.80328744, 4.62771095, 4.88889235,
       4.89870939, 6.09941076, 5.393329  , 4.5307252 , 5.38406551,
       4.46848757, 4.50698681, 5.11554907, 5.69907529, 5.32609316,
       5.53631   , 4.32837913, 4.40966856, 4.93114419, 4.64308355,
       4.96867132, 3.87130847, 5.28004147, 5.43447018, 5.51079922,
       4.4333353 , 5.5790092 , 5.23013662, 4.13051602, 4.79358339,
       5.01813967, 4.92566664, 4.7229612 , 5.34783083, 4.55861982,
       5.66237303, 5.60787474, 5.48201914, 5.18864157, 5.55871638,
       4.94185618, 4.35204532, 4.70567151, 5.04184266, 5.10959608,
       5.11669026, 5.1166736 , 5.26189509, 5.32095121, 5.4824651 ,
       4.83793225, 4.89996758, 4.78783323, 4.1732444 , 4.31069912,
       5.3206533 , 4.89040475, 4.92332047, 5.69822767, 4.31236905,
       5.09561395, 4.72964416, 4.47058902, 4.27030709, 4.97746268,
       5.51599163, 4.87815057, 5.21707915, 4.37851734, 4.82877573,
       4.3072931 , 4.68192027, 5.98901669, 5.64440944, 4.69136274,
       4.95042821, 3.21444686, 4.98865904, 5.63050678, 5.83481182,
       5.12037132, 5.46740487, 4.81000027, 5.04693991, 4.20068701,
       5.01150121, 5.12614854, 5.29705975, 4.90745308, 5.6998257 ,
       4.80841284, 3.72972619, 5.25829361, 5.54538068, 4.70348672,
       4.59436825, 4.4942747 , 5.36577161, 4.81523268, 6.11251105,
       4.67965462, 4.52006488, 4.92845974, 5.06206803, 4.55087451,
       5.21338608, 4.93981116, 5.66552745, 4.60435757, 4.51136171,
       4.23095038, 4.80444804, 4.03224221, 5.081899  , 4.90235608,
       4.39916998, 5.36536478, 5.24644153, 4.72699428, 6.0105375 ,
       4.79043954, 4.66703881, 6.08758015, 4.38070056, 5.39262118,
       5.13829811, 5.23253004, 5.04870797, 5.33805843, 5.69687832,
       5.03705616, 4.9765161 , 4.75640306, 5.2442568 , 4.04045915,
       4.26364843, 5.29397818, 5.23158317, 4.74411781, 4.62016274,
       5.04874916, 5.84872499, 5.2763602 , 5.48898689, 4.30061752,
       4.80235369, 5.38127373, 4.5581032 , 4.80098217, 5.72272174,
       4.92786685, 4.16216064, 4.82383374, 5.12158286, 4.43543083,
       4.80376117, 6.29077771, 5.50097534, 5.66056404, 4.71854669,
       5.05587168, 5.7491547 , 4.73131592, 5.23169719, 4.69726415,
       4.33212856, 4.09895628, 4.4785268 , 5.51778912, 4.74060145,
       5.25164972, 5.42982495, 6.2964896 , 4.38535383, 5.44033331,
       5.42455682, 5.4619895 , 4.39773275, 5.56152736, 4.77558724,
       4.69939811, 5.1415539 , 4.53056536, 5.54040587, 5.23678855,
       4.62597872, 5.24957161, 5.47860903, 5.9567562 , 4.76365184,
       4.91735268, 3.97508567, 4.90684588, 4.90558095, 4.58851585,
       4.48955242, 5.92987441, 4.79703405, 4.49062579, 5.56130986,
       5.0684113 , 4.88489083, 5.38387015, 5.32866701, 4.7049876 ,
       5.41160454, 3.46478033, 4.89704403, 4.57884568, 5.21940491,
       4.61955815, 4.86537464, 4.66841488, 5.24081542, 5.28927491,
       5.60536375, 5.06649879, 5.05661636, 4.43441823, 3.94971826,
       4.86704027, 4.62707878, 5.76902277, 5.58577247, 4.30928282,
       4.56141517, 5.12730712, 4.05155361, 6.15585576, 5.19191805,
       4.82732906, 4.81647514, 5.83980932, 5.46082474, 4.94389309,
       5.31865915, 5.22744178, 5.26862687, 5.43400193, 5.29151276,
       5.05748105, 5.62890808, 5.12550073, 4.97318397, 4.74674181,
       5.14668115, 4.1335176 , 4.94458461, 4.82944038, 4.74261855,
       6.08142632, 4.92564328, 4.5318419 , 4.13151945, 5.12779033,
       5.30905366, 4.94321372, 5.11786129, 4.54608179, 4.11442798,
       4.4476448 , 5.1142065 , 5.4035016 , 4.78907477, 5.6671553 ,
       4.86922366, 4.94005793, 4.91460503, 5.2737961 , 4.14816238,
       4.62651525, 4.3246109 , 4.69732067, 5.75102999, 5.16736958,
       5.48437026, 4.61403361, 4.8667516 , 5.1340279 , 5.36059283,
       4.41651091, 5.09002407, 5.17202996, 5.11474946, 4.50315992,
       5.3496591 , 5.02685758, 5.64062581, 4.83159491, 4.83986189,
       5.35923339, 5.02718368, 5.17935628, 4.26295827, 6.04434149,
       5.38423554, 4.81456283, 4.95309538, 4.9531372 , 5.55562649,
       4.54422227, 3.77347764, 4.97135943, 5.28123752, 5.00452487,
       5.71601149, 4.98698237, 5.37628757, 5.7447278 , 5.49065722,
       3.86310756, 4.7010302 , 3.6353408 , 5.27381248, 4.84280545,
       5.65286061, 4.68556129, 3.88111464, 4.5760176 , 5.22629204,
       5.84957448, 4.76141854, 5.0854159 , 5.10753564, 4.65765611,
       5.01291826, 5.0579563 , 4.79572276, 4.70640467, 5.20264187,
       5.26521885, 5.07236289, 4.8878632 , 4.94872563, 4.02005425,
       4.11826075, 4.6729749 , 4.74804742, 4.92937067, 4.81687084,
       5.44783136, 4.87304066, 5.29493463, 5.03602741, 4.87577733,
       4.90167305, 5.76110407, 5.08037932, 5.64884993, 4.98410283,
       5.18784769, 5.14522735, 4.63149863, 5.61888518, 4.44722477,
       5.12125549, 5.02013672, 5.86709601, 4.88958135, 4.88613471,
       4.9436743 , 5.51185774, 5.32545952, 5.02982717, 4.01865828,
       5.24464934, 5.86444847, 5.41038143, 5.55773923, 4.93689693,
       5.2126243 , 4.92146515, 3.77911765, 5.43208301, 5.19182347,
       5.27167433, 4.29116549, 4.56904256, 6.16837841, 5.3741809 ,
       5.33911114, 6.12365015, 4.96711685, 4.82346517, 4.58351415,
       5.69959154, 4.79787158, 5.70201166, 5.77687109, 5.18432579,
       4.06765991, 5.03011272, 4.64628608, 5.14580141, 5.77407412,
       5.18860982, 4.83877853, 5.37678476, 4.8963875 , 4.71822018,
       5.15617442, 4.95442563, 4.79721957, 5.49335232, 4.7882745 ,
       4.61055575, 5.356895  , 5.13081828, 5.1073388 , 4.99364486,
       4.97641816, 3.83860746, 5.15145979, 4.78681569, 4.49803437,
       4.97903705, 4.72553858, 4.83202506, 4.90588006, 5.08474191,
       5.81614926, 5.15179477, 5.61558447, 5.17908298, 5.57440008,
       4.59995972, 4.73095548, 4.94132771, 4.82915254, 5.48244715,
       4.65527186, 4.8192741 , 5.22446853, 5.15864679, 5.21180374,
       5.14738551, 4.77111321, 4.62988951, 5.14350843, 4.60160743,
       5.57386477, 4.08081733, 4.56031874, 5.17917948, 5.47436467,
       5.21614843, 5.32863337, 4.94806018, 3.78213727, 4.87635968,
       5.42974107, 4.8019637 , 4.19600893, 5.24520439, 4.88736487,
       5.59060906, 5.27228046, 4.75061192, 5.77284417, 5.60124471,
       4.51550459, 4.40020892, 5.18342219, 5.17462327, 5.13778149,
       4.68357699, 5.61101298, 5.06174261, 5.22575315, 4.48866978,
       5.76116346, 4.92279308, 5.84473517, 5.44255503, 5.13414165,
       5.52147871, 5.42064482, 4.6828712 , 4.62855108, 5.22395999,
       5.12563472, 4.90319739, 4.86276285, 4.50506986, 4.5557004 ,
       4.77323329, 5.28445431, 4.79085796, 5.17944377, 5.30724148,
       5.80913707, 5.1146495 , 4.73991101, 4.68752837, 4.23189011,
       4.88893326, 5.05209755, 4.4322214 , 5.07826166, 4.9082543 ,
       4.4999338 , 6.10063946, 6.3753045 , 4.86647818, 4.58857561,
       5.55019374, 4.43530647, 4.53819905, 5.36863821, 5.49464399,
       5.93709303, 5.35872877, 4.784803  , 5.06608798, 5.15580935,
       4.90593281, 4.90245825, 4.69733993, 5.06376424, 4.24451434,
       5.82794391, 5.46638048, 5.51596393, 4.57211207, 4.58884534,
       5.54202315, 4.75025241, 5.13385731, 4.91140938, 4.97004436,
       5.42366743, 5.35812324, 5.95319478, 5.04524106, 4.99847424,
       5.34661254, 4.84405506, 4.93784344, 4.43592461, 5.57189118,
       5.73825696, 3.74068674, 4.68990113, 4.67607719, 6.07090873,
       4.56398398, 5.30339835, 4.91073805, 5.28612911, 4.73062739,
       5.57663677, 5.47500626, 5.49138545, 5.05700349, 4.60085738,
       4.39502613, 5.09843343, 5.21703061, 5.51253218, 4.75034426,
       5.25833137, 5.12203799, 5.23950318, 4.72086672, 5.87465154,
       5.86185695, 4.50270078, 5.00653526, 4.30492989, 4.13360327,
       5.97047341, 5.2292783 , 5.56512105, 4.72228606, 5.04898874,
       4.77401791, 4.91217627, 5.09702052, 4.97392161, 5.07545308,
       5.12057922, 4.84474544, 4.68345088, 5.2195851 , 4.91695423,
       5.15000257, 5.18708351, 4.8124278 , 4.41482545, 5.1665821 ,
       5.60375792, 4.58083537, 5.90299339, 3.9424469 , 5.72007944,
       6.10583483, 4.93852133, 5.42925593, 5.32140716, 4.93800597,
       5.52028532, 4.61253716, 4.54842237, 5.04448081, 4.8217461 ,
       4.95714755, 5.58987729, 4.80558286, 5.44413226, 4.83355092,
       4.83831898, 5.43767227, 5.0141016 , 5.14367671, 5.66718843,
       4.33037086, 5.16085294, 5.47977277, 5.24952627, 5.66026375,
       5.26720732, 4.59196321, 4.53569291, 4.51061961, 5.2767891 ,
       5.4522676 , 4.75399257, 4.72675589, 6.13184424, 5.29737431,
       4.53143245, 5.23561444, 5.64936456, 5.81960036, 4.89259698,
       4.62495553, 4.63502785, 4.88626121, 4.13328129, 5.48916745,
       4.60977603, 5.39092531, 5.88258411, 4.36027372, 4.08685332,
       5.19697604, 4.44430768, 4.50255701, 4.82842674, 6.19027536,
       4.13409026, 4.51955979, 5.48133003, 4.24892715, 5.07917957,
       5.04319746, 5.03451679, 5.11165327, 4.93920246, 4.85089151,
       5.23286803, 5.10378932, 5.59832199, 4.98327139, 5.25984973,
       3.94699704, 4.39669785, 4.98314865, 5.50404165, 5.57598664,
       4.99363157, 5.37428872, 4.38552277, 5.35765812, 4.69795734,
       4.41581103, 4.67204691, 4.74838288, 4.61682322, 4.72975357,
       5.27538784, 4.94912525, 6.08577517, 4.79468582, 4.69328167,
       4.10645716, 4.23999526, 5.23494082, 5.30621248, 4.85277092,
       4.51130808, 5.33967266, 4.77796039, 4.83048635, 4.39618976,
       5.28344824, 4.8531863 , 3.76212578, 4.56134976, 4.9553342 ,
       5.45356837, 4.69447292, 4.85897795, 5.09525621, 4.04567537,
       4.31619686, 4.62182192, 4.98372009, 4.66280055, 5.55184276,
       5.58542667, 5.12837895, 5.6352305 , 5.0068651 , 5.92986865,
       4.84132487, 4.37871448, 4.94109576, 4.38400587, 5.38547639,
       3.98961449, 4.57365239, 5.18123581, 4.94137684, 4.65482126,
       5.01570158, 4.78750207, 4.70744228, 5.05998906, 4.95564408,
       4.97332406, 4.72991092, 4.65107406, 5.41754047, 5.4224919 ,
       4.86826493, 5.30136114, 5.79306267, 5.40899426, 4.64462139,
       4.30038502, 4.89387256, 5.042943  , 5.11213599, 5.15795289,
       4.99434905, 4.96418971, 5.39463606, 4.60394453, 4.4279875 ,
       5.25702072, 4.50368079, 4.67856753, 5.07787019, 4.87935461])

In [7]: # plot time series:
   ...: plt.figure()
   ...: plt.plot(t, x, marker='', label='x')
   ...: plt.plot(t, y, marker='', label='y')
   ...: plt.plot(t, absd, marker='', label='absd')
   ...: plt.xlabel('Time (s)')
   ...: plt.ylabel('Position (cm)')
   ...: plt.title('Time series')
   ...: plt.legend()
   ...:
   ...:
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-7-aedc6fdc7b15> in <module>()
      3 plt.plot(t, x, marker='', label='x')
      4 plt.plot(t, y, marker='', label='y')
----> 5 plt.plot(t, absd, marker='', label='absd')
      6 plt.xlabel('Time (s)')
      7 plt.ylabel('Position (cm)')

NameError: name 'absd' is not defined
> <ipython-input-7-aedc6fdc7b15>(5)<module>()
      3 plt.plot(t, x, marker='', label='x')
      4 plt.plot(t, y, marker='', label='y')
----> 5 plt.plot(t, absd, marker='', label='absd')
      6 plt.xlabel('Time (s)')
      7 plt.ylabel('Position (cm)')

ipdb> c

In [8]: def absdiff(a, b):
   ...:     """Return the absolute difference between a and b"""
   ...:     a = np.asarray(a)
   ...:     b = np.asarray(b)
   ...:     return np.abs(a - b)
   ...:
   ...: # load data:
   ...: d = np.load('homework3.npz')
   ...: print(d.keys()) # check keys
   ...: t, x, y = d['t'], d['x'], d['y'] # extract arrays
   ...:
   ...: absd = absdiff(x, y)
   ...:
   ...: # plot time series:
   ...: plt.figure()
   ...: plt.plot(t, x, marker='', label='x')
   ...: plt.plot(t, y, marker='', label='y')
   ...: plt.plot(t, absd, marker='', label='absd')
   ...: plt.xlabel('Time (s)')
   ...: plt.ylabel('Position (cm)')
   ...: plt.title('Time series')
   ...: plt.legend()
   ...:
   ...:
['x', 'y', 't']
Out[8]: <matplotlib.legend.Legend at 0x7efd9dfd0b38>

In [9]: plt.figure()
   ...: bins = np.arange(0, 7.5, 0.1)
   ...: plt.hist(x, bins=bins, label='x')
   ...: plt.hist(y, bins=bins, label='y')
   ...: plt.hist(absd, bins=bins, label='absd')
   ...: plt.xlabel('Position (cm)')
   ...: plt.title('Distributions')
   ...: plt.legend()
   ...:
   ...:
Out[9]: <matplotlib.legend.Legend at 0x7efd9dc15f28>

In [10]: plt.hist?

In [11]: d = np.load('homework3.npz')

In [12]: d
Out[12]: <numpy.lib.npyio.NpzFile at 0x7efd9df690f0>

In [13]: d.keys()
Out[13]: ['x', 'y', 't']

In [14]: for k in d.keys():
    ...:     d[k]
    ...:

In [15]: plt.figure()
Out[15]: <Figure size 700x700 with 0 Axes>

In [16]: plt.hist(x, bins=30)
    ...: plt.hist(y, bins=30)
    ...: plt.hist(absd, bins=30)
    ...:
    ...:
Out[16]:
(array([ 1.,  0.,  0.,  5.,  1.,  7., 13., 15., 20., 35., 45., 53., 70.,
        78., 89., 84., 94., 89., 77., 62., 44., 34., 34., 22., 11.,  7.,
         5.,  1.,  2.,  2.]),
 array([0.02068179, 0.14548422, 0.27028664, 0.39508907, 0.5198915 ,
        0.64469393, 0.76949635, 0.89429878, 1.01910121, 1.14390363,
        1.26870606, 1.39350849, 1.51831092, 1.64311334, 1.76791577,
        1.8927182 , 2.01752062, 2.14232305, 2.26712548, 2.39192791,
        2.51673033, 2.64153276, 2.76633519, 2.89113761, 3.01594004,
        3.14074247, 3.2655449 , 3.39034732, 3.51514975, 3.63995218,
        3.7647546 ]),
 <a list of 30 Patch objects>)

In [17]: plt.hist?

In [18]: plt.figure()
    ...: bins = np.arange(0, 7.5, 0.1)
    ...: plt.hist(x, bins=bins, label='x')
    ...: plt.hist(y, bins=bins, label='y')
    ...: plt.hist(absd, bins=bins, label='absd')
    ...:
    ...:
Out[18]:
(array([ 1.,  0.,  0.,  0.,  5.,  0.,  2., 10.,  9., 11., 17., 24., 29.,
        36., 44., 57., 47., 70., 79., 62., 74., 78., 66., 59., 49., 46.,
        27., 23., 25., 19.,  8., 10.,  4.,  4.,  1.,  2.,  1.,  1.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
 array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
        1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
        2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
        3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
        5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
        6.5, 6.6, 6.7, 6.8, 6.9, 7. , 7.1, 7.2, 7.3, 7.4]),
 <a list of 74 Patch objects>)

In [19]: plt.legend(loc=2, ncol=2)
Out[19]: <matplotlib.legend.Legend at 0x7efda8deee10>

In [20]: plt.legend?

In [21]: np.savez('stringy_t_absd.npz', t = 't', absd = 'absd')
    ...:

In [22]: np.savez('default_t_absd.npz', t, absd)
    ...:

In [23]: import matplotlib.pyplot as plt

In [24]: t = np.linspace(0, 4*np.pi, 100)

In [25]: t
Out[25]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [26]: s = np.sin(t)

In [27]: c = np.cost(t)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-27-a5b86d016e44> in <module>()
----> 1 c = np.cost(t)

AttributeError: module 'numpy' has no attribute 'cost'
> <ipython-input-27-a5b86d016e44>(1)<module>()
----> 1 c = np.cost(t)

ipdb> c

In [28]: c = np.cos(t)

In [29]: t
Out[29]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [30]: s
Out[30]:
array([ 0.00000000e+00,  1.26592454e-01,  2.51147987e-01,  3.71662456e-01,
        4.86196736e-01,  5.92907929e-01,  6.90079011e-01,  7.76146464e-01,
        8.49725430e-01,  9.09631995e-01,  9.54902241e-01,  9.84807753e-01,
        9.98867339e-01,  9.96854776e-01,  9.78802446e-01,  9.45000819e-01,
        8.95993774e-01,  8.32569855e-01,  7.55749574e-01,  6.66769001e-01,
        5.67059864e-01,  4.58226522e-01,  3.42020143e-01,  2.20310533e-01,
        9.50560433e-02, -3.17279335e-02, -1.58001396e-01, -2.81732557e-01,
       -4.00930535e-01, -5.13677392e-01, -6.18158986e-01, -7.12694171e-01,
       -7.95761841e-01, -8.66025404e-01, -9.22354294e-01, -9.63842159e-01,
       -9.89821442e-01, -9.99874128e-01, -9.93838464e-01, -9.71811568e-01,
       -9.34147860e-01, -8.81453363e-01, -8.14575952e-01, -7.34591709e-01,
       -6.42787610e-01, -5.40640817e-01, -4.29794912e-01, -3.12033446e-01,
       -1.89251244e-01, -6.34239197e-02,  6.34239197e-02,  1.89251244e-01,
        3.12033446e-01,  4.29794912e-01,  5.40640817e-01,  6.42787610e-01,
        7.34591709e-01,  8.14575952e-01,  8.81453363e-01,  9.34147860e-01,
        9.71811568e-01,  9.93838464e-01,  9.99874128e-01,  9.89821442e-01,
        9.63842159e-01,  9.22354294e-01,  8.66025404e-01,  7.95761841e-01,
        7.12694171e-01,  6.18158986e-01,  5.13677392e-01,  4.00930535e-01,
        2.81732557e-01,  1.58001396e-01,  3.17279335e-02, -9.50560433e-02,
       -2.20310533e-01, -3.42020143e-01, -4.58226522e-01, -5.67059864e-01,
       -6.66769001e-01, -7.55749574e-01, -8.32569855e-01, -8.95993774e-01,
       -9.45000819e-01, -9.78802446e-01, -9.96854776e-01, -9.98867339e-01,
       -9.84807753e-01, -9.54902241e-01, -9.09631995e-01, -8.49725430e-01,
       -7.76146464e-01, -6.90079011e-01, -5.92907929e-01, -4.86196736e-01,
       -3.71662456e-01, -2.51147987e-01, -1.26592454e-01, -4.89858720e-16])

In [31]: c
Out[31]:
array([ 1.        ,  0.99195481,  0.9679487 ,  0.92836793,  0.87384938,
        0.80527026,  0.72373404,  0.63055267,  0.52722547,  0.41541501,
        0.29692038,  0.17364818,  0.04758192, -0.07924996, -0.20480667,
       -0.32706796, -0.44406661, -0.55392006, -0.65486073, -0.74526445,
       -0.82367658, -0.88883545, -0.93969262, -0.97542979, -0.99547192,
       -0.99949654, -0.98743889, -0.95949297, -0.91610846, -0.85798341,
       -0.78605309, -0.70147489, -0.60560969, -0.5       , -0.38634513,
       -0.26647381, -0.14231484, -0.01586596,  0.1108382 ,  0.23575894,
        0.35688622,  0.47227107,  0.58005691,  0.67850941,  0.76604444,
        0.84125353,  0.90292654,  0.95007112,  0.9819287 ,  0.99798668,
        0.99798668,  0.9819287 ,  0.95007112,  0.90292654,  0.84125353,
        0.76604444,  0.67850941,  0.58005691,  0.47227107,  0.35688622,
        0.23575894,  0.1108382 , -0.01586596, -0.14231484, -0.26647381,
       -0.38634513, -0.5       , -0.60560969, -0.70147489, -0.78605309,
       -0.85798341, -0.91610846, -0.95949297, -0.98743889, -0.99949654,
       -0.99547192, -0.97542979, -0.93969262, -0.88883545, -0.82367658,
       -0.74526445, -0.65486073, -0.55392006, -0.44406661, -0.32706796,
       -0.20480667, -0.07924996,  0.04758192,  0.17364818,  0.29692038,
        0.41541501,  0.52722547,  0.63055267,  0.72373404,  0.80527026,
        0.87384938,  0.92836793,  0.9679487 ,  0.99195481,  1.        ])

In [32]: plt.plot(t, s)
Out[32]: [<matplotlib.lines.Line2D at 0x7efda8b56b00>]

In [33]: plt.plot(c, s)
Out[33]: [<matplotlib.lines.Line2D at 0x7efda8af3d68>]

In [34]: plt.plot(t, s)
Out[34]: [<matplotlib.lines.Line2D at 0x7efda8b1e9e8>]

In [35]: plt.plot(t, c)
Out[35]: [<matplotlib.lines.Line2D at 0x7efda8b677f0>]

In [36]: f, ax = plt.subplots()

In [37]: f
Out[37]: <Figure size 700x700 with 1 Axes>

In [38]: ax
Out[38]: <matplotlib.axes._subplots.AxesSubplot at 0x7efda8ad38d0>

In [39]: ax.plot(t, s)
Out[39]: [<matplotlib.lines.Line2D at 0x7efda8acef60>]

In [40]: ax.set_xlabel('time')
Out[40]: Text(0.5,13.9444,'time')

In [41]: ax.set_ylabel('voltage')
Out[41]: Text(13.9444,0.5,'voltage')

In [42]: ax.set_title('example')
Out[42]: Text(0.5,1,'example')

In [43]: f, ax = plt.subplots()

In [44]: f1, ax1 = plt.subplots()

In [45]: f2, ax2 = plt.subplots()

In [46]: plt.subplots?

In [47]: plt.subplots?

In [48]: blah = plt.subplots()

In [49]: blah
Out[49]:
(<Figure size 700x700 with 1 Axes>,
 <matplotlib.axes._subplots.AxesSubplot at 0x7efd9e58e128>)

In [50]: f, ax = plt.subplots()

In [51]: f.canvas.set_window_title('my title')

In [52]: ax
Out[52]: <matplotlib.axes._subplots.AxesSubplot at 0x7efdbe3a74e0>

In [53]: plt.close?
Signature: plt.close(*args)
Docstring:
Close a figure window.

``close()`` by itself closes the current figure

``close(fig)`` closes the `.Figure` instance *fig*

``close(num)`` closes the figure number *num*

``close(name)`` where *name* is a string, closes figure with that label

``close('all')`` closes all the figure windows
File:      /usr/local/lib/python3.5/dist-packages/matplotlib/pyplot.py
Type:      function

In [54]: plt.close('all')

In [55]: def cf():
    ...:     plt.close('all')
    ...:

In [56]: cf()

In [57]: f, ax = plt.subplots()

In [58]: f, ax = plt.subplots()

In [59]: f, ax = plt.subplots()

In [60]: cf()

In [61]: f, ax = plt.subplots()

In [62]: ax.plot(t, s)
Out[62]: [<matplotlib.lines.Line2D at 0x7efda8ad3828>]

In [63]: f2, ax2 = plt.subplots()

In [64]: ax.clear()

In [65]: ax2.plot(t, s)
Out[65]: [<matplotlib.lines.Line2D at 0x7efdbde0e7f0>]

In [66]: cf()

In [67]: plt.subplots?

In [68]: f1, ax1 = plt.subplots(2, 1, sharex=True)

In [69]: ax1
Out[69]:
array([<matplotlib.axes._subplots.AxesSubplot object at 0x7efd9e4b26d8>,
       <matplotlib.axes._subplots.AxesSubplot object at 0x7efd9e4c59b0>],
      dtype=object)

In [70]: ax1[0].plot(t, s)
Out[70]: [<matplotlib.lines.Line2D at 0x7efd9e462dd8>]

In [71]: ax1[1].plot(t, c, color='r')
Out[71]: [<matplotlib.lines.Line2D at 0x7efd9e469e10>]

In [72]: f, ax = plt.subplots()

In [73]: ax.scatter?

In [74]: x, y, c = np.random.random(100), np.random.random(100), np.random.random(100)

In [75]: ax.scatter(x, y, c=c)
Out[75]: <matplotlib.collections.PathCollection at 0x7efd9e1842e8>

In [76]: ax.scatter?

In [77]: plt.colorbar?

In [78]: plt.colorbar()
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-78-58b169089b9f> in <module>()
----> 1 plt.colorbar()

/usr/local/lib/python3.5/dist-packages/matplotlib/pyplot.py in colorbar(mappable, cax, ax, **kw)
   2319         mappable = gci()
   2320         if mappable is None:
-> 2321             raise RuntimeError('No mappable was found to use for colorbar '
   2322                                'creation. First define a mappable such as '
   2323                                'an image (with imshow) or a contour set ('

RuntimeError: No mappable was found to use for colorbar creation. First define a mappable such as an image (with imshow) or a contour set (with contourf).
> /usr/local/lib/python3.5/dist-packages/matplotlib/pyplot.py(2321)colorbar()
   2319         mappable = gci()
   2320         if mappable is None:
-> 2321             raise RuntimeError('No mappable was found to use for colorbar '
   2322                                'creation. First define a mappable such as '
   2323                                'an image (with imshow) or a contour set ('

ipdb> c

In [79]: f, ax = plt.subplots()

In [80]: ax.errorbar(x, y, yerr=0.1, xerr=0.2)
Out[80]: <ErrorbarContainer object of 3 artists>

In [81]: ax.errorbar?

In [82]: ax.errorbar(x, y, yerr=0.1, xerr=0.2, linestyle='')
Out[82]: <ErrorbarContainer object of 3 artists>

In [83]: f, ax = plt.subplots()

In [84]: ax.errorbar(x, y, yerr=0.1, xerr=0.2, linestyle='')
Out[84]: <ErrorbarContainer object of 3 artists>

In [85]: cf()

In [86]: a = np.array([[1, 2, 3], [4, 5, 6]])

In [87]: a
Out[87]:
array([[1, 2, 3],
       [4, 5, 6]])

In [88]: b = np.array([1, 2, 3])

In [89]: b
Out[89]: array([1, 2, 3])

In [90]: a = np.arange(16)

In [91]: a
Out[91]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])

In [92]: a = np.arange(16).reshape((8, 2))

In [93]: a
Out[93]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [94]: a.shape
Out[94]: (8, 2)

In [95]: b = np.arange(16)

In [96]: b
Out[96]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])

In [97]: b.shape
Out[97]: (16,)

In [98]: a.ndim
Out[98]: 2

In [99]: b.ndim
Out[99]: 1

In [100]: a
Out[100]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [101]: a.reshape((4, 4))
Out[101]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])

In [102]: a.reshape((8, 3))
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-102-5470a68528da> in <module>()
----> 1 a.reshape((8, 3))

ValueError: cannot reshape array of size 16 into shape (8,3)
> <ipython-input-102-5470a68528da>(1)<module>()
----> 1 a.reshape((8, 3))

ipdb> c

In [103]: a
Out[103]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [104]: a.reshape((4, 4))
Out[104]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])

In [105]: a.reshape((4, 4)).T
Out[105]:
array([[ 0,  4,  8, 12],
       [ 1,  5,  9, 13],
       [ 2,  6, 10, 14],
       [ 3,  7, 11, 15]])

In [106]: a = np.zeros((8, 2))

In [107]: a
Out[107]:
array([[0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.]])

In [108]: np.zeros?

In [109]: np.ones(8, 2)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-109-8d2b6ece3eb1> in <module>()
----> 1 np.ones(8, 2)

/usr/local/lib/python3.5/dist-packages/numpy/core/numeric.py in ones(shape, dtype, order)
    186
    187     """
--> 188     a = empty(shape, dtype, order)
    189     multiarray.copyto(a, 1, casting='unsafe')
    190     return a

TypeError: data type not understood
> /usr/local/lib/python3.5/dist-packages/numpy/core/numeric.py(188)ones()
    186
    187     """
--> 188     a = empty(shape, dtype, order)
    189     multiarray.copyto(a, 1, casting='unsafe')
    190     return a

ipdb> c

In [110]: np.ones((8, 2))
Out[110]:
array([[1., 1.],
       [1., 1.],
       [1., 1.],
       [1., 1.],
       [1., 1.],
       [1., 1.],
       [1., 1.],
       [1., 1.]])

In [111]: np.random.random((8, 2))
Out[111]:
array([[0.40744149, 0.03497991],
       [0.02755989, 0.28611939],
       [0.01236947, 0.19821609],
       [0.24456456, 0.10340115],
       [0.81867258, 0.20701237],
       [0.13219387, 0.42894641],
       [0.93952366, 0.66866693],
       [0.82390957, 0.33999903]])

In [112]: np.tile([1, 2], (8, 1))
Out[112]:
array([[1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2]])

In [113]: a
Out[113]:
array([[0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.]])

In [114]: a.fill(7)

In [115]: a
Out[115]:
array([[7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.]])

In [116]: np.tile((1, 2), (8, 1))
Out[116]:
array([[1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2]])

In [117]: np.tile((1, 2), [8, 1])
Out[117]:
array([[1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2],
       [1, 2]])

In [118]: a
Out[118]:
array([[7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.],
       [7., 7.]])

In [119]: a.fill(10)

In [120]: a
Out[120]:
array([[10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.]])

In [121]: a
Out[121]:
array([[10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.]])

In [122]: np.eye(5)
Out[122]:
array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])

In [123]: np.eye(5).T
Out[123]:
array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])

In [124]: a
Out[124]:
array([[10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.]])

In [125]: a.shape
Out[125]: (8, 2)

In [126]: a.shape[0]
Out[126]: 8

In [127]: a.shape[1]
Out[127]: 2

In [128]: len(a)
Out[128]: 8

In [129]: a
Out[129]:
array([[10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.],
       [10., 10.]])

In [130]: a.T
Out[130]:
array([[10., 10., 10., 10., 10., 10., 10., 10.],
       [10., 10., 10., 10., 10., 10., 10., 10.]])

In [131]: len(a.T)
Out[131]: 2

In [132]: f, ax = plt.subplots()

In [133]: a = np.arange(16).reshape((8, 2))

In [134]: a
Out[134]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [135]: im = ax.imshow(a)

In [136]: f.colorbar(im)
Out[136]: <matplotlib.colorbar.Colorbar at 0x7efdb6c56c18>

In [137]: im.set_cmap('viridis')

In [138]: im.set_cmap('jet')

In [139]: im.set_cmap('viridis')

In [140]: a
Out[140]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [141]: a.shape
Out[141]: (8, 2)

In [142]: a[0, 0]
Out[142]: 0

In [143]: a[0]
Out[143]: array([0, 1])

In [144]: a[0].ndim
Out[144]: 1

In [145]: a[2, 1]
Out[145]: 5

In [146]: a[-1, -1]
Out[146]: 15

In [147]: a[2, 2]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-147-02ce8881f7de> in <module>()
----> 1 a[2, 2]

IndexError: index 2 is out of bounds for axis 1 with size 2
> <ipython-input-147-02ce8881f7de>(1)<module>()
----> 1 a[2, 2]

ipdb> c

In [148]: a[0]
Out[148]: array([0, 1])

In [149]: a[0, :]
Out[149]: array([0, 1])

In [150]: a[:, 1]
Out[150]: array([ 1,  3,  5,  7,  9, 11, 13, 15])

In [151]: a
Out[151]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [152]: a[0:3]
Out[152]:
array([[0, 1],
       [2, 3],
       [4, 5]])

In [153]: a[:3]
Out[153]:
array([[0, 1],
       [2, 3],
       [4, 5]])

In [154]: a[::2]
Out[154]:
array([[ 0,  1],
       [ 4,  5],
       [ 8,  9],
       [12, 13]])

In [155]: a[0:1:2]
Out[155]: array([[0, 1]])

In [156]: a[0:2:1]
Out[156]:
array([[0, 1],
       [2, 3]])

In [157]: a[0:-1:2]
Out[157]:
array([[ 0,  1],
       [ 4,  5],
       [ 8,  9],
       [12, 13]])

In [158]: a[::2]
Out[158]:
array([[ 0,  1],
       [ 4,  5],
       [ 8,  9],
       [12, 13]])

In [159]: a[-1:0:-1]
Out[159]:
array([[14, 15],
       [12, 13],
       [10, 11],
       [ 8,  9],
       [ 6,  7],
       [ 4,  5],
       [ 2,  3]])

In [160]: a[::-1]
Out[160]:
array([[14, 15],
       [12, 13],
       [10, 11],
       [ 8,  9],
       [ 6,  7],
       [ 4,  5],
       [ 2,  3],
       [ 0,  1]])

In [161]: a[-1:0:-1]
Out[161]:
array([[14, 15],
       [12, 13],
       [10, 11],
       [ 8,  9],
       [ 6,  7],
       [ 4,  5],
       [ 2,  3]])

In [162]: a[-1:-1:-1]
Out[162]: array([], shape=(0, 2), dtype=int64)

In [163]: a[-1:0:-1]
Out[163]:
array([[14, 15],
       [12, 13],
       [10, 11],
       [ 8,  9],
       [ 6,  7],
       [ 4,  5],
       [ 2,  3]])

In [164]: a[::-1]
Out[164]:
array([[14, 15],
       [12, 13],
       [10, 11],
       [ 8,  9],
       [ 6,  7],
       [ 4,  5],
       [ 2,  3],
       [ 0,  1]])

In [165]: a
Out[165]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [166]: a[::-1]
Out[166]:
array([[14, 15],
       [12, 13],
       [10, 11],
       [ 8,  9],
       [ 6,  7],
       [ 4,  5],
       [ 2,  3],
       [ 0,  1]])

In [167]: a[, ::-1]
  File "<ipython-input-167-bc93e3c42cbf>", line 1
    a[, ::-1]
      ^
SyntaxError: invalid syntax


In [168]: a[:, ::-1]
Out[168]:
array([[ 1,  0],
       [ 3,  2],
       [ 5,  4],
       [ 7,  6],
       [ 9,  8],
       [11, 10],
       [13, 12],
       [15, 14]])

In [169]: np.rot90(a)
Out[169]:
array([[ 1,  3,  5,  7,  9, 11, 13, 15],
       [ 0,  2,  4,  6,  8, 10, 12, 14]])

In [170]: a
Out[170]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [171]: np.rot90(a)
Out[171]:
array([[ 1,  3,  5,  7,  9, 11, 13, 15],
       [ 0,  2,  4,  6,  8, 10, 12, 14]])

In [172]: np.rot90(a, -1)
Out[172]:
array([[14, 12, 10,  8,  6,  4,  2,  0],
       [15, 13, 11,  9,  7,  5,  3,  1]])

In [173]: a
Out[173]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [174]: a + 2
Out[174]:
array([[ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15],
       [16, 17]])

In [175]: a - 5
Out[175]:
array([[-5, -4],
       [-3, -2],
       [-1,  0],
       [ 1,  2],
       [ 3,  4],
       [ 5,  6],
       [ 7,  8],
       [ 9, 10]])

In [176]: b = np.random.random(16).reshape((8, 2))

In [177]: a
Out[177]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [178]: b
Out[178]:
array([[0.66821114, 0.2488774 ],
       [0.93668214, 0.78724157],
       [0.35803611, 0.07923558],
       [0.10585572, 0.19782077],
       [0.69041024, 0.21982308],
       [0.86130377, 0.20195369],
       [0.815301  , 0.27010619],
       [0.72258081, 0.19171385]])

In [179]: a + b
Out[179]:
array([[ 0.66821114,  1.2488774 ],
       [ 2.93668214,  3.78724157],
       [ 4.35803611,  5.07923558],
       [ 6.10585572,  7.19782077],
       [ 8.69041024,  9.21982308],
       [10.86130377, 11.20195369],
       [12.815301  , 13.27010619],
       [14.72258081, 15.19171385]])

In [180]: a / b
Out[180]:
array([[ 0.        ,  4.01804259],
       [ 2.13519605,  3.81077436],
       [11.17205742, 63.10296517],
       [56.68092564, 35.38556639],
       [11.58731364, 40.94201632],
       [11.61030565, 54.46793269],
       [14.71849056, 48.12921974],
       [19.37499569, 78.2416094 ]])

In [181]: a
Out[181]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [182]: b / a
/usr/local/bin/ipython:1: RuntimeWarning: divide by zero encountered in true_divide
  #!/usr/bin/python3
Out[182]:
array([[       inf, 0.2488774 ],
       [0.46834107, 0.26241386],
       [0.08950903, 0.01584712],
       [0.01764262, 0.02826011],
       [0.08630128, 0.02442479],
       [0.08613038, 0.01835943],
       [0.06794175, 0.0207774 ],
       [0.05161291, 0.01278092]])

In [183]: x = np.arange(8)

In [184]: a
Out[184]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [185]: x
Out[185]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [186]: a * x
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-186-6ac118169318> in <module>()
----> 1 a * x

ValueError: operands could not be broadcast together with shapes (8,2) (8,)
> <ipython-input-186-6ac118169318>(1)<module>()
----> 1 a * x

ipdb> c

In [187]: x.T
Out[187]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [188]: a.T
Out[188]:
array([[ 0,  2,  4,  6,  8, 10, 12, 14],
       [ 1,  3,  5,  7,  9, 11, 13, 15]])

In [189]: a.T * x
Out[189]:
array([[  0,   2,   8,  18,  32,  50,  72,  98],
       [  0,   3,  10,  21,  36,  55,  78, 105]])

In [190]: x
Out[190]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [191]: x.ndim
Out[191]: 1

In [192]: x
Out[192]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [193]: x.shape
Out[193]: (8,)

In [194]: x.shape = 1, 8

In [195]: x
Out[195]: array([[0, 1, 2, 3, 4, 5, 6, 7]])

In [196]: x.shape = 8, 1

In [197]: x
Out[197]:
array([[0],
       [1],
       [2],
       [3],
       [4],
       [5],
       [6],
       [7]])

In [198]: x.T
Out[198]: array([[0, 1, 2, 3, 4, 5, 6, 7]])

In [199]: x.ndim
Out[199]: 2

In [200]: x = np.arange(8)

In [201]: x
Out[201]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [202]: x.ndim
Out[202]: 1

In [203]: x.shape
Out[203]: (8,)

In [204]: a
Out[204]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [205]: a.max()
Out[205]: 15

In [206]: a
Out[206]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [207]: x
Out[207]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [208]: x.min()
Out[208]: 0

In [209]: a.max()
Out[209]: 15

In [210]: a.min()
Out[210]: 0

In [211]: a.mean()
Out[211]: 7.5

In [212]: a.mean?
Docstring:
a.mean(axis=None, dtype=None, out=None, keepdims=False)

Returns the average of the array elements along given axis.

Refer to `numpy.mean` for full documentation.

See Also
--------
numpy.mean : equivalent function
Type:      builtin_function_or_method

In [213]: a
Out[213]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [214]: a.mean(axis=0)
Out[214]: array([7., 8.])

In [215]: a.mean(axis=1)
Out[215]: array([ 0.5,  2.5,  4.5,  6.5,  8.5, 10.5, 12.5, 14.5])

In [216]: a
Out[216]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [217]: a > 5
Out[217]:
array([[False, False],
       [False, False],
       [False, False],
       [ True,  True],
       [ True,  True],
       [ True,  True],
       [ True,  True],
       [ True,  True]])

In [218]: a[a > 5]
Out[218]: array([ 6,  7,  8,  9, 10, 11, 12, 13, 14, 15])

In [219]: z = np.zeros(a.shape)

In [220]:

In [220]: z
Out[220]:
array([[0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.]])

In [221]: z[a > 5] = a[a > 5]

In [222]: z
Out[222]:
array([[ 0.,  0.],
       [ 0.,  0.],
       [ 0.,  0.],
       [ 6.,  7.],
       [ 8.,  9.],
       [10., 11.],
       [12., 13.],
       [14., 15.]])

In [223]: np.dot
Out[223]: <function numpy.core.multiarray.dot>

In [224]: np.outer()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-224-b88b18a6c6ed> in <module>()
----> 1 np.outer()

TypeError: outer() missing 2 required positional arguments: 'a' and 'b'
> <ipython-input-224-b88b18a6c6ed>(1)<module>()
----> 1 np.outer()

ipdb> c

In [225]: np.outer
Out[225]: <function numpy.core.numeric.outer(a, b, out=None)>

In [226]: a
Out[226]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [227]: a.diagonal()
Out[227]: array([0, 3])

In [228]: np.concatenate?

In [229]: a
Out[229]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [230]: b
Out[230]:
array([[0.66821114, 0.2488774 ],
       [0.93668214, 0.78724157],
       [0.35803611, 0.07923558],
       [0.10585572, 0.19782077],
       [0.69041024, 0.21982308],
       [0.86130377, 0.20195369],
       [0.815301  , 0.27010619],
       [0.72258081, 0.19171385]])

In [231]: a.shape
Out[231]: (8, 2)

In [232]: b.shape
Out[232]: (8, 2)

In [233]: np.concatenate([a, b])
Out[233]:
array([[ 0.        ,  1.        ],
       [ 2.        ,  3.        ],
       [ 4.        ,  5.        ],
       [ 6.        ,  7.        ],
       [ 8.        ,  9.        ],
       [10.        , 11.        ],
       [12.        , 13.        ],
       [14.        , 15.        ],
       [ 0.66821114,  0.2488774 ],
       [ 0.93668214,  0.78724157],
       [ 0.35803611,  0.07923558],
       [ 0.10585572,  0.19782077],
       [ 0.69041024,  0.21982308],
       [ 0.86130377,  0.20195369],
       [ 0.815301  ,  0.27010619],
       [ 0.72258081,  0.19171385]])

In [234]: np.concatenate([a, b], axis=1)
Out[234]:
array([[ 0.        ,  1.        ,  0.66821114,  0.2488774 ],
       [ 2.        ,  3.        ,  0.93668214,  0.78724157],
       [ 4.        ,  5.        ,  0.35803611,  0.07923558],
       [ 6.        ,  7.        ,  0.10585572,  0.19782077],
       [ 8.        ,  9.        ,  0.69041024,  0.21982308],
       [10.        , 11.        ,  0.86130377,  0.20195369],
       [12.        , 13.        ,  0.815301  ,  0.27010619],
       [14.        , 15.        ,  0.72258081,  0.19171385]])

In [235]: np.stack([a, b])
Out[235]:
array([[[ 0.        ,  1.        ],
        [ 2.        ,  3.        ],
        [ 4.        ,  5.        ],
        [ 6.        ,  7.        ],
        [ 8.        ,  9.        ],
        [10.        , 11.        ],
        [12.        , 13.        ],
        [14.        , 15.        ]],

       [[ 0.66821114,  0.2488774 ],
        [ 0.93668214,  0.78724157],
        [ 0.35803611,  0.07923558],
        [ 0.10585572,  0.19782077],
        [ 0.69041024,  0.21982308],
        [ 0.86130377,  0.20195369],
        [ 0.815301  ,  0.27010619],
        [ 0.72258081,  0.19171385]]])

In [236]: np.stack([a, b]).ndim
Out[236]: 3

In [237]: np.stack([a, b]).shape
Out[237]: (2, 8, 2)

In [238]: a.shape
Out[238]: (8, 2)

In [239]: b.shape
Out[239]: (8, 2)

In [240]: m = np.stack([a, b])

In [241]: len(m)
Out[241]: 2

In [242]: m.shape
Out[242]: (2, 8, 2)

In [243]: len(m)
Out[243]: 2

In [244]: np.atleast_3d?

In [245]: a
Out[245]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [246]: a.mean(axis=0)
Out[246]: array([7., 8.])

In [247]: shape = np.zeros(2)

In [248]: shape[axis] = a[axis]
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-248-4d228ada8674> in <module>()
----> 1 shape[axis] = a[axis]

NameError: name 'axis' is not defined
> <ipython-input-248-4d228ada8674>(1)<module>()
----> 1 shape[axis] = a[axis]

ipdb> c

In [249]: axis = 0

In [250]: shape[axis] = a[axis]
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-250-4d228ada8674> in <module>()
----> 1 shape[axis] = a[axis]

ValueError: setting an array element with a sequence.
> <ipython-input-250-4d228ada8674>(1)<module>()
----> 1 shape[axis] = a[axis]

ipdb> c

In [251]: shape = np.zeros(2)

In [252]: axis
Out[252]: 0

In [253]: a
Out[253]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [254]: shape
Out[254]: array([0., 0.])

In [255]: newshape = np.zeros(2)

In [256]: a.mean(axis=axis)
Out[256]: array([7., 8.])

In [257]: b = a.mean(axis=axis)

In [258]: b.shape
Out[258]: (2,)

In [259]: newshape
Out[259]: array([0., 0.])

In [260]: newshape[axis] = a.shape[axis]

In [261]: newshape
Out[261]: array([8., 0.])

In [262]: b.shape = newshape
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-262-17863f272add> in <module>()
----> 1 b.shape = newshape

TypeError: 'numpy.float64' object cannot be interpreted as an integer
> <ipython-input-262-17863f272add>(1)<module>()
----> 1 b.shape = newshape

ipdb> c

In [263]: newshape = np.zeros(2, dtype=int)

In [264]: newshape[axis] = a.shape[axis]

In [265]: newshape
Out[265]: array([8, 0])

In [266]: b
Out[266]: array([7., 8.])

In [267]: b.shape = newshape
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-267-17863f272add> in <module>()
----> 1 b.shape = newshape

ValueError: cannot reshape array of size 2 into shape (8,0)
> <ipython-input-267-17863f272add>(1)<module>()
----> 1 b.shape = newshape

ipdb> c

In [268]: newshape
Out[268]: array([8, 0])

In [269]: newshape[axis] = 1

In [270]: b.shape = newshape
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-270-17863f272add> in <module>()
----> 1 b.shape = newshape

ValueError: cannot reshape array of size 2 into shape (1,0)
> <ipython-input-270-17863f272add>(1)<module>()
----> 1 b.shape = newshape

ipdb> c

In [271]: b
Out[271]: array([7., 8.])

In [272]: b.shape
Out[272]: (2,)

In [273]: newshape
Out[273]: array([1, 0])

In [274]: np.max?

In [275]: a
Out[275]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [276]: a.max?
Docstring:
a.max(axis=None, out=None, keepdims=False)

Return the maximum along a given axis.

Refer to `numpy.amax` for full documentation.

See Also
--------
numpy.amax : equivalent function
Type:      builtin_function_or_method

In [277]: a
Out[277]:
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15]])

In [278]: a.mean(axis=0, keepdims=True)
Out[278]: array([[7., 8.]])

In [279]: a.mean(axis=0, keepdims=True).shape
Out[279]: (1, 2)

In [280]: pwd
Out[280]: '/home/mspacek/SciPyCourse2018/notes/homework3'

In [281]: cd ../07_mpl_matrices/
/home/mspacek/SciPyCourse2018/notes/07_mpl_matrices

In [282]: l
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-282-cde25b5e10ad> in <module>()
----> 1 l

NameError: name 'l' is not defined
> <ipython-input-282-cde25b5e10ad>(1)<module>()
----> 1 l

ipdb> c

In [283]: ls
07_mpl_matrices.md  07_mpl_matrices.pdf  hidden_surprise/  surprise.npy

In [284]: surprise = np.load('surprise.pny')
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
<ipython-input-284-4df752feaae3> in <module>()
----> 1 surprise = np.load('surprise.pny')

/usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py in load(file, mmap_mode, allow_pickle, fix_imports, encoding)
    370     own_fid = False
    371     if isinstance(file, basestring):
--> 372         fid = open(file, "rb")
    373         own_fid = True
    374     elif is_pathlib_path(file):

FileNotFoundError: [Errno 2] No such file or directory: 'surprise.pny'
> /usr/local/lib/python3.5/dist-packages/numpy/lib/npyio.py(372)load()
    370     own_fid = False
    371     if isinstance(file, basestring):
--> 372         fid = open(file, "rb")
    373         own_fid = True
    374     elif is_pathlib_path(file):

ipdb> c

In [285]: pwd
Out[285]: '/home/mspacek/SciPyCourse2018/notes/07_mpl_matrices'

In [286]: ls
07_mpl_matrices.md  07_mpl_matrices.pdf  hidden_surprise/  surprise.npy

In [287]: surprise = np.load('surprise.npy')

In [288]: surprise.shape
Out[288]: (1024, 1024)

In [289]: surprise
Out[289]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [290]: surprise.shape
Out[290]: (1024, 1024)

In [291]: a[::80, ::80]
Out[291]: array([[0]])

In [292]: surprise[::80, ::80]
Out[292]:
array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0, 182, 182,   0,   0,   0,   0,   0],
       [  0,   0,   0, 182, 182, 182, 182, 182, 182, 182,   0,   0,   0],
       [  0,   0, 182, 182, 182, 182, 182, 182, 182, 182, 182,   0,   0],
       [  0,   0, 182, 182,  99, 160, 182, 182, 182, 182, 182, 182,   0],
       [  0, 182, 182, 182,  99,  99, 182, 182,  99,  99, 182, 182, 182],
       [  0, 182, 182, 182,  99, 182, 182, 182, 182, 182, 182, 182, 182],
       [  0, 182, 182, 182, 182, 182, 182, 162, 162, 162, 182, 182, 182],
       [  0, 182, 182, 162, 162, 162, 162, 162, 162, 162, 162, 182, 182],
       [  0, 182, 182, 162, 162, 162, 162, 162, 162, 162, 162, 182, 182],
       [  0, 182, 182, 182, 182, 182, 182, 182, 162, 162, 182, 182, 182],
       [  0,   0, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]],
      dtype=uint8)

In [293]: f, ax = plt.subplots()

In [294]: im = ax.imshow(surprise)

In [295]: im.set_cmap('inferno')

In [296]: f.colorbar(im)
Out[296]: <matplotlib.colorbar.Colorbar at 0x7efdb6b402b0>

In [297]: f, ax = plt.subplots()

In [298]: surprise.ravel()
Out[298]: array([0, 0, 0, ..., 0, 0, 0], dtype=uint8)

In [299]: ax.hist(surprise.ravel(), bins=np.arange(256))
Out[299]:
(array([3.24986e+05, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 4.52620e+04,
        7.50000e+01, 1.60000e+01, 3.50000e+01, 1.70000e+01, 2.40000e+01,
        3.40000e+01, 1.50000e+01, 4.90000e+01, 2.40000e+01, 1.40000e+01,
        1.40000e+01, 1.00000e+01, 6.60000e+01, 6.00000e+00, 2.00000e+01,
        4.00000e+00, 1.80000e+01, 7.00000e+00, 3.80000e+01, 8.00000e+00,
        5.60000e+01, 2.60000e+01, 1.01000e+02, 4.50000e+01, 1.09000e+02,
        2.50000e+01, 1.06000e+02, 4.50000e+01, 1.92000e+02, 1.06000e+02,
        1.31000e+02, 2.30000e+01, 9.40000e+01, 2.90000e+01, 5.90000e+01,
        8.40000e+01, 3.10000e+01, 4.50000e+01, 5.20000e+01, 4.40000e+01,
        8.30000e+01, 2.60000e+01, 8.60000e+01, 1.30000e+01, 8.30000e+01,
        3.90000e+01, 6.50000e+01, 2.90000e+01, 4.50000e+01, 1.02000e+02,
        1.08000e+02, 3.90000e+01, 9.00000e+01, 4.60000e+01, 9.90000e+01,
        1.90000e+01, 7.10000e+01, 1.90000e+01, 5.20000e+01, 4.90000e+01,
        4.40000e+01, 7.50000e+01, 1.18108e+05, 1.36000e+02, 1.64000e+02,
        1.40000e+02, 1.36000e+02, 1.07000e+02, 1.45000e+02, 7.30000e+01,
        1.84000e+02, 9.50000e+01, 2.04000e+02, 7.70000e+01, 1.70000e+02,
        1.08000e+02, 1.61000e+02, 1.35000e+02, 1.79000e+02, 1.76000e+02,
        2.57000e+02, 2.35000e+02, 5.54159e+05, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00,
        0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255]),
 <a list of 255 Patch objects>)

In [300]: cf()

In [301]: f, ax = plt.subplots(nrows=1, ncols=4)

In [302]: ax[0].imshow(surprise)
Out[302]: <matplotlib.image.AxesImage at 0x7efd9cf2aa90>

In [303]: ax[1].imshow(np.rot90(surprise))
Out[303]: <matplotlib.image.AxesImage at 0x7efd9d0f6b38>

In [304]: np.rot90?

In [305]: ax[2].imshow(np.rot90(surprise, k=2))
Out[305]: <matplotlib.image.AxesImage at 0x7efd9d111b70>

In [306]: ax[3].imshow(np.rot90(surprise, k=3))
Out[306]: <matplotlib.image.AxesImage at 0x7efd9d0ea7b8>

In [307]: cf()

In [308]: f, ax = plt.subplots(nrows=1, ncols=4)

In [309]: len(ax)
Out[309]: 4

In [310]: for i in range(4):
     ...:     ax[i].imshow(np.rot90(surprise, k=i))
     ...:

In [311]: ax[0].imshow(surprise.T)
Out[311]: <matplotlib.image.AxesImage at 0x7efd9cfc9588>

In [312]: a = np.arange(16)

In [313]:

In [313]: a.shape
Out[313]: (16,)

In [314]: a.shape = 8, 2

In [315]: a.ravel()
Out[315]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])

In [316]: a.ravel?
Docstring:
a.ravel([order])

Return a flattened array.

Refer to `numpy.ravel` for full documentation.

See Also
--------
numpy.ravel : equivalent function

ndarray.flat : a flat iterator on the array.
Type:      builtin_function_or_method

In [317]: np.ravel?

In [318]:
