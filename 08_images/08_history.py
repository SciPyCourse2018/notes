mspacek@Godel:~/SciPyCourse2018/notes/08_images$ gc
mspacek@Godel:~/SciPyCourse2018/notes/08_images$ ipython
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.3.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: for i in range(35):
   ...:     print('happy bday Mike')
   ...:
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike
happy bday Mike

In [2]: import numpy as np

In [3]: import matplotlib.pyplot as plt

In [4]: import skimage

In [5]: from skimage import io

In [6]: pwd
Out[6]: '/home/mspacek/SciPyCourse2018/notes/08_images'

In [7]: ls
08_images.md  08_images.pdf  face_alpha.png  face_gray.png  face.png  movie.avi  ohki2005.png

In [8]: io.imread?

In [9]: io.imread('face_gray.png')
Out[9]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [10]: faceg = io.imread('face_gray.png')

In [11]: faceg.shape
Out[11]: (782, 782)

In [12]: f, ax = plt.subplots()

In [13]: im = ax.imshow(faceg)

In [14]: im.get_cmap().name
Out[14]: 'viridis'

In [15]: im.set_camp('gray')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-15-279cde18dbf2> in <module>()
----> 1 im.set_camp('gray')

AttributeError: 'AxesImage' object has no attribute 'set_camp'
> <ipython-input-15-279cde18dbf2>(1)<module>()
----> 1 im.set_camp('gray')

ipdb> c

In [16]: im.set_cmap('gray')

In [17]: f.colorbar(im)
Out[17]: <matplotlib.colorbar.Colorbar at 0x7f1214044898>

In [18]: ax.set_xticks([])
Out[18]: []

In [19]: ax.set_yticks([])
Out[19]: []

In [20]: ax.axis?

In [21]: ax.axis('off')
Out[21]: (-0.5, 781.5, 781.5, -0.5)

In [22]: face90 = np.rot90(faceg)

In [23]: face90.shape
Out[23]: (782, 782)

In [24]: ax.imshow(face90, cmap='gray')
Out[24]: <matplotlib.image.AxesImage at 0x7f1209b44908>

In [25]: np.flipud?

In [26]: np.fliplr?

In [27]: ax.imshow(faceg, cmap='gray')
Out[27]: <matplotlib.image.AxesImage at 0x7f1209b52e10>

In [28]: f, ax = plt.subplots()

In [29]: ax.imshow(faceg, cmap='gray')
Out[29]: <matplotlib.image.AxesImage at 0x7f1209b736a0>

In [30]: faceg[:100, :100] = 0

In [31]: ax.imshow(faceg, cmap='gray')
Out[31]: <matplotlib.image.AxesImage at 0x7f120a621c88>

In [32]: faceg = np.fliplr(faceg)

In [33]: ax.imshow(faceg, cmap='gray')
Out[33]: <matplotlib.image.AxesImage at 0x7f120a62a198>

In [34]: faceg = faceg[:, ::-1]

In [35]: ax.imshow(faceg, cmap='gray')
Out[35]: <matplotlib.image.AxesImage at 0x7f120a62ad68>

In [36]: faceg = faceg[::-1]

In [37]: ax.imshow(faceg, cmap='gray')
Out[37]: <matplotlib.image.AxesImage at 0x7f120a62a780>

In [38]: from scipy import ndimage

In [39]: faceg = io.imread('face_gray.png')

In [40]: ax.imshow(faceg, cmap='gray')
Out[40]: <matplotlib.image.AxesImage at 0x7f12042247b8>

In [41]: faceg = ndimage.rotate(faceg, 45)

In [42]: ax.imshow(faceg, cmap='gray')
Out[42]: <matplotlib.image.AxesImage at 0x7f12042370b8>

In [43]: faceg.shape
Out[43]: (1106, 1106)

In [44]: faceg = io.imread('face_gray.png')

In [45]: faceg = ndimage.rotate(faceg, 15)

In [46]: ax.imshow(faceg, cmap='gray')
Out[46]: <matplotlib.image.AxesImage at 0x7f120424ba90>

In [47]: faceg = ndimage.rotate(faceg, 15)

In [48]: ax.imshow(faceg, cmap='gray')
Out[48]: <matplotlib.image.AxesImage at 0x7f1204254128>

In [49]: faceg = io.imread('face_gray.png')

In [50]: faceg.shape
Out[50]: (782, 782)

In [51]: faceg[::10, ::10].shape
Out[51]: (79, 79)

In [52]: lowres = faceg[::10, ::10]

In [53]: f, ax = plt.subplots()

In [54]: ax.imshow(lowres, cmap='gray')
Out[54]: <matplotlib.image.AxesImage at 0x7f1203f9be48>

In [55]: ax.imshow(lowres, cmap='gray', interpolation='gaussian')
Out[55]: <matplotlib.image.AxesImage at 0x7f1203fb3320>

In [56]: a = np.arange(10)

In [57]: a
Out[57]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [58]: a[::3]
Out[58]: array([0, 3, 6, 9])

In [59]: ax.imshow(lowres, cmap='gray')
Out[59]: <matplotlib.image.AxesImage at 0x7f1203fb3e80>

In [60]: from skimage import filters

In [61]: filters.gaussian?

In [62]: lowresguass = filters.gaussian(lowres, sigma=2)

In [63]: lowresgauss.shape
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-63-8dc08609842b> in <module>()
----> 1 lowresgauss.shape

NameError: name 'lowresgauss' is not defined
> <ipython-input-63-8dc08609842b>(1)<module>()
----> 1 lowresgauss.shape

ipdb> c

In [64]: lowresguass
Out[64]:
array([[1.        , 1.        , 1.        , ..., 1.        , 1.        ,
        1.        ],
       [1.        , 1.        , 1.        , ..., 1.        , 1.        ,
        1.        ],
       [1.        , 1.        , 1.        , ..., 1.        , 1.        ,
        1.        ],
       ...,
       [0.99999998, 0.99999993, 0.99999972, ..., 0.99999972, 0.99999993,
        0.99999998],
       [1.        , 0.99999999, 0.99999997, ..., 0.99999997, 0.99999999,
        1.        ],
       [1.        , 1.        , 1.        , ..., 1.        , 1.        ,
        1.        ]])

In [65]: lowresgauss = filters.gaussian(lowres, sigma=2)

In [66]: lowresgauss.shape
Out[66]: (79, 79)

In [67]: lowres.shape
Out[67]: (79, 79)

In [68]: f, ax = plt.subplots()

In [69]: ax.imshow(lowresgauss, cmap='gray')
Out[69]: <matplotlib.image.AxesImage at 0x7f12266087b8>

In [70]: f, ax = plt.subplots()

In [71]: lowresgauss1 = filters.gaussian(lowres, sigma=1)

In [72]: ax.imshow(lowresgauss1, cmap='gray')
Out[72]: <matplotlib.image.AxesImage at 0x7f12263be320>

In [73]: ndimage.zoom?

In [74]: biglowresgauss = ndimage.zoom(lowresgauss, 10)

In [75]: biglowresgauss.shape
Out[75]: (790, 790)

In [76]: faceg.shape
Out[76]: (782, 782)

In [77]: f, ax = plt.subplots()

In [78]: ax.imshow(biglowresgauss, cmap='gray')
Out[78]: <matplotlib.image.AxesImage at 0x7f1203fc7400>

In [79]: f, ax = plt.subplots()

In [80]: ax.imshow(faceg, cmap='gray')
Out[80]: <matplotlib.image.AxesImage at 0x7f12263bedd8>

In [81]: from skimage import data

In [82]: moon = data.moon()

In [83]: plt.close('all')

In [84]: f, ax = plt.subplots(1, 2)

In [85]: ax[0].imshow(moon, cmap='gray')
Out[85]: <matplotlib.image.AxesImage at 0x7f1225f60978>

In [86]: ax[1].hist?
Docstring: Alias for `%history`.
File:      /usr/local/lib/python3.5/dist-packages/IPython/core/magic.py

In [87]: plt.hist?

In [88]: moon.shape
Out[88]: (512, 512)

In [89]: moon.ravel().shape
Out[89]: (262144,)

In [90]: 512*512
Out[90]: 262144

In [91]: ax[1].hist(moon.ravel(), bins=np.arange(256+1))
Out[91]:
(array([2.4000e+02, 0.0000e+00, 6.0000e+01, 3.6000e+01, 0.0000e+00,
        6.0000e+01, 5.2000e+01, 0.0000e+00, 5.2000e+01, 0.0000e+00,
        6.0000e+01, 8.0000e+01, 0.0000e+00, 4.0000e+00, 4.4000e+01,
        0.0000e+00, 5.6000e+01, 0.0000e+00, 8.8000e+01, 7.2000e+01,
        0.0000e+00, 8.0000e+01, 7.6000e+01, 0.0000e+00, 5.2000e+01,
        6.8000e+01, 0.0000e+00, 6.4000e+01, 0.0000e+00, 8.8000e+01,
        8.0000e+01, 0.0000e+00, 7.2000e+01, 4.0000e+01, 0.0000e+00,
        7.2000e+01, 3.6000e+01, 0.0000e+00, 4.8000e+01, 6.4000e+01,
        0.0000e+00, 6.4000e+01, 4.8000e+01, 0.0000e+00, 2.8000e+01,
        7.6000e+01, 0.0000e+00, 8.4000e+01, 7.6000e+01, 8.8000e+01,
        0.0000e+00, 8.0000e+01, 1.0800e+02, 0.0000e+00, 5.2000e+01,
        7.6000e+01, 9.2000e+01, 0.0000e+00, 8.8000e+01, 1.0000e+02,
        1.0000e+02, 0.0000e+00, 1.0400e+02, 0.0000e+00, 1.3200e+02,
        1.0800e+02, 0.0000e+00, 1.4800e+02, 1.2400e+02, 1.6800e+02,
        1.6000e+02, 1.6000e+02, 0.0000e+00, 2.1200e+02, 2.0800e+02,
        1.8000e+02, 2.0000e+02, 2.6400e+02, 2.1600e+02, 2.2000e+02,
        3.1200e+02, 2.2400e+02, 2.7200e+02, 2.9600e+02, 2.8400e+02,
        3.1600e+02, 2.5200e+02, 5.3600e+02, 3.6800e+02, 4.0800e+02,
        3.7200e+02, 8.2400e+02, 3.5200e+02, 5.9600e+02, 4.5600e+02,
        8.6000e+02, 9.1600e+02, 4.0000e+02, 8.8000e+02, 9.0800e+02,
        5.8000e+02, 1.8600e+03, 1.4160e+03, 2.5640e+03, 2.0360e+03,
        3.3920e+03, 5.9280e+03, 5.7240e+03, 1.1964e+04, 1.1436e+04,
        1.6256e+04, 1.7772e+04, 2.0324e+04, 2.1444e+04, 1.7484e+04,
        2.3296e+04, 1.6144e+04, 1.2096e+04, 1.1748e+04, 9.4080e+03,
        9.0200e+03, 5.0800e+03, 5.3160e+03, 2.7760e+03, 1.3640e+03,
        2.0560e+03, 8.7200e+02, 1.2600e+03, 8.6800e+02, 3.7600e+02,
        5.5200e+02, 1.7600e+02, 4.3200e+02, 1.9200e+02, 1.5600e+02,
        2.5200e+02, 1.1200e+02, 1.3600e+02, 1.1600e+02, 1.0400e+02,
        8.8000e+01, 1.1600e+02, 1.0000e+02, 8.8000e+01, 6.0000e+01,
        1.0800e+02, 7.6000e+01, 1.1600e+02, 8.8000e+01, 7.6000e+01,
        6.8000e+01, 9.2000e+01, 7.2000e+01, 0.0000e+00, 4.4000e+01,
        6.4000e+01, 5.6000e+01, 0.0000e+00, 1.1200e+02, 7.2000e+01,
        7.6000e+01, 0.0000e+00, 9.6000e+01, 5.2000e+01, 0.0000e+00,
        0.0000e+00, 3.2000e+01, 4.4000e+01, 0.0000e+00, 4.8000e+01,
        0.0000e+00, 7.6000e+01, 2.8000e+01, 0.0000e+00, 3.6000e+01,
        3.6000e+01, 0.0000e+00, 4.4000e+01, 0.0000e+00, 2.8000e+01,
        0.0000e+00, 2.0000e+01, 5.2000e+01, 0.0000e+00, 2.0000e+01,
        0.0000e+00, 3.2000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        2.0000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00, 1.2000e+01,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 2.8000e+01, 0.0000e+00, 8.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6000e+01,
        0.0000e+00, 8.0000e+00, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        2.8000e+01, 0.0000e+00, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 0.0000e+00, 3.6000e+01, 0.0000e+00,
        4.8000e+01, 0.0000e+00, 0.0000e+00, 2.4000e+01, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 3.6000e+01, 0.0000e+00, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        4.0000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [92]: moon.max()
Out[92]: 255

In [93]: moon.min()
Out[93]: 0

In [94]: ax[1].hist(moon.ravel(), bins=256)
Out[94]:
(array([2.4000e+02, 0.0000e+00, 6.0000e+01, 3.6000e+01, 0.0000e+00,
        6.0000e+01, 5.2000e+01, 0.0000e+00, 5.2000e+01, 0.0000e+00,
        6.0000e+01, 8.0000e+01, 0.0000e+00, 4.0000e+00, 4.4000e+01,
        0.0000e+00, 5.6000e+01, 0.0000e+00, 8.8000e+01, 7.2000e+01,
        0.0000e+00, 8.0000e+01, 7.6000e+01, 0.0000e+00, 5.2000e+01,
        6.8000e+01, 0.0000e+00, 6.4000e+01, 0.0000e+00, 8.8000e+01,
        8.0000e+01, 0.0000e+00, 7.2000e+01, 4.0000e+01, 0.0000e+00,
        7.2000e+01, 3.6000e+01, 0.0000e+00, 4.8000e+01, 6.4000e+01,
        0.0000e+00, 6.4000e+01, 4.8000e+01, 0.0000e+00, 2.8000e+01,
        7.6000e+01, 0.0000e+00, 8.4000e+01, 7.6000e+01, 8.8000e+01,
        0.0000e+00, 8.0000e+01, 1.0800e+02, 0.0000e+00, 5.2000e+01,
        7.6000e+01, 9.2000e+01, 0.0000e+00, 8.8000e+01, 1.0000e+02,
        1.0000e+02, 0.0000e+00, 1.0400e+02, 0.0000e+00, 1.3200e+02,
        1.0800e+02, 0.0000e+00, 1.4800e+02, 1.2400e+02, 1.6800e+02,
        1.6000e+02, 1.6000e+02, 0.0000e+00, 2.1200e+02, 2.0800e+02,
        1.8000e+02, 2.0000e+02, 2.6400e+02, 2.1600e+02, 2.2000e+02,
        3.1200e+02, 2.2400e+02, 2.7200e+02, 2.9600e+02, 2.8400e+02,
        3.1600e+02, 2.5200e+02, 5.3600e+02, 3.6800e+02, 4.0800e+02,
        3.7200e+02, 8.2400e+02, 3.5200e+02, 5.9600e+02, 4.5600e+02,
        8.6000e+02, 9.1600e+02, 4.0000e+02, 8.8000e+02, 9.0800e+02,
        5.8000e+02, 1.8600e+03, 1.4160e+03, 2.5640e+03, 2.0360e+03,
        3.3920e+03, 5.9280e+03, 5.7240e+03, 1.1964e+04, 1.1436e+04,
        1.6256e+04, 1.7772e+04, 2.0324e+04, 2.1444e+04, 1.7484e+04,
        2.3296e+04, 1.6144e+04, 1.2096e+04, 1.1748e+04, 9.4080e+03,
        9.0200e+03, 5.0800e+03, 5.3160e+03, 2.7760e+03, 1.3640e+03,
        2.0560e+03, 8.7200e+02, 1.2600e+03, 8.6800e+02, 3.7600e+02,
        5.5200e+02, 1.7600e+02, 4.3200e+02, 1.9200e+02, 1.5600e+02,
        2.5200e+02, 1.1200e+02, 1.3600e+02, 1.1600e+02, 1.0400e+02,
        8.8000e+01, 1.1600e+02, 1.0000e+02, 8.8000e+01, 6.0000e+01,
        1.0800e+02, 7.6000e+01, 1.1600e+02, 8.8000e+01, 7.6000e+01,
        6.8000e+01, 9.2000e+01, 7.2000e+01, 0.0000e+00, 4.4000e+01,
        6.4000e+01, 5.6000e+01, 0.0000e+00, 1.1200e+02, 7.2000e+01,
        7.6000e+01, 0.0000e+00, 9.6000e+01, 5.2000e+01, 0.0000e+00,
        0.0000e+00, 3.2000e+01, 4.4000e+01, 0.0000e+00, 4.8000e+01,
        0.0000e+00, 7.6000e+01, 2.8000e+01, 0.0000e+00, 3.6000e+01,
        3.6000e+01, 0.0000e+00, 4.4000e+01, 0.0000e+00, 2.8000e+01,
        0.0000e+00, 2.0000e+01, 5.2000e+01, 0.0000e+00, 2.0000e+01,
        0.0000e+00, 3.2000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        2.0000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00, 1.2000e+01,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 2.8000e+01, 0.0000e+00, 8.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6000e+01,
        0.0000e+00, 8.0000e+00, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        2.8000e+01, 0.0000e+00, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 0.0000e+00, 3.6000e+01, 0.0000e+00,
        4.8000e+01, 0.0000e+00, 0.0000e+00, 2.4000e+01, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 3.6000e+01, 0.0000e+00, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        4.0000e+00]),
 array([  0.        ,   0.99609375,   1.9921875 ,   2.98828125,
          3.984375  ,   4.98046875,   5.9765625 ,   6.97265625,
          7.96875   ,   8.96484375,   9.9609375 ,  10.95703125,
         11.953125  ,  12.94921875,  13.9453125 ,  14.94140625,
         15.9375    ,  16.93359375,  17.9296875 ,  18.92578125,
         19.921875  ,  20.91796875,  21.9140625 ,  22.91015625,
         23.90625   ,  24.90234375,  25.8984375 ,  26.89453125,
         27.890625  ,  28.88671875,  29.8828125 ,  30.87890625,
         31.875     ,  32.87109375,  33.8671875 ,  34.86328125,
         35.859375  ,  36.85546875,  37.8515625 ,  38.84765625,
         39.84375   ,  40.83984375,  41.8359375 ,  42.83203125,
         43.828125  ,  44.82421875,  45.8203125 ,  46.81640625,
         47.8125    ,  48.80859375,  49.8046875 ,  50.80078125,
         51.796875  ,  52.79296875,  53.7890625 ,  54.78515625,
         55.78125   ,  56.77734375,  57.7734375 ,  58.76953125,
         59.765625  ,  60.76171875,  61.7578125 ,  62.75390625,
         63.75      ,  64.74609375,  65.7421875 ,  66.73828125,
         67.734375  ,  68.73046875,  69.7265625 ,  70.72265625,
         71.71875   ,  72.71484375,  73.7109375 ,  74.70703125,
         75.703125  ,  76.69921875,  77.6953125 ,  78.69140625,
         79.6875    ,  80.68359375,  81.6796875 ,  82.67578125,
         83.671875  ,  84.66796875,  85.6640625 ,  86.66015625,
         87.65625   ,  88.65234375,  89.6484375 ,  90.64453125,
         91.640625  ,  92.63671875,  93.6328125 ,  94.62890625,
         95.625     ,  96.62109375,  97.6171875 ,  98.61328125,
         99.609375  , 100.60546875, 101.6015625 , 102.59765625,
        103.59375   , 104.58984375, 105.5859375 , 106.58203125,
        107.578125  , 108.57421875, 109.5703125 , 110.56640625,
        111.5625    , 112.55859375, 113.5546875 , 114.55078125,
        115.546875  , 116.54296875, 117.5390625 , 118.53515625,
        119.53125   , 120.52734375, 121.5234375 , 122.51953125,
        123.515625  , 124.51171875, 125.5078125 , 126.50390625,
        127.5       , 128.49609375, 129.4921875 , 130.48828125,
        131.484375  , 132.48046875, 133.4765625 , 134.47265625,
        135.46875   , 136.46484375, 137.4609375 , 138.45703125,
        139.453125  , 140.44921875, 141.4453125 , 142.44140625,
        143.4375    , 144.43359375, 145.4296875 , 146.42578125,
        147.421875  , 148.41796875, 149.4140625 , 150.41015625,
        151.40625   , 152.40234375, 153.3984375 , 154.39453125,
        155.390625  , 156.38671875, 157.3828125 , 158.37890625,
        159.375     , 160.37109375, 161.3671875 , 162.36328125,
        163.359375  , 164.35546875, 165.3515625 , 166.34765625,
        167.34375   , 168.33984375, 169.3359375 , 170.33203125,
        171.328125  , 172.32421875, 173.3203125 , 174.31640625,
        175.3125    , 176.30859375, 177.3046875 , 178.30078125,
        179.296875  , 180.29296875, 181.2890625 , 182.28515625,
        183.28125   , 184.27734375, 185.2734375 , 186.26953125,
        187.265625  , 188.26171875, 189.2578125 , 190.25390625,
        191.25      , 192.24609375, 193.2421875 , 194.23828125,
        195.234375  , 196.23046875, 197.2265625 , 198.22265625,
        199.21875   , 200.21484375, 201.2109375 , 202.20703125,
        203.203125  , 204.19921875, 205.1953125 , 206.19140625,
        207.1875    , 208.18359375, 209.1796875 , 210.17578125,
        211.171875  , 212.16796875, 213.1640625 , 214.16015625,
        215.15625   , 216.15234375, 217.1484375 , 218.14453125,
        219.140625  , 220.13671875, 221.1328125 , 222.12890625,
        223.125     , 224.12109375, 225.1171875 , 226.11328125,
        227.109375  , 228.10546875, 229.1015625 , 230.09765625,
        231.09375   , 232.08984375, 233.0859375 , 234.08203125,
        235.078125  , 236.07421875, 237.0703125 , 238.06640625,
        239.0625    , 240.05859375, 241.0546875 , 242.05078125,
        243.046875  , 244.04296875, 245.0390625 , 246.03515625,
        247.03125   , 248.02734375, 249.0234375 , 250.01953125,
        251.015625  , 252.01171875, 253.0078125 , 254.00390625,
        255.        ]),
 <a list of 256 Patch objects>)

In [95]: f, ax = plt.subplots(1, 2)

In [96]: moon2 = moon+100

In [97]: ax[0].imshow(moon2, cmap='gray', vmin=0, vmin=255)
  File "<ipython-input-97-bff369980a94>", line 1
    ax[0].imshow(moon2, cmap='gray', vmin=0, vmin=255)
                                            ^
SyntaxError: keyword argument repeated


In [98]: ax[0].imshow(moon2, cmap='gray', vmin=0, vmax=255)
Out[98]: <matplotlib.image.AxesImage at 0x7f1209744d68>

In [99]: moon2.dtype
Out[99]: dtype('uint8')

In [100]: moon*100
Out[100]:
array([[ 80,  80, 168, ...,  84, 128, 128],
       [ 80,  80, 168, ...,  84, 128, 128],
       [ 80,  80, 168, ...,  84, 128, 128],
       ...,
       [148, 148, 192, ..., 180,  80,  80],
       [136, 136,  36, ...,  24,  24,  24],
       [136, 136,  36, ...,  24,  24,  24]], dtype=uint8)

In [101]: moon/2
Out[101]:
array([[58. , 58. , 61. , ..., 46.5, 48. , 48. ],
       [58. , 58. , 61. , ..., 46.5, 48. , 48. ],
       [58. , 58. , 61. , ..., 46.5, 48. , 48. ],
       ...,
       [54.5, 54.5, 56. , ..., 58.5, 58. , 58. ],
       [57. , 57. , 56.5, ..., 59. , 59. , 59. ],
       [57. , 57. , 56.5, ..., 59. , 59. , 59. ]])

In [102]: (moon/2).dtype
Out[102]: dtype('float64')

In [103]: moon2.max()
Out[103]: 255

In [104]: moon2.min()
Out[104]: 0

In [105]: moon2 = np.float64(moon) + 100

In [106]: moon2.max()
Out[106]: 355.0

In [107]: moon2.min()
Out[107]: 100.0

In [108]: ax[0].imshow(moon2, cmap='gray', vmin=0, vmax=255)
Out[108]: <matplotlib.image.AxesImage at 0x7f1209796128>

In [109]: ax[1].hist(moon2.ravel(), bins=np.arange(256+1))
Out[109]:
(array([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.4000e+02, 0.0000e+00, 6.0000e+01, 3.6000e+01, 0.0000e+00,
        6.0000e+01, 5.2000e+01, 0.0000e+00, 5.2000e+01, 0.0000e+00,
        6.0000e+01, 8.0000e+01, 0.0000e+00, 4.0000e+00, 4.4000e+01,
        0.0000e+00, 5.6000e+01, 0.0000e+00, 8.8000e+01, 7.2000e+01,
        0.0000e+00, 8.0000e+01, 7.6000e+01, 0.0000e+00, 5.2000e+01,
        6.8000e+01, 0.0000e+00, 6.4000e+01, 0.0000e+00, 8.8000e+01,
        8.0000e+01, 0.0000e+00, 7.2000e+01, 4.0000e+01, 0.0000e+00,
        7.2000e+01, 3.6000e+01, 0.0000e+00, 4.8000e+01, 6.4000e+01,
        0.0000e+00, 6.4000e+01, 4.8000e+01, 0.0000e+00, 2.8000e+01,
        7.6000e+01, 0.0000e+00, 8.4000e+01, 7.6000e+01, 8.8000e+01,
        0.0000e+00, 8.0000e+01, 1.0800e+02, 0.0000e+00, 5.2000e+01,
        7.6000e+01, 9.2000e+01, 0.0000e+00, 8.8000e+01, 1.0000e+02,
        1.0000e+02, 0.0000e+00, 1.0400e+02, 0.0000e+00, 1.3200e+02,
        1.0800e+02, 0.0000e+00, 1.4800e+02, 1.2400e+02, 1.6800e+02,
        1.6000e+02, 1.6000e+02, 0.0000e+00, 2.1200e+02, 2.0800e+02,
        1.8000e+02, 2.0000e+02, 2.6400e+02, 2.1600e+02, 2.2000e+02,
        3.1200e+02, 2.2400e+02, 2.7200e+02, 2.9600e+02, 2.8400e+02,
        3.1600e+02, 2.5200e+02, 5.3600e+02, 3.6800e+02, 4.0800e+02,
        3.7200e+02, 8.2400e+02, 3.5200e+02, 5.9600e+02, 4.5600e+02,
        8.6000e+02, 9.1600e+02, 4.0000e+02, 8.8000e+02, 9.0800e+02,
        5.8000e+02, 1.8600e+03, 1.4160e+03, 2.5640e+03, 2.0360e+03,
        3.3920e+03, 5.9280e+03, 5.7240e+03, 1.1964e+04, 1.1436e+04,
        1.6256e+04, 1.7772e+04, 2.0324e+04, 2.1444e+04, 1.7484e+04,
        2.3296e+04, 1.6144e+04, 1.2096e+04, 1.1748e+04, 9.4080e+03,
        9.0200e+03, 5.0800e+03, 5.3160e+03, 2.7760e+03, 1.3640e+03,
        2.0560e+03, 8.7200e+02, 1.2600e+03, 8.6800e+02, 3.7600e+02,
        5.5200e+02, 1.7600e+02, 4.3200e+02, 1.9200e+02, 1.5600e+02,
        2.5200e+02, 1.1200e+02, 1.3600e+02, 1.1600e+02, 1.0400e+02,
        8.8000e+01, 1.1600e+02, 1.0000e+02, 8.8000e+01, 6.0000e+01,
        1.0800e+02, 7.6000e+01, 1.1600e+02, 8.8000e+01, 7.6000e+01,
        6.8000e+01, 9.2000e+01, 7.2000e+01, 0.0000e+00, 4.4000e+01,
        1.2000e+02]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [110]: output = (input - min) / (max - min) * 255
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-110-8ccc702d4fd5> in <module>()
----> 1 output = (input - min) / (max - min) * 255

TypeError: unsupported operand type(s) for -: 'builtin_function_or_method' and 'builtin_function_or_method'
> <ipython-input-110-8ccc702d4fd5>(1)<module>()
----> 1 output = (input - min) / (max - min) * 255

ipdb> c

In [111]: moon3 = (np.float64(moon) - 75) / (150 - 75) * 255

In [112]: f, ax = plt.subplots(1, 2)

In [113]: ax[0].imshow(moon3, cmap='gray', vmin=0, vmax=255)
Out[113]: <matplotlib.image.AxesImage at 0x7f12097e2278>

In [114]: ax[1].hist(moon3.ravel(), bins=np.arange(256+1))
Out[114]:
(array([  180.,     0.,     0.,   200.,     0.,     0.,   264.,     0.,
            0.,     0.,   216.,     0.,     0.,   220.,     0.,     0.,
            0.,   312.,     0.,     0.,   224.,     0.,     0.,   272.,
            0.,     0.,     0.,   296.,     0.,     0.,   284.,     0.,
            0.,     0.,   316.,     0.,     0.,   252.,     0.,     0.,
          536.,     0.,     0.,     0.,   368.,     0.,     0.,   408.,
            0.,     0.,     0.,   372.,     0.,     0.,   824.,     0.,
            0.,   352.,     0.,     0.,     0.,   596.,     0.,     0.,
          456.,     0.,     0.,     0.,   860.,     0.,     0.,   916.,
            0.,     0.,   400.,     0.,     0.,     0.,   880.,     0.,
            0.,   908.,     0.,     0.,     0.,   580.,     0.,     0.,
         1860.,     0.,     0.,  1416.,     0.,     0.,     0.,  2564.,
            0.,     0.,  2036.,     0.,     0.,     0.,  3392.,     0.,
            0.,  5928.,     0.,     0.,  5724.,     0.,     0.,     0.,
        11964.,     0.,     0., 11436.,     0.,     0.,     0., 16256.,
            0.,     0., 17772.,     0.,     0., 20324.,     0.,     0.,
            0., 21444.,     0.,     0., 17484.,     0.,     0.,     0.,
        23296.,     0.,     0., 16144.,     0.,     0., 12096.,     0.,
            0.,     0., 11748.,     0.,     0.,  9408.,     0.,     0.,
            0.,  9020.,     0.,     0.,  5080.,     0.,     0.,  5316.,
            0.,     0.,     0.,  2776.,     0.,     0.,  1364.,     0.,
            0.,     0.,  2056.,     0.,     0.,   872.,     0.,     0.,
         1260.,     0.,     0.,     0.,   868.,     0.,     0.,   376.,
            0.,     0.,     0.,   552.,     0.,     0.,   176.,     0.,
            0.,   432.,     0.,     0.,     0.,   192.,     0.,     0.,
          156.,     0.,     0.,     0.,   252.,     0.,     0.,   112.,
            0.,     0.,   136.,     0.,     0.,     0.,   116.,     0.,
            0.,   104.,     0.,     0.,     0.,    88.,     0.,     0.,
          116.,     0.,     0.,   100.,     0.,     0.,     0.,    88.,
            0.,     0.,    60.,     0.,     0.,     0.,   108.,     0.,
            0.,    76.,     0.,     0.,   116.,     0.,     0.,     0.,
           88.,     0.,     0.,    76.,     0.,     0.,     0.,    68.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [115]: facec = io.imread('face.png')

In [116]: f, ax = plt.subplots()

In [117]: facec.shape
Out[117]: (782, 782, 3)

In [118]: im = ax.imshow(facec)

In [119]: moon
Out[119]:
array([[116, 116, 122, ...,  93,  96,  96],
       [116, 116, 122, ...,  93,  96,  96],
       [116, 116, 122, ...,  93,  96,  96],
       ...,
       [109, 109, 112, ..., 117, 116, 116],
       [114, 114, 113, ..., 118, 118, 118],
       [114, 114, 113, ..., 118, 118, 118]], dtype=uint8)

In [120]: from skimage import exposure

In [121]: moon4 = exposure.rescale_intensity(moon, (75, 150))

In [122]: f, ax = plt.subplots(1, 2)

In [123]: ax[0].imshow(moon4, cmap='gray', vmin=0, vmax=255)
Out[123]: <matplotlib.image.AxesImage at 0x7f11fd0e83c8>

In [124]: ax[1].hist(moon4.ravel(), bins=np.arange(256+1))
Out[124]:
(array([ 4608.,     0.,     0.,   200.,     0.,     0.,   264.,     0.,
            0.,     0.,   216.,     0.,     0.,   220.,     0.,     0.,
            0.,   312.,     0.,     0.,   224.,     0.,     0.,   272.,
            0.,     0.,     0.,   296.,     0.,     0.,   284.,     0.,
            0.,     0.,   316.,     0.,     0.,   252.,     0.,     0.,
          536.,     0.,     0.,     0.,   368.,     0.,     0.,   408.,
            0.,     0.,     0.,   372.,     0.,     0.,   824.,     0.,
            0.,   352.,     0.,     0.,     0.,   596.,     0.,     0.,
          456.,     0.,     0.,     0.,   860.,     0.,     0.,   916.,
            0.,     0.,   400.,     0.,     0.,     0.,   880.,     0.,
            0.,   908.,     0.,     0.,     0.,   580.,     0.,     0.,
         1860.,     0.,     0.,  1416.,     0.,     0.,     0.,  2564.,
            0.,     0.,  2036.,     0.,     0.,     0.,  3392.,     0.,
            0.,  5928.,     0.,     0.,  5724.,     0.,     0.,     0.,
        11964.,     0.,     0., 11436.,     0.,     0.,     0., 16256.,
            0.,     0., 17772.,     0.,     0., 20324.,     0.,     0.,
            0., 21444.,     0.,     0., 17484.,     0.,     0.,     0.,
        23296.,     0.,     0., 16144.,     0.,     0., 12096.,     0.,
            0.,     0., 11748.,     0.,     0.,  9408.,     0.,     0.,
            0.,  9020.,     0.,     0.,  5080.,     0.,     0.,  5316.,
            0.,     0.,     0.,  2776.,     0.,     0.,  1364.,     0.,
            0.,     0.,  2056.,     0.,     0.,   872.,     0.,     0.,
         1260.,     0.,     0.,     0.,   868.,     0.,     0.,   376.,
            0.,     0.,     0.,   552.,     0.,     0.,   176.,     0.,
            0.,   432.,     0.,     0.,     0.,   192.,     0.,     0.,
          156.,     0.,     0.,     0.,   252.,     0.,     0.,   112.,
            0.,     0.,   136.,     0.,     0.,     0.,   116.,     0.,
            0.,   104.,     0.,     0.,     0.,    88.,     0.,     0.,
          116.,     0.,     0.,   100.,     0.,     0.,     0.,    88.,
            0.,     0.,    60.,     0.,     0.,     0.,   108.,     0.,
            0.,    76.,     0.,     0.,   116.,     0.,     0.,     0.,
           88.,     0.,     0.,    76.,     0.,     0.,     0.,  1800.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [125]: ohki = io.imread('ohki2005.png')

In [126]: ohki.shape
Out[126]: (512, 491)

In [127]: ohki = io.imread('ohki2005.png')

In [128]: ohki.shape
Out[128]: (512, 491)

In [129]: f, ax = plt.subplots(1, 2)

In [130]: f, ax = plt.subplots()

In [131]: np.rot90?

In [132]: ax.imshow(np.rot90(ohki, k=-1), cmap='gray')
Out[132]: <matplotlib.image.AxesImage at 0x7f11fd028860>

In [133]: ax.imshow(ohki, cmap='gray')
Out[133]: <matplotlib.image.AxesImage at 0x7f11fd01c3c8>

In [134]: ax.imshow(ohki, cmap='viridis')
Out[134]: <matplotlib.image.AxesImage at 0x7f11fd024ef0>

In [135]: ax.imshow(ohki, cmap='Pastel1')
Out[135]: <matplotlib.image.AxesImage at 0x7f11fd01c5f8>

In [136]: ax.imshow(ohki, cmap='coolwarm')
Out[136]: <matplotlib.image.AxesImage at 0x7f11fd024710>

In [137]: ax.imshow(ohki, cmap='gray')
Out[137]: <matplotlib.image.AxesImage at 0x7f11fd064fd0>

In [138]: f, ax = plt.subplots()

In [139]: ax.hist(ohki, bins=np.arange(257))
^C
Program interrupted. (Use 'cont' to resume).
--Call--
> /usr/lib/python3.5/signal.py(45)signal()
     43
     44
---> 45 @_wraps(_signal.signal)
     46 def signal(signalnum, handler):
     47     handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))

ipdb> c
^C
Program interrupted. (Use 'cont' to resume).
--Call--
> /usr/lib/python3.5/signal.py(45)signal()
     43
     44
---> 45 @_wraps(_signal.signal)
     46 def signal(signalnum, handler):
     47     handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))

ipdb>
^C
Program interrupted. (Use 'cont' to resume).
--Call--
> /usr/lib/python3.5/signal.py(45)signal()
     43
     44
---> 45 @_wraps(_signal.signal)
     46 def signal(signalnum, handler):
     47     handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))

ipdb> q
---------------------------------------------------------------------------
BdbQuit                                   Traceback (most recent call last)
<ipython-input-139-d368b31585dd> in <module>()
----> 1 ax.hist(ohki, bins=np.arange(257))

/usr/local/lib/python3.5/dist-packages/matplotlib/__init__.py in inner(ax, *args, **kwargs)
   1853                         "the Matplotlib list!)" % (label_namer, func.__name__),
   1854                         RuntimeWarning, stacklevel=2)
-> 1855             return func(ax, *args, **kwargs)
   1856
   1857         inner.__doc__ = _add_data_doc(inner.__doc__,

/usr/local/lib/python3.5/dist-packages/matplotlib/axes/_axes.py in hist(***failed resolving arguments***)
   6604                 patch = _barfunc(bins[:-1]+boffset, height, width,
   6605                                  align='center', log=log,
-> 6606                                  color=c, **{bottom_kwarg: bottom})
   6607                 patches.append(patch)
   6608                 if stacked:

/usr/local/lib/python3.5/dist-packages/matplotlib/__init__.py in inner(ax, *args, **kwargs)
   1853                         "the Matplotlib list!)" % (label_namer, func.__name__),
   1854                         RuntimeWarning, stacklevel=2)
-> 1855             return func(ax, *args, **kwargs)
   1856
   1857         inner.__doc__ = _add_data_doc(inner.__doc__,

/usr/local/lib/python3.5/dist-packages/matplotlib/axes/_axes.py in bar(self, *args, **kwargs)
   2276                 edgecolor=e,
   2277                 linewidth=lw,
-> 2278                 label='_nolegend_',
   2279                 )
   2280             r.update(kwargs)

/usr/local/lib/python3.5/dist-packages/matplotlib/patches.py in __init__(self, xy, width, height, angle, **kwargs)
    684         """
    685
--> 686         Patch.__init__(self, **kwargs)
    687
    688         self._x0 = xy[0]

/usr/local/lib/python3.5/dist-packages/matplotlib/patches.py in __init__(self, edgecolor, facecolor, color, linewidth, linestyle, antialiased, hatch, fill, capstyle, joinstyle, **kwargs)
     92
     93         self.set_fill(fill)
---> 94         self.set_linestyle(linestyle)
     95         self.set_linewidth(linewidth)
     96         self.set_antialiased(antialiased)

/usr/local/lib/python3.5/dist-packages/matplotlib/patches.py in set_linestyle(self, ls)
    405         self._linestyle = ls
    406         # get the unscalled dash pattern
--> 407         offset, ls = self._us_dashes = mlines._get_dash_pattern(ls)
    408         # scale the dash pattern by the linewidth
    409         self._dashoffset, self._dashes = mlines._scale_dashes(

/usr/lib/python3.5/pdb.py in sigint_handler(self, signum, frame)
    189         self.set_trace(frame)
    190         # restore previous signal handler
--> 191         signal.signal(signal.SIGINT, self._previous_sigint_handler)
    192
    193     def reset(self):

/usr/lib/python3.5/signal.py in signal(signalnum, handler)
     43
     44
---> 45 @_wraps(_signal.signal)
     46 def signal(signalnum, handler):
     47     handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))

/usr/lib/python3.5/bdb.py in trace_dispatch(self, frame, event, arg)
     48             return self.dispatch_line(frame)
     49         if event == 'call':
---> 50             return self.dispatch_call(frame, arg)
     51         if event == 'return':
     52             return self.dispatch_return(frame, arg)

/usr/lib/python3.5/bdb.py in dispatch_call(self, frame, arg)
     81             return self.trace_dispatch
     82         self.user_call(frame, arg)
---> 83         if self.quitting: raise BdbQuit
     84         return self.trace_dispatch
     85

BdbQuit:
> /usr/lib/python3.5/bdb.py(83)dispatch_call()
     81             return self.trace_dispatch
     82         self.user_call(frame, arg)
---> 83         if self.quitting: raise BdbQuit
     84         return self.trace_dispatch
     85

ipdb> c

In [140]: f, ax = plt.subplots()

In [141]: ax.hist(ohki.ravel(), bins=np.arange(257))
Out[141]:
(array([1.300e+01, 3.700e+01, 1.400e+02, 1.470e+02, 1.660e+02, 3.420e+02,
        3.080e+02, 6.280e+02, 7.920e+02, 1.606e+03, 1.186e+03, 2.071e+03,
        1.939e+03, 3.274e+03, 2.057e+03, 2.194e+03, 2.859e+03, 2.635e+03,
        2.709e+03, 2.414e+03, 2.316e+03, 1.948e+03, 1.932e+03, 2.083e+03,
        2.121e+03, 2.783e+03, 2.792e+03, 2.860e+03, 2.919e+03, 2.812e+03,
        2.795e+03, 2.848e+03, 2.605e+03, 2.762e+03, 2.479e+03, 2.411e+03,
        2.569e+03, 2.470e+03, 2.367e+03, 2.252e+03, 2.480e+03, 2.522e+03,
        2.428e+03, 2.552e+03, 2.609e+03, 2.567e+03, 2.470e+03, 2.312e+03,
        2.606e+03, 2.439e+03, 2.413e+03, 2.463e+03, 2.252e+03, 2.357e+03,
        2.426e+03, 2.245e+03, 2.385e+03, 2.279e+03, 2.236e+03, 2.322e+03,
        2.174e+03, 2.192e+03, 2.111e+03, 2.191e+03, 2.115e+03, 2.149e+03,
        2.258e+03, 2.128e+03, 2.141e+03, 2.193e+03, 2.161e+03, 2.310e+03,
        2.281e+03, 2.266e+03, 2.233e+03, 2.158e+03, 2.189e+03, 2.139e+03,
        2.136e+03, 2.101e+03, 2.114e+03, 2.066e+03, 2.001e+03, 1.935e+03,
        1.959e+03, 1.864e+03, 1.829e+03, 1.793e+03, 1.768e+03, 1.835e+03,
        1.670e+03, 1.776e+03, 1.716e+03, 1.680e+03, 1.685e+03, 1.629e+03,
        1.649e+03, 1.633e+03, 1.625e+03, 1.513e+03, 1.442e+03, 1.523e+03,
        1.437e+03, 1.426e+03, 1.438e+03, 1.360e+03, 1.254e+03, 1.307e+03,
        1.363e+03, 1.225e+03, 1.219e+03, 1.234e+03, 1.101e+03, 1.071e+03,
        1.120e+03, 1.030e+03, 9.530e+02, 1.015e+03, 9.610e+02, 9.270e+02,
        8.650e+02, 7.930e+02, 7.930e+02, 6.920e+02, 6.930e+02, 6.800e+02,
        5.780e+02, 6.090e+02, 5.490e+02, 5.260e+02, 5.140e+02, 4.960e+02,
        4.810e+02, 4.610e+02, 4.710e+02, 4.220e+02, 4.220e+02, 4.720e+02,
        4.190e+02, 3.630e+02, 3.340e+02, 3.150e+02, 3.050e+02, 3.240e+02,
        2.740e+02, 2.690e+02, 2.560e+02, 2.210e+02, 2.620e+02, 1.960e+02,
        2.000e+02, 1.920e+02, 2.120e+02, 1.710e+02, 2.050e+02, 2.050e+02,
        2.220e+02, 2.100e+02, 1.790e+02, 1.860e+02, 1.670e+02, 1.820e+02,
        1.470e+02, 1.600e+02, 1.260e+02, 1.600e+02, 1.470e+02, 1.260e+02,
        1.410e+02, 1.340e+02, 1.400e+02, 1.240e+02, 1.040e+02, 1.210e+02,
        1.030e+02, 1.080e+02, 9.500e+01, 9.300e+01, 1.140e+02, 8.400e+01,
        9.900e+01, 7.700e+01, 8.500e+01, 7.300e+01, 4.800e+01, 7.900e+01,
        6.800e+01, 5.700e+01, 7.300e+01, 5.500e+01, 7.700e+01, 6.300e+01,
        6.200e+01, 6.600e+01, 5.100e+01, 5.400e+01, 5.100e+01, 4.400e+01,
        4.600e+01, 4.100e+01, 4.300e+01, 5.300e+01, 4.100e+01, 5.900e+01,
        3.800e+01, 4.200e+01, 4.900e+01, 4.100e+01, 4.000e+01, 4.100e+01,
        3.500e+01, 5.000e+01, 4.900e+01, 4.000e+01, 4.600e+01, 4.800e+01,
        5.700e+01, 6.000e+01, 5.200e+01, 7.900e+01, 5.800e+01, 4.800e+01,
        3.600e+01, 6.000e+01, 3.600e+01, 5.000e+01, 4.600e+01, 3.900e+01,
        3.500e+01, 3.000e+01, 3.100e+01, 3.400e+01, 2.700e+01, 3.600e+01,
        2.000e+01, 1.100e+01, 1.100e+01, 5.000e+00, 0.000e+00, 5.000e+00,
        2.000e+00, 5.000e+00, 4.000e+00, 8.000e+00, 6.000e+00, 3.000e+00,
        7.000e+00, 4.000e+00, 1.000e+01, 1.000e+01, 1.000e+01, 2.200e+01,
        1.700e+01, 1.600e+01, 2.600e+01, 3.000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [142]: f, ax = plt.subplots()

In [143]: ax.imshow(np.float64(ohki)+50, cmap='gray')
Out[143]: <matplotlib.image.AxesImage at 0x7f11f7ddb048>

In [144]: ax.imshow(np.float64(ohki)+50, cmap='gray', vmin=0, vmax=255)
Out[144]: <matplotlib.image.AxesImage at 0x7f11f7b62748>

In [145]: f, ax = plt.subplots()

In [146]: ohki2 = np.float64(ohki)+50

In [147]: ax.hist(ohki2.ravel(), bins=np.arange(257))
Out[147]:
(array([   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,   13.,   37.,  140.,  147.,
         166.,  342.,  308.,  628.,  792., 1606., 1186., 2071., 1939.,
        3274., 2057., 2194., 2859., 2635., 2709., 2414., 2316., 1948.,
        1932., 2083., 2121., 2783., 2792., 2860., 2919., 2812., 2795.,
        2848., 2605., 2762., 2479., 2411., 2569., 2470., 2367., 2252.,
        2480., 2522., 2428., 2552., 2609., 2567., 2470., 2312., 2606.,
        2439., 2413., 2463., 2252., 2357., 2426., 2245., 2385., 2279.,
        2236., 2322., 2174., 2192., 2111., 2191., 2115., 2149., 2258.,
        2128., 2141., 2193., 2161., 2310., 2281., 2266., 2233., 2158.,
        2189., 2139., 2136., 2101., 2114., 2066., 2001., 1935., 1959.,
        1864., 1829., 1793., 1768., 1835., 1670., 1776., 1716., 1680.,
        1685., 1629., 1649., 1633., 1625., 1513., 1442., 1523., 1437.,
        1426., 1438., 1360., 1254., 1307., 1363., 1225., 1219., 1234.,
        1101., 1071., 1120., 1030.,  953., 1015.,  961.,  927.,  865.,
         793.,  793.,  692.,  693.,  680.,  578.,  609.,  549.,  526.,
         514.,  496.,  481.,  461.,  471.,  422.,  422.,  472.,  419.,
         363.,  334.,  315.,  305.,  324.,  274.,  269.,  256.,  221.,
         262.,  196.,  200.,  192.,  212.,  171.,  205.,  205.,  222.,
         210.,  179.,  186.,  167.,  182.,  147.,  160.,  126.,  160.,
         147.,  126.,  141.,  134.,  140.,  124.,  104.,  121.,  103.,
         108.,   95.,   93.,  114.,   84.,   99.,   77.,   85.,   73.,
          48.,   79.,   68.,   57.,   73.,   55.,   77.,   63.,   62.,
          66.,   51.,   54.,   51.,   44.,   46.,   41.,   43.,   53.,
          41.,   59.,   38.,   91.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [148]: from skimage import exposure

In [149]: ohki3 = exposure.rescale_intensity(ohki, (0, 100))

In [150]: f, ax = plt.subplots()

In [151]: ax.imshow(ohki3, cmap='gray', vmin=0, vmax=255)
Out[151]: <matplotlib.image.AxesImage at 0x7f11f777da58>

In [152]: f, ax = plt.subplots()

In [153]: ax.hist(ohki3.ravel(), bins=np.arange(257))
Out[153]:
(array([1.3000e+01, 0.0000e+00, 3.7000e+01, 0.0000e+00, 0.0000e+00,
        1.4000e+02, 0.0000e+00, 1.4700e+02, 0.0000e+00, 0.0000e+00,
        1.6600e+02, 0.0000e+00, 3.4200e+02, 0.0000e+00, 0.0000e+00,
        3.0800e+02, 0.0000e+00, 6.2800e+02, 0.0000e+00, 0.0000e+00,
        7.9200e+02, 0.0000e+00, 1.6060e+03, 0.0000e+00, 0.0000e+00,
        1.1860e+03, 0.0000e+00, 0.0000e+00, 2.0710e+03, 0.0000e+00,
        1.9390e+03, 0.0000e+00, 0.0000e+00, 3.2740e+03, 0.0000e+00,
        2.0570e+03, 0.0000e+00, 0.0000e+00, 2.1940e+03, 0.0000e+00,
        2.8590e+03, 0.0000e+00, 0.0000e+00, 2.6350e+03, 0.0000e+00,
        2.7090e+03, 0.0000e+00, 0.0000e+00, 2.4140e+03, 0.0000e+00,
        0.0000e+00, 2.3160e+03, 0.0000e+00, 1.9480e+03, 0.0000e+00,
        0.0000e+00, 1.9320e+03, 0.0000e+00, 2.0830e+03, 0.0000e+00,
        0.0000e+00, 2.1210e+03, 0.0000e+00, 2.7830e+03, 0.0000e+00,
        0.0000e+00, 2.7920e+03, 0.0000e+00, 2.8600e+03, 0.0000e+00,
        0.0000e+00, 2.9190e+03, 0.0000e+00, 2.8120e+03, 0.0000e+00,
        0.0000e+00, 2.7950e+03, 0.0000e+00, 0.0000e+00, 2.8480e+03,
        0.0000e+00, 2.6050e+03, 0.0000e+00, 0.0000e+00, 2.7620e+03,
        0.0000e+00, 2.4790e+03, 0.0000e+00, 0.0000e+00, 2.4110e+03,
        0.0000e+00, 2.5690e+03, 0.0000e+00, 0.0000e+00, 2.4700e+03,
        0.0000e+00, 2.3670e+03, 0.0000e+00, 0.0000e+00, 2.2520e+03,
        0.0000e+00, 0.0000e+00, 2.4800e+03, 0.0000e+00, 2.5220e+03,
        0.0000e+00, 0.0000e+00, 2.4280e+03, 0.0000e+00, 2.5520e+03,
        0.0000e+00, 0.0000e+00, 2.6090e+03, 0.0000e+00, 2.5670e+03,
        0.0000e+00, 0.0000e+00, 2.4700e+03, 0.0000e+00, 2.3120e+03,
        0.0000e+00, 0.0000e+00, 2.6060e+03, 0.0000e+00, 2.4390e+03,
        0.0000e+00, 0.0000e+00, 2.4130e+03, 0.0000e+00, 0.0000e+00,
        2.4630e+03, 0.0000e+00, 2.2520e+03, 0.0000e+00, 0.0000e+00,
        2.3570e+03, 0.0000e+00, 2.4260e+03, 0.0000e+00, 0.0000e+00,
        2.2450e+03, 0.0000e+00, 2.3850e+03, 0.0000e+00, 0.0000e+00,
        2.2790e+03, 0.0000e+00, 2.2360e+03, 0.0000e+00, 0.0000e+00,
        2.3220e+03, 0.0000e+00, 0.0000e+00, 2.1740e+03, 0.0000e+00,
        2.1920e+03, 0.0000e+00, 0.0000e+00, 2.1110e+03, 0.0000e+00,
        2.1910e+03, 0.0000e+00, 0.0000e+00, 2.1150e+03, 0.0000e+00,
        2.1490e+03, 0.0000e+00, 0.0000e+00, 2.2580e+03, 0.0000e+00,
        2.1280e+03, 0.0000e+00, 0.0000e+00, 2.1410e+03, 0.0000e+00,
        2.1930e+03, 0.0000e+00, 0.0000e+00, 2.1610e+03, 0.0000e+00,
        0.0000e+00, 2.3100e+03, 0.0000e+00, 2.2810e+03, 0.0000e+00,
        0.0000e+00, 2.2660e+03, 0.0000e+00, 2.2330e+03, 0.0000e+00,
        0.0000e+00, 2.1580e+03, 0.0000e+00, 2.1890e+03, 0.0000e+00,
        0.0000e+00, 2.1390e+03, 0.0000e+00, 2.1360e+03, 0.0000e+00,
        0.0000e+00, 2.1010e+03, 0.0000e+00, 0.0000e+00, 2.1140e+03,
        0.0000e+00, 2.0660e+03, 0.0000e+00, 0.0000e+00, 2.0010e+03,
        0.0000e+00, 1.9350e+03, 0.0000e+00, 0.0000e+00, 1.9590e+03,
        0.0000e+00, 1.8640e+03, 0.0000e+00, 0.0000e+00, 1.8290e+03,
        0.0000e+00, 1.7930e+03, 0.0000e+00, 0.0000e+00, 1.7680e+03,
        0.0000e+00, 1.8350e+03, 0.0000e+00, 0.0000e+00, 1.6700e+03,
        0.0000e+00, 0.0000e+00, 1.7760e+03, 0.0000e+00, 1.7160e+03,
        0.0000e+00, 0.0000e+00, 1.6800e+03, 0.0000e+00, 1.6850e+03,
        0.0000e+00, 0.0000e+00, 1.6290e+03, 0.0000e+00, 1.6490e+03,
        0.0000e+00, 0.0000e+00, 1.6330e+03, 0.0000e+00, 1.6250e+03,
        0.0000e+00, 0.0000e+00, 1.5130e+03, 0.0000e+00, 0.0000e+00,
        4.6022e+04]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [154]: plt.close('all')

In [155]: ohki.shape
Out[155]: (512, 491)

In [156]: 500/3
Out[156]: 166.66666666666666

In [157]: subset = ohki[170:340, 170:340]

In [158]: 512/3
Out[158]: 170.66666666666666

In [159]: np.round(512/3)
Out[159]: 171.0

In [160]: np.int64(np.round(512/3))
Out[160]: 171

In [161]: np.int64(512/3)
Out[161]: 170

In [162]: start = np.int64(512/3)

In [163]: stop = np.int64(512/3*2)

In [164]: start
Out[164]: 170

In [165]: stop
Out[165]: 341

In [166]: ohki[start:stop, start:stop]
Out[166]:
array([[ 97, 103, 106, ...,  82,  82,  81],
       [ 98, 101, 102, ...,  83,  83,  84],
       [ 98,  98,  98, ...,  83,  84,  86],
       ...,
       [220, 216, 215, ...,  88,  83,  79],
       [220, 217, 215, ...,  83,  78,  74],
       [220, 219, 216, ...,  85,  81,  76]], dtype=uint8)

In [167]: subset.shape
Out[167]: (170, 170)

In [168]: f, ax = plt.subplots()

In [169]: ax.imshow(subset, cmap='gray', vmin=0, vmax=255)
Out[169]: <matplotlib.image.AxesImage at 0x7f11f71af898>

In [170]: f, ax = plt.subplots()

In [171]: ax.hist(subset, bins=np.arange(257))
^C
Program interrupted. (Use 'cont' to resume).
--Call--
> /usr/lib/python3.5/signal.py(45)signal()
     43
     44
---> 45 @_wraps(_signal.signal)
     46 def signal(signalnum, handler):
     47     handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))

ipdb> q
---------------------------------------------------------------------------
BdbQuit                                   Traceback (most recent call last)
<ipython-input-171-0a17261e58b6> in <module>()
----> 1 ax.hist(subset, bins=np.arange(257))

/usr/local/lib/python3.5/dist-packages/matplotlib/__init__.py in inner(ax, *args, **kwargs)
   1853                         "the Matplotlib list!)" % (label_namer, func.__name__),
   1854                         RuntimeWarning, stacklevel=2)
-> 1855             return func(ax, *args, **kwargs)
   1856
   1857         inner.__doc__ = _add_data_doc(inner.__doc__,

/usr/local/lib/python3.5/dist-packages/matplotlib/axes/_axes.py in hist(***failed resolving arguments***)
   6604                 patch = _barfunc(bins[:-1]+boffset, height, width,
   6605                                  align='center', log=log,
-> 6606                                  color=c, **{bottom_kwarg: bottom})
   6607                 patches.append(patch)
   6608                 if stacked:

/usr/local/lib/python3.5/dist-packages/matplotlib/__init__.py in inner(ax, *args, **kwargs)
   1853                         "the Matplotlib list!)" % (label_namer, func.__name__),
   1854                         RuntimeWarning, stacklevel=2)
-> 1855             return func(ax, *args, **kwargs)
   1856
   1857         inner.__doc__ = _add_data_doc(inner.__doc__,

/usr/local/lib/python3.5/dist-packages/matplotlib/axes/_axes.py in bar(self, *args, **kwargs)
   2284             elif orientation == 'horizontal':
   2285                 r.sticky_edges.x.append(l)
-> 2286             self.add_patch(r)
   2287             patches.append(r)
   2288

/usr/local/lib/python3.5/dist-packages/matplotlib/axes/_base.py in add_patch(self, p)
   2005         if p.get_clip_path() is None:
   2006             p.set_clip_path(self.patch)
-> 2007         self._update_patch_limits(p)
   2008         self.patches.append(p)
   2009         p._remove_method = lambda h: self.patches.remove(h)

/usr/local/lib/python3.5/dist-packages/matplotlib/axes/_base.py in _update_patch_limits(self, patch)
   2032
   2033             updatex, updatey = patch.get_transform().\
-> 2034                 contains_branch_seperately(self.transData)
   2035             self.update_datalim(xys, updatex=updatex,
   2036                                 updatey=updatey)

/usr/local/lib/python3.5/dist-packages/matplotlib/transforms.py in contains_branch_seperately(self, other_transform)
   1374         # for a non-blended transform each separate dimension is the same, so
   1375         # just return the appropriate shape.
-> 1376         return [self.contains_branch(other_transform)] * 2
   1377
   1378     def __sub__(self, other):

/usr/local/lib/python3.5/dist-packages/matplotlib/transforms.py in contains_branch(self, other)
   1353
   1354         # check that a subtree is equal to other (starting from self)
-> 1355         for _, sub_tree in self._iter_break_from_left_to_right():
   1356             if sub_tree == other:
   1357                 return True

/usr/local/lib/python3.5/dist-packages/matplotlib/transforms.py in _iter_break_from_left_to_right(self)
   2455     def _iter_break_from_left_to_right(self):
   2456         for lh_compliment, rh_compliment in self._a._iter_break_from_left_to_right():
-> 2457             yield lh_compliment, rh_compliment + self._b
   2458         for lh_compliment, rh_compliment in self._b._iter_break_from_left_to_right():
   2459             yield self._a + lh_compliment, rh_compliment

/usr/local/lib/python3.5/dist-packages/matplotlib/transforms.py in __add__(self, other)
   1289         """
   1290         if isinstance(other, Transform):
-> 1291             return composite_transform_factory(self, other)
   1292         raise TypeError(
   1293             "Can not add Transform to object of type '%s'" % type(other))

/usr/local/lib/python3.5/dist-packages/matplotlib/transforms.py in composite_transform_factory(a, b)
   2606     elif isinstance(a, Affine2D) and isinstance(b, Affine2D):
   2607         return CompositeAffine2D(a, b)
-> 2608     return CompositeGenericTransform(a, b)
   2609
   2610

/usr/local/lib/python3.5/dist-packages/matplotlib/transforms.py in __init__(self, a, b, **kwargs)
   2414             raise ValueError("The output dimension of 'a' must be equal to "
   2415                              "the input dimensions of 'b'")
-> 2416         self.input_dims = a.input_dims
   2417         self.output_dims = b.output_dims
   2418

/usr/lib/python3.5/pdb.py in sigint_handler(self, signum, frame)
    189         self.set_trace(frame)
    190         # restore previous signal handler
--> 191         signal.signal(signal.SIGINT, self._previous_sigint_handler)
    192
    193     def reset(self):

/usr/lib/python3.5/signal.py in signal(signalnum, handler)
     43
     44
---> 45 @_wraps(_signal.signal)
     46 def signal(signalnum, handler):
     47     handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))

/usr/lib/python3.5/bdb.py in trace_dispatch(self, frame, event, arg)
     48             return self.dispatch_line(frame)
     49         if event == 'call':
---> 50             return self.dispatch_call(frame, arg)
     51         if event == 'return':
     52             return self.dispatch_return(frame, arg)

/usr/lib/python3.5/bdb.py in dispatch_call(self, frame, arg)
     81             return self.trace_dispatch
     82         self.user_call(frame, arg)
---> 83         if self.quitting: raise BdbQuit
     84         return self.trace_dispatch
     85

BdbQuit:
> /usr/lib/python3.5/bdb.py(83)dispatch_call()
     81             return self.trace_dispatch
     82         self.user_call(frame, arg)
---> 83         if self.quitting: raise BdbQuit
     84         return self.trace_dispatch
     85

ipdb> c

In [172]: f, ax = plt.subplots()

In [173]: ax.hist(subset.ravel(), bins=np.arange(257))
Out[173]:
(array([  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   7.,   4.,   9.,  10.,  12.,
          9.,   4.,   2.,  10.,   6.,   3.,   6.,   4.,   4.,   3.,   6.,
          5.,   6.,   5.,   4.,   7.,  11.,  16.,  24.,  20.,  15.,  24.,
         19.,  26.,  44.,  48.,  58.,  47.,  46.,  70., 103.,  92., 109.,
        122., 143., 229., 226., 244., 295., 302., 288., 354., 365., 389.,
        338., 399., 360., 374., 423., 417., 434., 436., 495., 484., 468.,
        502., 539., 458., 469., 419., 430., 397., 438., 412., 425., 416.,
        391., 345., 396., 362., 411., 362., 383., 365., 370., 385., 414.,
        403., 466., 405., 399., 480., 409., 402., 410., 395., 339., 346.,
        289., 283., 237., 232., 214., 192., 200., 164., 165., 142., 149.,
        123., 106., 111., 104.,  96., 111., 102., 104.,  85.,  84.,  90.,
        102.,  92.,  75.,  84.,  71.,  81.,  73.,  80.,  63.,  71.,  70.,
         71.,  78.,  82.,  74.,  58.,  67.,  54.,  70.,  44.,  50.,  36.,
         47.,  43.,  50.,  35.,  47.,  48.,  42.,  30.,  47.,  35.,  35.,
         31.,  36.,  51.,  37.,  40.,  34.,  38.,  34.,  19.,  21.,  22.,
         14.,  32.,  20.,  26.,  20.,  22.,  25.,  17.,  16.,  28.,  21.,
         22.,  24.,  18.,  21.,  20.,  25.,  19.,  28.,  21.,  17.,  13.,
         15.,  17.,  22.,  24.,  11.,  20.,  27.,  16.,  22.,  19.,  22.,
         19.,  23.,  15.,  28.,  19.,  15.,  22.,  20.,   9.,   9.,  10.,
         19.,  17.,  23.,  17.,   8.,   6.,   4.,   0.,   3.,   2.,   5.,
          4.,   8.,   6.,   3.,   7.,   4.,  10.,  10.,  10.,  22.,  17.,
         16.,  26.,   3.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [174]: ndimage.zoom(subset, 2)
Out[174]:
array([[ 97,  99, 103, ...,  82,  82,  82],
       [ 97,  99, 102, ...,  82,  82,  82],
       [ 98,  99, 101, ...,  83,  83,  83],
       ...,
       [220, 218, 216, ...,  88,  84,  83],
       [220, 219, 217, ...,  85,  81,  80],
       [220, 219, 217, ...,  83,  79,  78]], dtype=uint8)

In [175]: ndimage.zoom(subset, 2).shape
Out[175]: (340, 340)

In [176]: f, ax = plt.subplots()

In [177]: ax.imshow(ndimage.zoom(subset, 2), vmin=0, vmax=255)
Out[177]: <matplotlib.image.AxesImage at 0x7f11f584a0f0>

In [178]: f, ax = plt.subplots()

In [179]: ax.imshow(ndimage.zoom(subset, 2), vmin=0, vmax=255 cmap='gray')
  File "<ipython-input-179-9cdb20fdf9f2>", line 1
    ax.imshow(ndimage.zoom(subset, 2), vmin=0, vmax=255 cmap='gray')
                                                           ^
SyntaxError: invalid syntax


In [180]: c
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-180-2b66fd261ee5> in <module>()
----> 1 c

NameError: name 'c' is not defined
> <ipython-input-180-2b66fd261ee5>(1)<module>()
----> 1 c

ipdb> c

In [181]: ax.imshow(ndimage.zoom(subset, 2), vmin=0, vmax=255, cmap='gray')
Out[181]: <matplotlib.image.AxesImage at 0x7f11f560d198>

In [182]: f, ax = plt.subplots()

In [183]: ax.hist(ndimage.zoom(subset, 2).ravel(), bins=np.arange(257))
Out[183]:
(array([   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,   26.,   22.,   36.,   34.,   47.,   33.,   18.,   34.,
          18.,   15.,   25.,   15.,   23.,   17.,   20.,   17.,   19.,
          21.,   19.,   20.,   20.,   51.,   84.,   73.,   68.,   70.,
          94.,   88.,  123.,  160.,  189.,  217.,  190.,  198.,  286.,
         385.,  388.,  460.,  482.,  584.,  865.,  907., 1054., 1123.,
        1124., 1239., 1482., 1413., 1458., 1453., 1534., 1462., 1551.,
        1586., 1680., 1691., 1828., 1999., 1904., 1925., 1952., 2046.,
        1975., 1801., 1716., 1713., 1645., 1740., 1703., 1648., 1600.,
        1525., 1531., 1507., 1536., 1568., 1430., 1492., 1511., 1515.,
        1591., 1598., 1691., 1763., 1660., 1647., 1838., 1697., 1606.,
        1559., 1512., 1475., 1298., 1226., 1094., 1025.,  942.,  861.,
         760.,  709.,  670.,  690.,  616.,  523.,  475.,  468.,  458.,
         415.,  384.,  404.,  422.,  410.,  407.,  366.,  356.,  333.,
         323.,  320.,  296.,  323.,  333.,  302.,  303.,  266.,  280.,
         288.,  308.,  281.,  302.,  296.,  251.,  274.,  214.,  243.,
         205.,  218.,  181.,  183.,  163.,  162.,  149.,  157.,  164.,
         174.,  146.,  161.,  143.,  164.,  147.,  166.,  177.,  154.,
         140.,  145.,  139.,  140.,  105.,   97.,   75.,   80.,   83.,
          90.,   84.,   90.,   99.,   99.,   82.,   80.,   80.,   84.,
          92.,   78.,   78.,   75.,   93.,  101.,   85.,   88.,   68.,
          63.,   87.,   78.,   70.,   81.,   81.,   75.,   74.,   75.,
          86.,   78.,   75.,   79.,   85.,   82.,   81.,   78.,   90.,
          67.,   74.,   80.,   54.,   44.,   48.,   58.,   73.,   82.,
          59.,   25.,   21.,   12.,   15.,   17.,   21.,   15.,   19.,
          19.,   25.,   15.,   22.,   34.,   22.,   37.,   53.,   83.,
          68.,   75.,   93.,   15.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [184]: plt.close('all')

In [185]: immun = data.immunohistochemistry()

In [186]: immun.shape
Out[186]: (512, 512, 3)

In [187]: f, ax = plt.subplots()

In [188]: ax.imshow(immun)
Out[188]: <matplotlib.image.AxesImage at 0x7f11f4f9b6d8>

In [189]: temp = immun.copy()

In [190]: temp.shape
Out[190]: (512, 512, 3)

In [191]: temp[:, :, 0]
Out[191]:
array([[156, 163, 156, ..., 152, 169, 189],
       [141, 144, 141, ..., 164, 167, 175],
       [125, 132, 138, ..., 172, 164, 164],
       ...,
       [221, 226, 234, ..., 212, 214, 217],
       [217, 222, 230, ..., 214, 211, 215],
       [222, 222, 224, ..., 210, 210, 215]], dtype=uint8)

In [192]: temp[:, :, 1]
Out[192]:
array([[118, 125, 116, ..., 160, 175, 196],
       [105, 108, 102, ..., 172, 173, 182],
       [ 92,  99, 103, ..., 181, 171, 171],
       ...,
       [218, 223, 231, ..., 211, 210, 213],
       [214, 219, 227, ..., 213, 207, 210],
       [219, 219, 221, ..., 209, 205, 210]], dtype=uint8)

In [193]: temp[:, :, 2]
Out[193]:
array([[ 81,  88,  81, ..., 196, 207, 225],
       [ 69,  72,  69, ..., 208, 205, 210],
       [ 59,  66,  71, ..., 214, 200, 197],
       ...,
       [209, 214, 222, ..., 207, 207, 210],
       [207, 212, 220, ..., 211, 204, 207],
       [212, 212, 214, ..., 207, 202, 207]], dtype=uint8)

In [194]: temp[:, :, 0] = 0

In [195]: temp[:, :, 0]
Out[195]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [196]: ax.imshow(temp)
Out[196]: <matplotlib.image.AxesImage at 0x7f11f53ca7f0>

In [197]: temp[:, :, 1] = 0

In [198]: ax.imshow(temp)
Out[198]: <matplotlib.image.AxesImage at 0x7f11f4fc6a58>

In [199]: temp
Out[199]:
array([[[  0,   0,  81],
        [  0,   0,  88],
        [  0,   0,  81],
        ...,
        [  0,   0, 196],
        [  0,   0, 207],
        [  0,   0, 225]],

       [[  0,   0,  69],
        [  0,   0,  72],
        [  0,   0,  69],
        ...,
        [  0,   0, 208],
        [  0,   0, 205],
        [  0,   0, 210]],

       [[  0,   0,  59],
        [  0,   0,  66],
        [  0,   0,  71],
        ...,
        [  0,   0, 214],
        [  0,   0, 200],
        [  0,   0, 197]],

       ...,

       [[  0,   0, 209],
        [  0,   0, 214],
        [  0,   0, 222],
        ...,
        [  0,   0, 207],
        [  0,   0, 207],
        [  0,   0, 210]],

       [[  0,   0, 207],
        [  0,   0, 212],
        [  0,   0, 220],
        ...,
        [  0,   0, 211],
        [  0,   0, 204],
        [  0,   0, 207]],

       [[  0,   0, 212],
        [  0,   0, 212],
        [  0,   0, 214],
        ...,
        [  0,   0, 207],
        [  0,   0, 202],
        [  0,   0, 207]]], dtype=uint8)

In [200]: temp[:, :, 0]
Out[200]:
array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=uint8)

In [201]: temp
Out[201]:
array([[[  0,   0,  81],
        [  0,   0,  88],
        [  0,   0,  81],
        ...,
        [  0,   0, 196],
        [  0,   0, 207],
        [  0,   0, 225]],

       [[  0,   0,  69],
        [  0,   0,  72],
        [  0,   0,  69],
        ...,
        [  0,   0, 208],
        [  0,   0, 205],
        [  0,   0, 210]],

       [[  0,   0,  59],
        [  0,   0,  66],
        [  0,   0,  71],
        ...,
        [  0,   0, 214],
        [  0,   0, 200],
        [  0,   0, 197]],

       ...,

       [[  0,   0, 209],
        [  0,   0, 214],
        [  0,   0, 222],
        ...,
        [  0,   0, 207],
        [  0,   0, 207],
        [  0,   0, 210]],

       [[  0,   0, 207],
        [  0,   0, 212],
        [  0,   0, 220],
        ...,
        [  0,   0, 211],
        [  0,   0, 204],
        [  0,   0, 207]],

       [[  0,   0, 212],
        [  0,   0, 212],
        [  0,   0, 214],
        ...,
        [  0,   0, 207],
        [  0,   0, 202],
        [  0,   0, 207]]], dtype=uint8)

In [202]: immun.shape
Out[202]: (512, 512, 3)

In [203]: immun.mean()
Out[203]: 160.32521947224936

In [204]: immun.mean?
Docstring:
a.mean(axis=None, dtype=None, out=None, keepdims=False)

Returns the average of the array elements along given axis.

Refer to `numpy.mean` for full documentation.

See Also
--------
numpy.mean : equivalent function
Type:      builtin_function_or_method

In [205]: immun.mean(axis=2)
Out[205]:
array([[118.33333333, 125.33333333, 117.66666667, ..., 169.33333333,
        183.66666667, 203.33333333],
       [105.        , 108.        , 104.        , ..., 181.33333333,
        181.66666667, 189.        ],
       [ 92.        ,  99.        , 104.        , ..., 189.        ,
        178.33333333, 177.33333333],
       ...,
       [216.        , 221.        , 229.        , ..., 210.        ,
        210.33333333, 213.33333333],
       [212.66666667, 217.66666667, 225.66666667, ..., 212.66666667,
        207.33333333, 210.66666667],
       [217.66666667, 217.66666667, 219.66666667, ..., 208.66666667,
        205.66666667, 210.66666667]])

In [206]: immun.mean(axis=2).shape
Out[206]: (512, 512)

In [207]: np.int64(immun.mean(axis=2))
Out[207]:
array([[118, 125, 117, ..., 169, 183, 203],
       [105, 108, 104, ..., 181, 181, 189],
       [ 92,  99, 104, ..., 189, 178, 177],
       ...,
       [216, 221, 229, ..., 210, 210, 213],
       [212, 217, 225, ..., 212, 207, 210],
       [217, 217, 219, ..., 208, 205, 210]])

In [208]: ax.imshow(np.int64(immun.mean(axis=2)), cmap='gray')
Out[208]: <matplotlib.image.AxesImage at 0x7f11f4d6c160>

In [209]: ax.imshow(np.int64(immun.mean(axis=2)))
Out[209]: <matplotlib.image.AxesImage at 0x7f11f4d70748>

In [210]: ax.imshow(np.int64(immun.mean(axis=2)), cmap='gray')
Out[210]: <matplotlib.image.AxesImage at 0x7f11f4d70a20>

In [211]: ax.imshow(immun.mean(axis=2), cmap='gray')
Out[211]: <matplotlib.image.AxesImage at 0x7f11f4d6c710>

In [212]: from skimage import color

In [213]: color.rgb2grey(immun)
Out[213]:
array([[0.4839502 , 0.51140118, 0.47833922, ..., 0.63096314, 0.69032235,
        0.77099373],
       [0.43158588, 0.44335059, 0.42316941, ..., 0.67802196, 0.68247922,
        0.71580902],
       [0.37895373, 0.40640471, 0.42404039, ..., 0.71163451, 0.67295451,
        0.67210627],
       ...,
       [0.85485725, 0.8744651 , 0.90583765, ..., 0.82715333, 0.82601451,
        0.83777922],
       [0.83973647, 0.85934431, 0.89071686, ..., 0.83556196, 0.8142498 ,
        0.82684784],
       [0.85934431, 0.85934431, 0.86718745, ..., 0.81987569, 0.80724   ,
        0.82684784]])

In [214]: color.rgb2grey(immun).shape
Out[214]: (512, 512)

In [215]: ohki = io.imread('ohki2005.png')

In [216]: from skimage import filters

In [217]: filters.sobel?

In [218]: edges = filters.sobel(ohki)

In [219]: f, ax = plt.subplots()

In [220]: ax.imshow(edges, cmap='gray')
Out[220]: <matplotlib.image.AxesImage at 0x7f11f4d56e48>

In [221]: ls
08_images.md   face_alpha.png  face.png   ohki2005.png
08_images.pdf  face_gray.png   movie.avi

In [222]: import av

In [223]: mv = av.open('movie.avi')

In [224]: v = av.open('movie.avi')

In [225]: v
Out[225]: <av.InputContainer 'movie.avi'>

In [226]: v.duration
Out[226]: 5000000

In [227]: v.format
Out[227]: <av.ContainerFormat 'avi'>

In [228]: mv = []

In [229]: for frame in v.decode(video=0):
     ...:     mv.append(np.array(frame.to_image()))
     ...:

In [230]: mv[0]
Out[230]:
array([[[148, 148, 148],
        [151, 151, 151],
        [155, 155, 155],
        ...,
        [ 90,  90,  90],
        [ 92,  92,  92],
        [ 78,  78,  78]],

       [[151, 151, 151],
        [154, 154, 154],
        [157, 157, 157],
        ...,
        [111, 111, 111],
        [ 92,  92,  92],
        [ 64,  64,  64]],

       [[135, 135, 135],
        [137, 137, 137],
        [140, 140, 140],
        ...,
        [ 85,  85,  85],
        [ 71,  71,  71],
        [ 49,  49,  49]],

       ...,

       [[ 69,  69,  69],
        [ 80,  80,  80],
        [107, 107, 107],
        ...,
        [ 92,  92,  92],
        [106, 106, 106],
        [103, 103, 103]],

       [[ 85,  85,  85],
        [118, 118, 118],
        [154, 154, 154],
        ...,
        [ 73,  73,  73],
        [ 91,  91,  91],
        [ 93,  93,  93]],

       [[150, 150, 150],
        [159, 159, 159],
        [158, 158, 158],
        ...,
        [ 57,  57,  57],
        [ 62,  62,  62],
        [ 56,  56,  56]]], dtype=uint8)

In [231]: mv = np.asarray(mv)

In [232]: mv
Out[232]:
array([[[[148, 148, 148],
         [151, 151, 151],
         [155, 155, 155],
         ...,
         [ 90,  90,  90],
         [ 92,  92,  92],
         [ 78,  78,  78]],

        [[151, 151, 151],
         [154, 154, 154],
         [157, 157, 157],
         ...,
         [111, 111, 111],
         [ 92,  92,  92],
         [ 64,  64,  64]],

        [[135, 135, 135],
         [137, 137, 137],
         [140, 140, 140],
         ...,
         [ 85,  85,  85],
         [ 71,  71,  71],
         [ 49,  49,  49]],

        ...,

        [[ 69,  69,  69],
         [ 80,  80,  80],
         [107, 107, 107],
         ...,
         [ 92,  92,  92],
         [106, 106, 106],
         [103, 103, 103]],

        [[ 85,  85,  85],
         [118, 118, 118],
         [154, 154, 154],
         ...,
         [ 73,  73,  73],
         [ 91,  91,  91],
         [ 93,  93,  93]],

        [[150, 150, 150],
         [159, 159, 159],
         [158, 158, 158],
         ...,
         [ 57,  57,  57],
         [ 62,  62,  62],
         [ 56,  56,  56]]],


       [[[148, 148, 148],
         [150, 150, 150],
         [152, 152, 152],
         ...,
         [ 88,  88,  88],
         [ 58,  58,  58],
         [ 44,  44,  44]],

        [[155, 155, 155],
         [157, 157, 157],
         [159, 159, 159],
         ...,
         [ 77,  77,  77],
         [ 51,  51,  51],
         [ 48,  48,  48]],

        [[138, 138, 138],
         [141, 141, 141],
         [143, 143, 143],
         ...,
         [ 56,  56,  56],
         [ 43,  43,  43],
         [ 50,  50,  50]],

        ...,

        [[105, 105, 105],
         [135, 135, 135],
         [168, 168, 168],
         ...,
         [ 98,  98,  98],
         [ 88,  88,  88],
         [ 80,  80,  80]],

        [[148, 148, 148],
         [160, 160, 160],
         [173, 173, 173],
         ...,
         [ 77,  77,  77],
         [ 73,  73,  73],
         [ 68,  68,  68]],

        [[151, 151, 151],
         [144, 144, 144],
         [137, 137, 137],
         ...,
         [ 59,  59,  59],
         [ 53,  53,  53],
         [ 47,  47,  47]]],


       [[[154, 154, 154],
         [152, 152, 152],
         [151, 151, 151],
         ...,
         [ 67,  67,  67],
         [ 51,  51,  51],
         [ 44,  44,  44]],

        [[157, 157, 157],
         [155, 155, 155],
         [154, 154, 154],
         ...,
         [ 63,  63,  63],
         [ 50,  50,  50],
         [ 46,  46,  46]],

        [[142, 142, 142],
         [142, 142, 142],
         [141, 141, 141],
         ...,
         [ 47,  47,  47],
         [ 45,  45,  45],
         [ 50,  50,  50]],

        ...,

        [[165, 165, 165],
         [171, 171, 171],
         [186, 186, 186],
         ...,
         [ 91,  91,  91],
         [ 79,  79,  79],
         [ 61,  61,  61]],

        [[159, 159, 159],
         [156, 156, 156],
         [158, 158, 158],
         ...,
         [ 65,  65,  65],
         [ 53,  53,  53],
         [ 39,  39,  39]],

        [[138, 138, 138],
         [123, 123, 123],
         [113, 113, 113],
         ...,
         [ 49,  49,  49],
         [ 37,  37,  37],
         [ 24,  24,  24]]],


       ...,


       [[[ 68,  68,  68],
         [ 69,  69,  69],
         [ 66,  66,  66],
         ...,
         [ 89,  89,  89],
         [109, 109, 109],
         [120, 120, 120]],

        [[ 69,  69,  69],
         [ 69,  69,  69],
         [ 66,  66,  66],
         ...,
         [ 88,  88,  88],
         [106, 106, 106],
         [115, 115, 115]],

        [[102, 102, 102],
         [103, 103, 103],
         [ 99,  99,  99],
         ...,
         [ 75,  75,  75],
         [ 88,  88,  88],
         [ 94,  94,  94]],

        ...,

        [[ 84,  84,  84],
         [ 78,  78,  78],
         [ 77,  77,  77],
         ...,
         [ 66,  66,  66],
         [ 62,  62,  62],
         [ 60,  60,  60]],

        [[ 76,  76,  76],
         [ 75,  75,  75],
         [ 77,  77,  77],
         ...,
         [ 41,  41,  41],
         [ 36,  36,  36],
         [ 32,  32,  32]],

        [[ 75,  75,  75],
         [ 78,  78,  78],
         [ 75,  75,  75],
         ...,
         [ 34,  34,  34],
         [ 32,  32,  32],
         [ 30,  30,  30]]],


       [[[135, 135, 135],
         [133, 133, 133],
         [126, 126, 126],
         ...,
         [136, 136, 136],
         [134, 134, 134],
         [130, 130, 130]],

        [[148, 148, 148],
         [148, 148, 148],
         [143, 143, 143],
         ...,
         [141, 141, 141],
         [138, 138, 138],
         [133, 133, 133]],

        [[133, 133, 133],
         [137, 137, 137],
         [138, 138, 138],
         ...,
         [122, 122, 122],
         [119, 119, 119],
         [114, 114, 114]],

        ...,

        [[ 81,  81,  81],
         [ 83,  83,  83],
         [ 83,  83,  83],
         ...,
         [ 53,  53,  53],
         [ 56,  56,  56],
         [ 58,  58,  58]],

        [[ 73,  73,  73],
         [ 75,  75,  75],
         [ 79,  79,  79],
         ...,
         [ 71,  71,  71],
         [ 71,  71,  71],
         [ 70,  70,  70]],

        [[ 75,  75,  75],
         [ 79,  79,  79],
         [ 90,  90,  90],
         ...,
         [ 61,  61,  61],
         [ 56,  56,  56],
         [ 53,  53,  53]]],


       [[[132, 132, 132],
         [126, 126, 126],
         [123, 123, 123],
         ...,
         [ 55,  55,  55],
         [ 58,  58,  58],
         [ 61,  61,  61]],

        [[137, 137, 137],
         [134, 134, 134],
         [133, 133, 133],
         ...,
         [ 57,  57,  57],
         [ 61,  61,  61],
         [ 67,  67,  67]],

        [[120, 120, 120],
         [120, 120, 120],
         [120, 120, 120],
         ...,
         [ 48,  48,  48],
         [ 55,  55,  55],
         [ 64,  64,  64]],

        ...,

        [[ 64,  64,  64],
         [ 66,  66,  66],
         [ 68,  68,  68],
         ...,
         [ 29,  29,  29],
         [ 27,  27,  27],
         [ 26,  26,  26]],

        [[ 62,  62,  62],
         [ 69,  69,  69],
         [ 78,  78,  78],
         ...,
         [ 32,  32,  32],
         [ 31,  31,  31],
         [ 30,  30,  30]],

        [[ 84,  84,  84],
         [ 96,  96,  96],
         [114, 114, 114],
         ...,
         [ 49,  49,  49],
         [ 49,  49,  49],
         [ 50,  50,  50]]]], dtype=uint8)

In [233]: mv.shape
Out[233]: (300, 240, 320, 3)

In [234]: f, ax = plt.subplots()

In [235]: ax.imshow(mv[0])
Out[235]: <matplotlib.image.AxesImage at 0x7f11febcd390>

In [236]:
