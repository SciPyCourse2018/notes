mspacek@Godel:~/SciPyCourse2018/notes/06_fileio_mpl$ ipython
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.3.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import numpy as np

In [2]: np.loadtxt?

In [3]: np.loadtxt?

In [4]: pwd
Out[4]: '/home/mspacek/SciPyCourse2018/notes/06_fileio_mpl'

In [5]: ls
06_fileio_mpl.md   anatomy.pdf                 exercise.txt  t.npy   Vt2.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    V2.npy  Vt.mat
100_text.txt       exercise.npy                test2D.csv    V.npy   Vt.npz

In [6]: test1D = np.loadtxt('test1D.csv', delimiter=',')

In [7]: test1D
Out[7]: array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])

In [8]: test1D.dtype
Out[8]: dtype('float64')

In [9]: test1D = np.loadtxt('test1D.csv', delimiter=',', dtype=float)

In [10]: test1D = np.loadtxt('test1D.csv', delimiter=',', dtype=int)

In [11]: test1D
Out[11]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [12]: test1D = np.loadtxt('test1D.csv', delimiter=',', dtype=int)

In [13]: test1D
Out[13]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [14]: test1D.dtype
Out[14]: dtype('int64')

In [15]: test1D = np.loadtxt('test1D.csv', delimiter=',', dtype=np.int64)

In [16]: test1D
Out[16]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [17]: test2D = np.loadtxt('test2D.csv', delimiter=',', dtype=np.int64)

In [18]: test2D
Out[18]:
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

In [19]: test2D.shape
Out[19]: (3, 3)

In [20]: test2D.ndim
Out[20]: 2

In [21]: test2D.dtype
Out[21]: dtype('int64')

In [22]: a
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-22-3f786850e387> in <module>()
----> 1 a

NameError: name 'a' is not defined
> <ipython-input-22-3f786850e387>(1)<module>()
----> 1 a

ipdb> c

In [23]: a = np.arange(10)

In [24]: a
Out[24]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [25]: np.savetxt?

In [26]: a
Out[26]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [27]: np.savetxt?

In [28]: np.savetxt('test1D.txt', test1D)

In [29]: ls
06_fileio_mpl.md   anatomy.pdf                 exercise.txt  test2D.csv  V.npy    Vt.npz
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test1D.csv    t.npy       Vt2.mat
100_text.txt       exercise.npy                test1D.txt    V2.npy      Vt.mat

In [30]: np.savetxt?

In [31]: np.savetxt('test1D.txt', test1D, fmt='%g')

In [32]: np.savetxt?

In [33]: np.load?

In [34]: V = np.load('V.npy')

In [35]: V
Out[35]:
array([[0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
        0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
        0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
        0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
        0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
        0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
        0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
        0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
        0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
        0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
        0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
        0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
        0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
        0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
        0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
        0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
        0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
        0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
        0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
        0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ]])

In [36]: V.dtype
Out[36]: dtype('float64')

In [37]: len(V)
Out[37]: 1

In [38]: V.shape
Out[38]: (1, 100)

In [39]: t = np.load('t.npy')

In [40]: t
Out[40]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [41]: t
Out[41]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [42]: len(t)
Out[42]: 100

In [43]: np.save?

In [44]: np.save('V2.npy', 2*V)

In [45]: a = np.arange(10)

In [46]: a
Out[46]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [47]: np.save('boring.npy', a)

In [48]: b = np.load('boring.npy')

In [49]: b
Out[49]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [50]: b.dtype
Out[50]: dtype('int64')

In [51]: np.savez?

In [52]: np.savez('Vt.npz', V=V, t=t)

In [53]: np.load('Vt.npz')
Out[53]: <numpy.lib.npyio.NpzFile at 0x7f47786ed3c8>

In [54]: d = np.load('Vt.npz')

In [55]: d.keys()
Out[55]: ['V', 't']

In [56]: d['V']
Out[56]:
array([[0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
        0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
        0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
        0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
        0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
        0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
        0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
        0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
        0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
        0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
        0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
        0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
        0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
        0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
        0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
        0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
        0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
        0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
        0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
        0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ]])

In [57]: d['t']
Out[57]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [58]: V, t = d['V'], d['t']

In [59]: V
Out[59]:
array([[0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
        0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
        0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
        0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
        0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
        0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
        0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
        0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
        0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
        0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
        0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
        0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
        0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
        0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
        0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
        0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
        0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
        0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
        0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
        0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ]])

In [60]: t
Out[60]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [61]: d = np.load('Vt.npz')

In [62]: d
Out[62]: <numpy.lib.npyio.NpzFile at 0x7f477869f5c0>

In [63]: np.load?

In [64]: d.keys()
Out[64]: ['V', 't']

In [65]: d['V']
Out[65]:
array([[0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
        0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
        0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
        0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
        0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
        0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
        0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
        0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
        0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
        0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
        0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
        0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
        0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
        0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
        0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
        0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
        0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
        0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
        0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
        0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ]])

In [66]: import scipy

In [67]: scipy.io.loadmat?
Object `scipy.io.loadmat` not found.

In [68]: scipy.io
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-68-48c8febb2576> in <module>()
----> 1 scipy.io

AttributeError: module 'scipy' has no attribute 'io'
> <ipython-input-68-48c8febb2576>(1)<module>()
----> 1 scipy.io

ipdb> c

In [69]: import scipy.io

In [70]: scipy.io.loadmat?

In [71]: ls
06_fileio_mpl.md   anatomy.pdf                 exercise.npy  test1D.txt  V2.npy   Vt.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  exercise.txt  test2D.csv  V.npy    Vt.npz
100_text.txt       boring.npy                  test1D.csv    t.npy       Vt2.mat

In [72]: d = scipy.io.loadmat('Vt.mat')

In [73]: d.keys()
Out[73]: dict_keys(['__globals__', 't', '__header__', 'V', '__version__'])

In [74]: d['V']
Out[74]:
array([[0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
        0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
        0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
        0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
        0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
        0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
        0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
        0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
        0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
        0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
        0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
        0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
        0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
        0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
        0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
        0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
        0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
        0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
        0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
        0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ]])

In [75]: d['t']
Out[75]:
array([[0.  , 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ,
        0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21,
        0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32,
        0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43,
        0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54,
        0.55, 0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65,
        0.66, 0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76,
        0.77, 0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87,
        0.88, 0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98,
        0.99]])

In [76]: d2 = {}

In [77]: d2['V'] = 2*V

In [78]: d2['t'] = t

In [79]: d2
Out[79]:
{'V': array([[1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
         0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
         1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
         0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
         1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
         1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
         1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
         1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
         0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
         0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
         1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
         1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
         1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
         1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
         1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
         0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
         1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
         0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
         0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
         1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761]]),
 't': array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
        68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
        85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])}

In [80]: scipy.io.savemat('Vt2.mat', d2)

In [81]: np.fromfile?

In [82]: a
Out[82]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [83]: a.tofile?

In [84]: a.tofile('boring.binary', '')

In [85]: a = np.arange(10)

In [86]: np.savetxt?

In [87]: np.savetxt('exercise.txt', a)

In [88]: pwd
Out[88]: '/home/mspacek/SciPyCourse2018/notes/06_fileio_mpl'

In [89]: ls
06_fileio_mpl.md   anatomy.pdf                 boring.npy    test1D.csv  t.npy   Vt2.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  exercise.npy  test1D.txt  V2.npy  Vt.mat
100_text.txt       boring.binary               exercise.txt  test2D.csv  V.npy   Vt.npz

In [90]: np.savetxt?

In [91]: np.savetxt('exercise.txt', a, fmt='%g')

In [92]: b = np.loadtxt('exercise.txt')

In [93]: b
Out[93]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8., 99.])

In [94]: b = np.loadtxt('exercise.txt', dtype=int)

In [95]: b
Out[95]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 99])

In [96]: b = np.loadtxt('exercise.txt')

In [97]: b
Out[97]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8., 99.])

In [98]: b = np.int64(np.loadtxt('exercise.txt'))

In [99]: b
Out[99]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 99])

In [100]: a
Out[100]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [101]: np.save('exercise.npy', a)

In [102]: ls
06_fileio_mpl.md   anatomy.pdf                 boring.npy    test1D.csv  t.npy   Vt2.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  exercise.npy  test1D.txt  V2.npy  Vt.mat
100_text.txt       boring.binary               exercise.txt  test2D.csv  V.npy   Vt.npz

In [103]: c = np.load('exercise.npy')

In [104]: a
Out[104]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [105]: b
Out[105]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 99])

In [106]: a
Out[106]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [107]: c
Out[107]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [108]: a.dtype == c.dtype
Out[108]: True

In [109]: a == c
Out[109]:
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True])

In [110]: (a == c).all()
Out[110]: True

In [111]: np.arange(100)
Out[111]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [117]: plt.plot(np.arange(10), linestyle='None')
Out[117]: [<matplotlib.lines.Line2D at 0x7f4765ae3ba8>]

In [118]: plt.plot(np.arange(10), linestyle='none')
Out[118]: [<matplotlib.lines.Line2D at 0x7f47658944a8>]

In [119]: plt.plot(np.arange(10), linestyle='')
Out[119]: [<matplotlib.lines.Line2D at 0x7f476c26ce10>]

In [120]: a = np.zeros(10)

In [121]: a.fill(np.nan)

In [122]: a
Out[122]: array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan])

In [123]: np.tile?

In [124]: np.tile(np.nan, 10)
Out[124]: array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan])

In [125]: np.repeat?

In [126]: np.tile(np.nan, (10, 10))
Out[126]:
array([[nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],
       [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],
       [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],
       [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],
       [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],
       [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],
       [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],
       [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],
       [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],
       [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]])

In [128]: import matplotlib as plt

In [129]: np.arange(0, 4*np.pi, 0.1)
Out[129]:
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,
        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,
        4.4,  4.5,  4.6,  4.7,  4.8,  4.9,  5. ,  5.1,  5.2,  5.3,  5.4,
        5.5,  5.6,  5.7,  5.8,  5.9,  6. ,  6.1,  6.2,  6.3,  6.4,  6.5,
        6.6,  6.7,  6.8,  6.9,  7. ,  7.1,  7.2,  7.3,  7.4,  7.5,  7.6,
        7.7,  7.8,  7.9,  8. ,  8.1,  8.2,  8.3,  8.4,  8.5,  8.6,  8.7,
        8.8,  8.9,  9. ,  9.1,  9.2,  9.3,  9.4,  9.5,  9.6,  9.7,  9.8,
        9.9, 10. , 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9,
       11. , 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12. ,
       12.1, 12.2, 12.3, 12.4, 12.5])

In [130]: t = np.linspace(0, 4*np.pi, 100)

In [131]: t
Out[131]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [132]: t
Out[132]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [133]: s = np.sin(t)

In [134]: s
Out[134]:
array([ 0.00000000e+00,  1.26592454e-01,  2.51147987e-01,  3.71662456e-01,
        4.86196736e-01,  5.92907929e-01,  6.90079011e-01,  7.76146464e-01,
        8.49725430e-01,  9.09631995e-01,  9.54902241e-01,  9.84807753e-01,
        9.98867339e-01,  9.96854776e-01,  9.78802446e-01,  9.45000819e-01,
        8.95993774e-01,  8.32569855e-01,  7.55749574e-01,  6.66769001e-01,
        5.67059864e-01,  4.58226522e-01,  3.42020143e-01,  2.20310533e-01,
        9.50560433e-02, -3.17279335e-02, -1.58001396e-01, -2.81732557e-01,
       -4.00930535e-01, -5.13677392e-01, -6.18158986e-01, -7.12694171e-01,
       -7.95761841e-01, -8.66025404e-01, -9.22354294e-01, -9.63842159e-01,
       -9.89821442e-01, -9.99874128e-01, -9.93838464e-01, -9.71811568e-01,
       -9.34147860e-01, -8.81453363e-01, -8.14575952e-01, -7.34591709e-01,
       -6.42787610e-01, -5.40640817e-01, -4.29794912e-01, -3.12033446e-01,
       -1.89251244e-01, -6.34239197e-02,  6.34239197e-02,  1.89251244e-01,
        3.12033446e-01,  4.29794912e-01,  5.40640817e-01,  6.42787610e-01,
        7.34591709e-01,  8.14575952e-01,  8.81453363e-01,  9.34147860e-01,
        9.71811568e-01,  9.93838464e-01,  9.99874128e-01,  9.89821442e-01,
        9.63842159e-01,  9.22354294e-01,  8.66025404e-01,  7.95761841e-01,
        7.12694171e-01,  6.18158986e-01,  5.13677392e-01,  4.00930535e-01,
        2.81732557e-01,  1.58001396e-01,  3.17279335e-02, -9.50560433e-02,
       -2.20310533e-01, -3.42020143e-01, -4.58226522e-01, -5.67059864e-01,
       -6.66769001e-01, -7.55749574e-01, -8.32569855e-01, -8.95993774e-01,
       -9.45000819e-01, -9.78802446e-01, -9.96854776e-01, -9.98867339e-01,
       -9.84807753e-01, -9.54902241e-01, -9.09631995e-01, -8.49725430e-01,
       -7.76146464e-01, -6.90079011e-01, -5.92907929e-01, -4.86196736e-01,
       -3.71662456e-01, -2.51147987e-01, -1.26592454e-01, -4.89858720e-16])

In [135]: plt.plot(t, s)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-135-0a2637e61b73> in <module>()
----> 1 plt.plot(t, s)

AttributeError: module 'matplotlib' has no attribute 'plot'
> <ipython-input-135-0a2637e61b73>(1)<module>()
----> 1 plt.plot(t, s)

ipdb> c

In [136]: plt
Out[136]: <module 'matplotlib' from '/usr/local/lib/python3.5/dist-packages/matplotlib/__init__.py'>

In [137]: import matplotlib.pyplot as plt

In [138]: plt.plot(t, s)
Out[138]: [<matplotlib.lines.Line2D at 0x7f47660e1080>]

In [139]: plt.ion()

In [140]: plt.plot(t, s)
Out[140]: [<matplotlib.lines.Line2D at 0x7f47786da5f8>]

In [141]: plt.ion()

In [142]: plt.plot(t, s)
Out[142]: [<matplotlib.lines.Line2D at 0x7f47786da780>]

In [143]: plt.ion?
Signature: plt.ion()
Docstring: Turn interactive mode on.
File:      /usr/local/lib/python3.5/dist-packages/matplotlib/pyplot.py
Type:      function

In [144]: plt.ion()

In [145]: plt.plot(t, s)
Out[145]: [<matplotlib.lines.Line2D at 0x7f4764c32a90>]

In [146]: plt.ioff?
Signature: plt.ioff()
Docstring: Turn interactive mode off.
File:      /usr/local/lib/python3.5/dist-packages/matplotlib/pyplot.py
Type:      function

In [147]:
mspacek@Godel:~/SciPyCourse2018/notes/06_fileio_mpl$ ipython
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.3.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import matplotlib.pyplot as plt

In [2]: t = np.linspace(0, 4*np.pi, 100)

In [3]: s = np.sin(t)

In [4]: plt.plot(t, s)
Out[4]: [<matplotlib.lines.Line2D at 0x7f30e801c668>]

In [5]: plt.show()

In [6]: plt.xlabel('time (s)')
Out[6]: Text(0.5,13.9444,'time (s)')

In [7]: plt.ylabel('sin')
Out[7]: Text(13.9444,0.5,'sin')

In [8]: plt.title('here is a sinusoid')
Out[8]: Text(0.5,1,'here is a sinusoid')

In [9]: plt.show()

In [10]: plt.xlim(-10, 20)
Out[10]: (-10, 20)

In [11]: plt.ylim(-0.25, 0.25)
Out[11]: (-0.25, 0.25)

In [12]: plt.savefig?

In [13]: pwd
Out[13]: '/home/mspacek/SciPyCourse2018/notes/06_fileio_mpl'

In [14]: plt.savefig('sin.png')

In [15]: plt.plot(t, s)
Out[15]: [<matplotlib.lines.Line2D at 0x7f30ea942940>]

In [16]: plt.savefig('sin.png')

In [17]: ls
06_fileio_mpl.md            boring.binary  test1D.csv  V.npy
06_fileio_mpl.pdf           boring.npy     test1D.txt  Vt2.mat
100_text.txt                exercise.npy   test2D.csv  Vt.mat
anatomy.pdf                 exercise.txt   t.npy       Vt.npz
ASCII-Conversion-Chart.pdf  sin.png        V2.npy

In [18]: plt.savefig('sin.pdf')

In [19]: c = np.cos(t)

In [20]: plt.plot(t, c)
Out[20]: [<matplotlib.lines.Line2D at 0x7f30d6d423c8>]

In [21]: plt.plot?

In [22]: plt.plot(t, c, color='green')
Out[22]: [<matplotlib.lines.Line2D at 0x7f30ea6ce668>]

In [23]: plt.plot(t, c)
Out[23]: [<matplotlib.lines.Line2D at 0x7f30ea46c470>]

In [24]: plt.plot(t, c, marker='x')
Out[24]: [<matplotlib.lines.Line2D at 0x7f30ea42ea90>]

In [25]: plt.plot(t, c, marker='.')
Out[25]: [<matplotlib.lines.Line2D at 0x7f30ea3f2f98>]

In [26]: plt.plot(t, c, marker='')
Out[26]: [<matplotlib.lines.Line2D at 0x7f30c69623c8>]

In [27]: plt.plot(t, c, linestyle='--')
Out[27]: [<matplotlib.lines.Line2D at 0x7f30d6ac0240>]

In [28]: plt.plot(t, c, linestyle='--')
Out[28]: [<matplotlib.lines.Line2D at 0x7f30eab3f860>]

In [29]: plt.plot(t, c, linestyle='--')
Out[29]: [<matplotlib.lines.Line2D at 0x7f30eab00978>]

In [30]: plt.plot(t, c, linestyle='--')
Out[30]: [<matplotlib.lines.Line2D at 0x7f30eaac6780>]

In [31]: plt.figure()
Out[31]: <Figure size 700x700 with 0 Axes>

In [32]: plt.plot(t, s)
Out[32]: [<matplotlib.lines.Line2D at 0x7f30eaa940f0>]

In [33]: plt.close()

In [34]: plt.close()

In [35]: plt.close('all')

In [36]: a = np.random.random(1000) - 0.5

In [37]: a
Out[37]:
array([ 0.03270894, -0.05287704, -0.01982943,  0.18676486,  0.06334156,
       -0.28723823, -0.02790052, -0.0808857 , -0.0842967 , -0.16289444,
        0.0632825 , -0.44318804, -0.4629242 , -0.33690143, -0.14550588,
        0.27388652, -0.15740753, -0.22350844, -0.44055385,  0.42990444,
       -0.08687407, -0.02186292, -0.06916192,  0.05415907, -0.38752135,
        0.33026768, -0.4775269 , -0.32077337, -0.32760221, -0.1352826 ,
        0.1733184 , -0.26521139, -0.39881252,  0.35370114,  0.26774056,
       -0.31178753,  0.13080066,  0.33131631,  0.27472478, -0.20441926,
        0.2631317 , -0.08391832,  0.29111727,  0.22821882,  0.28452534,
        0.00662308,  0.36921672,  0.23700172,  0.20234676,  0.00625129,
       -0.37118312,  0.42404759, -0.4690668 ,  0.03968673, -0.21235096,
       -0.37799609,  0.32898196,  0.44295786,  0.18799766, -0.35040247,
        0.3745207 ,  0.39095367, -0.4061155 ,  0.24672177, -0.1657589 ,
       -0.39057922, -0.09634651,  0.36176118,  0.37475207,  0.43861323,
       -0.01906221,  0.17834035,  0.16725111,  0.41711975,  0.04074724,
        0.30243392, -0.47224016,  0.2275969 ,  0.35727575,  0.30843273,
       -0.17123606,  0.25918235,  0.45844395, -0.4177147 ,  0.17148171,
       -0.4056599 ,  0.36058093, -0.45923862,  0.0581215 , -0.00759686,
       -0.23947624,  0.15588594,  0.10043355,  0.38993535, -0.22787974,
       -0.13928037, -0.31896956,  0.16369238, -0.13006648, -0.47110782,
        0.2387647 ,  0.31910315, -0.08015466, -0.12700913, -0.42350793,
       -0.48069907, -0.43320625, -0.15197708, -0.42407326,  0.28102503,
       -0.36201135,  0.17534878, -0.19831232,  0.12877711, -0.43991713,
        0.03146053, -0.1927379 , -0.041679  , -0.44902368,  0.22060357,
        0.28494816,  0.06813212,  0.43751618, -0.21446465, -0.05862711,
       -0.0439399 ,  0.01556989,  0.12303841,  0.26412471, -0.47169166,
       -0.0617657 , -0.3622304 , -0.11889385, -0.48051623,  0.29388221,
       -0.1053909 ,  0.03451071, -0.09259268,  0.22264546,  0.41729034,
       -0.37598211,  0.44878832,  0.20222831, -0.3963828 , -0.11761411,
       -0.40018541, -0.13630388, -0.46309575,  0.17723022, -0.20465049,
       -0.26682256, -0.13282062,  0.09150939,  0.20630566, -0.46225361,
        0.30064077,  0.44882892, -0.24083082,  0.37942172, -0.01213066,
        0.42502464, -0.48038849, -0.07031539,  0.07168241, -0.04885477,
        0.37020188,  0.00305841,  0.10364742, -0.48830621, -0.4713621 ,
       -0.49862184,  0.46307726,  0.44326997, -0.05437575,  0.37088323,
       -0.19903201, -0.06312676, -0.22649126, -0.03790088,  0.08540283,
        0.08224011,  0.15368034,  0.19399464, -0.3280377 ,  0.27700506,
        0.2600979 , -0.04814665, -0.13196041,  0.3938231 ,  0.15464278,
       -0.37645799, -0.26563667,  0.13264486,  0.31478533,  0.45487849,
        0.14233876,  0.07146241,  0.13007592,  0.28511595,  0.42484401,
        0.23367848,  0.03210593, -0.16348068, -0.20935716, -0.03164056,
       -0.4202105 , -0.24892193, -0.15025161, -0.16903633, -0.48957587,
       -0.37409293,  0.48925594,  0.23007337,  0.33304891, -0.26576239,
        0.38138072, -0.4155614 , -0.2443014 ,  0.28739397,  0.37008043,
        0.270571  , -0.09894743, -0.02818676,  0.12769889, -0.43441853,
        0.1825384 ,  0.30306784, -0.48183905, -0.03029179, -0.30218323,
        0.13131494,  0.26175647,  0.12986429, -0.03442774,  0.25655108,
        0.46470465, -0.03270491, -0.13022906, -0.12621106,  0.17485284,
       -0.43011176, -0.1466483 , -0.33319815,  0.19547454,  0.34571909,
        0.36013184,  0.43309782, -0.37375939,  0.1108414 ,  0.14308657,
        0.17315787,  0.44903422, -0.03645882,  0.30993471, -0.22486128,
        0.16316953, -0.27649408,  0.44026356, -0.3674204 ,  0.15441042,
       -0.17978768,  0.41930444,  0.39423629,  0.0020249 , -0.40206943,
        0.36695629, -0.05748929, -0.18123111,  0.26040643, -0.16188845,
       -0.36074047, -0.27117116,  0.0358744 ,  0.28154243,  0.3393743 ,
        0.01224624, -0.10829449, -0.15888319, -0.47761866,  0.39447262,
       -0.14857407, -0.4372843 ,  0.47812861,  0.07379599, -0.29106562,
        0.29308862, -0.13791325,  0.43510994,  0.03464369, -0.22851482,
       -0.19609859, -0.37120624,  0.01120342,  0.24608342, -0.0132994 ,
        0.18574421, -0.13361096,  0.45535185,  0.13385663, -0.22950654,
       -0.32440895, -0.3204498 , -0.29653308,  0.38120848,  0.4778596 ,
       -0.30340736,  0.37263558, -0.02061452,  0.37711755,  0.43018137,
       -0.43639727,  0.21785451, -0.19618677,  0.06147962,  0.27360513,
        0.24361911,  0.43734893,  0.49402392, -0.12211582,  0.0864349 ,
        0.09494372,  0.2024741 ,  0.41150088, -0.46855683, -0.32639049,
       -0.28408805,  0.49250706,  0.214918  , -0.24100182,  0.48271732,
        0.33568462,  0.21932766,  0.426774  , -0.39447784, -0.32548705,
       -0.1001591 , -0.12843894, -0.08859483, -0.08422313,  0.20234952,
        0.19586431,  0.13277614, -0.20468379, -0.0286927 , -0.09937376,
       -0.34327292, -0.146967  ,  0.17005632, -0.44311846,  0.0894479 ,
        0.18525972,  0.32800192,  0.4502056 , -0.04625454, -0.29411902,
        0.03982061, -0.42712602, -0.31982876,  0.40750091,  0.13590807,
        0.03998173,  0.02051562,  0.37158334,  0.4461307 , -0.15531892,
        0.05395418,  0.4500898 ,  0.11071456,  0.17030162,  0.16613087,
        0.44871695,  0.41823301, -0.02343902, -0.07618762, -0.31831817,
        0.10174544, -0.45817679,  0.02626521, -0.11118721,  0.02261891,
       -0.29086008,  0.25873486, -0.15845408, -0.49145482,  0.48107572,
        0.42058494, -0.35291417, -0.4703418 , -0.23565764, -0.14960575,
       -0.16802173,  0.07026549, -0.02129143, -0.4210416 , -0.02817005,
       -0.27399435,  0.49406496, -0.39646549, -0.44205912,  0.09684657,
        0.11715197,  0.4729714 , -0.08678871,  0.28125671,  0.1243416 ,
       -0.11280072, -0.48701115, -0.04818899, -0.20972434,  0.0591909 ,
       -0.10072767, -0.01320997,  0.42210038, -0.02849595,  0.04107032,
        0.01289294,  0.11514334, -0.30686427,  0.03620822, -0.45166974,
        0.38539528, -0.4750804 , -0.24627874,  0.02642605, -0.30774105,
        0.36381841, -0.0727868 , -0.1303476 , -0.31788802,  0.11489894,
        0.26345984,  0.20420057,  0.12787021, -0.22708621,  0.01953914,
        0.33673011, -0.35938575,  0.49575498, -0.13450969,  0.16945984,
        0.48562432, -0.17786779, -0.3091648 , -0.38436683,  0.02981882,
        0.30002527, -0.12481924, -0.36276763, -0.14400586, -0.35577115,
       -0.04760029, -0.25529842, -0.17213453,  0.17684712,  0.42420757,
       -0.40143257,  0.41944965, -0.31312602, -0.22904499,  0.11452303,
        0.08266414,  0.47438983,  0.43541541,  0.36963765, -0.37348568,
       -0.00095745, -0.4378822 ,  0.09411549,  0.33873528, -0.03113518,
        0.33026577,  0.41335027,  0.12520845, -0.4794612 ,  0.40725592,
        0.08306909,  0.35491262, -0.43435091,  0.04753959,  0.17252551,
       -0.38054021, -0.47722014, -0.08864161,  0.09163515, -0.26734041,
       -0.10226242, -0.07479218, -0.40321101,  0.06810575, -0.03599333,
        0.33098139, -0.06935976,  0.27505135,  0.20987535, -0.35110353,
       -0.04814195, -0.36099753,  0.3414818 , -0.31343336,  0.09563809,
        0.2574704 ,  0.40663564, -0.42108564,  0.03934238,  0.42290598,
        0.06764015, -0.39495579,  0.12144152, -0.26999944,  0.41780385,
        0.15717352, -0.30950172,  0.08230967, -0.39377922, -0.04093663,
       -0.48912474, -0.19568487, -0.09597502,  0.05137429,  0.41818125,
       -0.13492745, -0.05286163, -0.23902782, -0.37216123,  0.03786305,
       -0.49944489,  0.37194007,  0.16722496,  0.44893494,  0.28001593,
        0.35964817, -0.41206207, -0.42344831, -0.12001812, -0.04358396,
        0.28054629, -0.17500062, -0.4522952 , -0.2625105 ,  0.24399676,
       -0.02530777, -0.02711146, -0.47343261, -0.38346069,  0.16770146,
        0.35441802,  0.10596812, -0.46654079,  0.19831086, -0.3032793 ,
        0.05567893, -0.29036339, -0.48276351,  0.25359466,  0.34827521,
        0.05787365,  0.44242566, -0.03314412,  0.25936347, -0.00856578,
       -0.1805543 ,  0.35641499,  0.21190565,  0.2347188 ,  0.13023233,
        0.37992132,  0.06607778,  0.26559766, -0.06480257,  0.45393886,
       -0.40365877, -0.31045741,  0.3956454 , -0.0952572 ,  0.09803124,
        0.35391868, -0.49766999,  0.11753823,  0.42809091, -0.34249234,
        0.43791999, -0.2557753 ,  0.49129509,  0.18142488,  0.30927996,
        0.3749479 ,  0.10986238,  0.21887563,  0.49403021, -0.45374822,
        0.33008433, -0.09369083, -0.30580723, -0.23085206,  0.10637698,
        0.02214841,  0.44403526, -0.13451009,  0.31414469,  0.49315388,
        0.12258156,  0.11880909,  0.21123494, -0.00308336, -0.25569671,
        0.0915844 , -0.21793847, -0.18264941,  0.45423907, -0.42688784,
       -0.12003885,  0.4736389 ,  0.3207943 ,  0.34815466, -0.17652919,
       -0.30049954, -0.04086152,  0.19231062, -0.05252848,  0.46612205,
       -0.09445754, -0.32147852,  0.1232668 ,  0.3093864 ,  0.2942076 ,
       -0.42048008, -0.24020781,  0.44776031,  0.17928488, -0.31367039,
        0.34559597, -0.28909928,  0.47952104,  0.14140012, -0.29568115,
        0.23201446, -0.31446979, -0.39648146, -0.26194633,  0.46040364,
        0.38256595,  0.43469209, -0.36149466,  0.27528218,  0.24444032,
        0.3803732 , -0.143229  , -0.01927706, -0.21639378, -0.27386395,
        0.07363468, -0.24304382, -0.13992597, -0.4269105 ,  0.30401228,
       -0.43810459, -0.08739929,  0.21434617, -0.36233318, -0.43904248,
        0.16670678, -0.30986941, -0.2277526 , -0.06029569,  0.23669901,
        0.21443577, -0.18807385, -0.29044832, -0.28584248,  0.07646229,
       -0.14343721,  0.49579415,  0.01936824,  0.10811892, -0.14940672,
        0.21718746,  0.2973201 ,  0.31732302, -0.16909791,  0.23417799,
        0.44309141,  0.49626876, -0.4956827 ,  0.47903378, -0.45393308,
        0.09111117, -0.16944084, -0.11070747,  0.43293001, -0.03468512,
       -0.19958996, -0.13383764, -0.17278328, -0.39464924,  0.05870488,
        0.25493228,  0.0482892 , -0.3670009 , -0.28158751, -0.44684558,
        0.39491715,  0.34915808, -0.07180872, -0.16254239,  0.03358793,
        0.32872989, -0.17969543,  0.48703468, -0.30439741, -0.27530642,
       -0.16699434, -0.07665897,  0.47942459, -0.27686892, -0.31185178,
        0.20626414,  0.46024672,  0.29661318, -0.05402426,  0.4623994 ,
       -0.09197038, -0.03070183, -0.36401878,  0.36035118,  0.42965204,
       -0.10479103,  0.36655029, -0.42657056,  0.17077909,  0.36588705,
        0.36023438, -0.16129631, -0.10757539,  0.24649857,  0.28719933,
       -0.44121931, -0.36187767,  0.27055627, -0.38683163, -0.17584625,
        0.44901424, -0.37616687, -0.10307867, -0.20258942,  0.48706081,
        0.48077782, -0.43127892, -0.16948921, -0.20418987,  0.37939748,
       -0.30193966, -0.09844618, -0.08465258,  0.34831895,  0.30364441,
       -0.48978405,  0.15952663, -0.47894373,  0.00219981,  0.36153391,
        0.18282173,  0.2854516 ,  0.14364636, -0.1118308 ,  0.11145601,
        0.10579915, -0.31235722, -0.0404829 , -0.02383563, -0.36174353,
       -0.33611375,  0.32540576, -0.26666998, -0.39428499,  0.16151388,
       -0.19396601,  0.00801302, -0.15455033, -0.34299284, -0.19181388,
       -0.09085388,  0.43552282,  0.07594698, -0.34435009,  0.16940278,
       -0.08728895, -0.38268661,  0.10551532, -0.05599422, -0.20205199,
        0.47064142, -0.38801859,  0.38488647, -0.13334988, -0.27930023,
        0.10343053, -0.40548869, -0.28858439,  0.35349556, -0.14789421,
       -0.44529262, -0.36049816,  0.23672273, -0.39239854, -0.41513949,
        0.2228653 , -0.07891329, -0.30042858, -0.46477217, -0.40003069,
       -0.20418854,  0.26028472,  0.11294922, -0.12859938, -0.14164731,
        0.06375231, -0.44688724, -0.43432407,  0.11907965, -0.08429185,
       -0.45209778,  0.20769274,  0.36779217, -0.28567595,  0.47115867,
       -0.28557707, -0.24887832,  0.00310591,  0.13272875,  0.44324233,
       -0.15449686,  0.0067077 , -0.07309429, -0.48551596, -0.37387365,
        0.40015086,  0.25178484, -0.47561971, -0.22543318, -0.30333969,
        0.06437954,  0.18905183, -0.31027539,  0.11178205,  0.11550964,
        0.32416091, -0.49595223,  0.48747899,  0.00860723,  0.30048866,
        0.18590907, -0.15169633, -0.2890409 , -0.46974907, -0.40341052,
       -0.01521263,  0.10799854, -0.41836062,  0.38105552,  0.46585521,
       -0.0721209 , -0.49445172,  0.12379943, -0.424661  ,  0.41227428,
        0.06210025,  0.03885511, -0.25607361, -0.11690652, -0.38636361,
        0.12647566, -0.27158182, -0.284834  , -0.3658284 ,  0.48359167,
       -0.03143272, -0.31879893,  0.18825895,  0.37418096, -0.33071197,
       -0.31228792,  0.34575035, -0.25320236,  0.05004517, -0.43700152,
       -0.30415197, -0.18754408, -0.02274177, -0.46107042, -0.29976137,
       -0.33239268,  0.07527736,  0.30689788,  0.47967011,  0.3492077 ,
        0.09979597, -0.27713535,  0.09216692, -0.3590572 , -0.42567361,
        0.2639413 , -0.27968802, -0.35885807,  0.07684638,  0.36283667,
        0.04778258,  0.37282302,  0.15475572,  0.12980348,  0.09628145,
        0.21339327,  0.39791382,  0.02190416, -0.2873149 ,  0.08935057,
       -0.09606249, -0.32082138,  0.37958157, -0.02867149,  0.10984018,
       -0.1823709 , -0.3714845 ,  0.07201663, -0.30822037, -0.42978467,
        0.21460087, -0.35218102,  0.26584332,  0.20171431, -0.17561084,
        0.19367549,  0.47273724, -0.44278279,  0.0676576 ,  0.31299601,
        0.35124642,  0.47278118,  0.07263643, -0.4798627 ,  0.38165016,
       -0.31733231,  0.37640797,  0.45561638,  0.07945891,  0.46646947,
       -0.30286837,  0.15842358,  0.46465254,  0.20518537,  0.23789126,
        0.1236077 , -0.40902431,  0.28764117,  0.04273148, -0.06735303,
        0.16472127, -0.00906734,  0.30428125,  0.27891691, -0.22608933,
        0.08132044, -0.44250045, -0.05849724,  0.4843566 , -0.00627633,
       -0.26475939, -0.42863081, -0.07035158,  0.42886331,  0.35213881,
        0.28260119, -0.12156257, -0.46741664,  0.43802647, -0.05094691,
        0.05534179,  0.3754009 , -0.04134035,  0.33121691, -0.18345103,
        0.10790292, -0.00384271, -0.39128902,  0.39161163, -0.34468275,
       -0.42194949, -0.0614255 , -0.1626736 ,  0.49459428, -0.20501037,
        0.17011672, -0.28215513,  0.35748789, -0.45489465, -0.0400971 ,
        0.46850403,  0.18082852,  0.4341387 ,  0.4862965 ,  0.2604181 ])

In [38]: plt.hist(a)
Out[38]:
(array([106., 106.,  82.,  97., 108.,  95., 104.,  91., 104., 107.]),
 array([-0.49944489, -0.39987352, -0.30030216, -0.20073079, -0.10115943,
        -0.00158806,  0.0979833 ,  0.19755467,  0.29712603,  0.3966974 ,
         0.49626876]),
 <a list of 10 Patch objects>)

In [39]: plt.hist(a, bins='auto')
Out[39]:
(array([ 96.,  86.,  90.,  84.,  95.,  88., 105.,  80.,  82.,  89., 105.]),
 array([-0.49944489, -0.40892546, -0.31840604, -0.22788662, -0.1373672 ,
        -0.04684777,  0.04367165,  0.13419107,  0.22471049,  0.31522992,
         0.40574934,  0.49626876]),
 <a list of 11 Patch objects>)

In [40]: np.sqrt(1000)
Out[40]: 31.622776601683793

In [41]: plt.hist(a, bins=30)
Out[41]:
(array([37., 35., 34., 34., 27., 45., 32., 24., 26., 31., 36., 30., 39.,
        33., 36., 24., 35., 36., 45., 21., 38., 29., 30., 32., 28., 35.,
        41., 26., 41., 40.]),
 array([-0.49944489, -0.46625443, -0.43306398, -0.39987352, -0.36668307,
        -0.33349261, -0.30030216, -0.2671117 , -0.23392125, -0.20073079,
        -0.16754034, -0.13434988, -0.10115943, -0.06796897, -0.03477852,
        -0.00158806,  0.03160239,  0.06479285,  0.0979833 ,  0.13117376,
         0.16436421,  0.19755467,  0.23074512,  0.26393558,  0.29712603,
         0.33031649,  0.36350694,  0.3966974 ,  0.42988785,  0.46307831,
         0.49626876]),
 <a list of 30 Patch objects>)

In [42]: plt.hist(a, bins=np.arange(-1, 1, 0.1))
Out[42]:
(array([  0.,   0.,   0.,   0.,   0., 106., 106.,  82.,  99., 107.,  96.,
        103.,  91., 104., 106.,   0.,   0.,   0.,   0.]),
 array([-1.00000000e+00, -9.00000000e-01, -8.00000000e-01, -7.00000000e-01,
        -6.00000000e-01, -5.00000000e-01, -4.00000000e-01, -3.00000000e-01,
        -2.00000000e-01, -1.00000000e-01, -2.22044605e-16,  1.00000000e-01,
         2.00000000e-01,  3.00000000e-01,  4.00000000e-01,  5.00000000e-01,
         6.00000000e-01,  7.00000000e-01,  8.00000000e-01,  9.00000000e-01]),
 <a list of 19 Patch objects>)

In [43]: plt.plot(t, s)
Out[43]: [<matplotlib.lines.Line2D at 0x7f30d41c07b8>]

In [44]: plt.axhline(0)
Out[44]: <matplotlib.lines.Line2D at 0x7f30ea9c74e0>

In [45]: plt.axvline(6)
Out[45]: <matplotlib.lines.Line2D at 0x7f30d41e2ef0>

In [46]: plt.text(8, 0.25, 'hi')
Out[46]: Text(8,0.25,'hi')
